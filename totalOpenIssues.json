{
  "data": {
    "total_count": 183,
    "incomplete_results": false,
    "items": [
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2135",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2135/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2135/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2135/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2135",
        "id": 2504612238,
        "node_id": "I_kwDOAlTKGc6VSVmO",
        "number": 2135,
        "title": "Allow custom file extensions in --eval from CLI",
        "user": {
          "login": "PartMan7",
          "id": 47669599,
          "node_id": "MDQ6VXNlcjQ3NjY5NTk5",
          "avatar_url": "https://avatars.githubusercontent.com/u/47669599?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/PartMan7",
          "html_url": "https://github.com/PartMan7",
          "followers_url": "https://api.github.com/users/PartMan7/followers",
          "following_url": "https://api.github.com/users/PartMan7/following{/other_user}",
          "gists_url": "https://api.github.com/users/PartMan7/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/PartMan7/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/PartMan7/subscriptions",
          "organizations_url": "https://api.github.com/users/PartMan7/orgs",
          "repos_url": "https://api.github.com/users/PartMan7/repos",
          "events_url": "https://api.github.com/users/PartMan7/events{/privacy}",
          "received_events_url": "https://api.github.com/users/PartMan7/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-09-04T08:09:41Z",
        "updated_at": "2024-09-04T08:09:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nAs part of a prebuild step in a project of mine, I'm reading multiple `tsx` files, inserting a small snippet, and running them through `ts-node --eval`. I would like this to run if I specify an appropriate file extension.\r\n\r\n\r\n### Is this request related to a problem?\r\nIn the above case, even if I pass the appropriate config, due to the file name in eval being [hardcoded as \\[eval\\].ts](https://github.com/TypeStrong/ts-node/blob/ddb05ef23be92a90c3ecac5a0220435c65ebbd2a/src/bin.ts#L465), it ends up evaluated as `.ts`.\r\n\r\n<img width=\"880\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c36409f8-ed2f-44ab-9d0a-c460795d6c8d\">\r\n\r\n```\r\nnpx ts-node --swc --compilerOptions '{\"jsx\":\"react-jsx\"}' -e 'const element = <div>You lost the game</div>;'\r\n```\r\n\r\nWith the addition of a flag like `--eval-extension '.tsx'`, the above could now work:\r\n```\r\nnpx ts-node --swc --compilerOptions '{\"jsx\":\"react-jsx\"}' --eval-extension '.tsx' -e 'const element = <div>You lost the game</div>;'\r\n```\r\n\r\n### Alternatives you've considered\r\nCurrently I'm adding an additional step to the process, where I pipe the output to an intermediate file and then interpret it through ts-node, but this is a bypass for an apparent shortcoming of the `-e` flag.\r\n\r\n\r\n\r\n### Additional context\r\nThis was run locally on 10.9.1.\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2135/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2135/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2134",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2134/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2134/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2134/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2134",
        "id": 2471492164,
        "node_id": "I_kwDOAlTKGc6TT_pE",
        "number": 2134,
        "title": "Wrong TS2345 error message in screenshot on website",
        "user": {
          "login": "muzimuzhi",
          "id": 6376638,
          "node_id": "MDQ6VXNlcjYzNzY2Mzg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6376638?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/muzimuzhi",
          "html_url": "https://github.com/muzimuzhi",
          "followers_url": "https://api.github.com/users/muzimuzhi/followers",
          "following_url": "https://api.github.com/users/muzimuzhi/following{/other_user}",
          "gists_url": "https://api.github.com/users/muzimuzhi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/muzimuzhi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/muzimuzhi/subscriptions",
          "organizations_url": "https://api.github.com/users/muzimuzhi/orgs",
          "repos_url": "https://api.github.com/users/muzimuzhi/repos",
          "events_url": "https://api.github.com/users/muzimuzhi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/muzimuzhi/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-08-17T11:48:11Z",
        "updated_at": "2024-08-17T11:48:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nTS2345\r\nscreenshot\r\n\r\n### Expected Behavior\r\n\r\n```\r\nerror TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThe [screenshot](https://github.com/TypeStrong/ts-node/blob/ddb05ef23be92a90c3ecac5a0220435c65ebbd2a/website/static/img/screenshot.png) on website () shows\r\n```\r\nerror TS2345: Argument of type '\"foo\"' is not assignable to parameter of type 'number'.\r\n```\r\n\r\nin which the value `\"foo\"` is used as type.\r\n\r\n### Minimal reproduction\r\n\r\n```\r\n$ npx ts-node\r\n> const x = 10\r\nundefined\r\n> const y = 'foo'\r\nundefined\r\n> function add(x: number, y: number) { return x + y }\r\nundefined\r\n> add(x, y)\r\n<repl>.ts:7:8 - error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\r\n\r\n7 add(x, y)\r\n         ~\r\n\r\n```",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2134/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2134/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2133",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2133/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2133/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2133/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2133",
        "id": 2469586282,
        "node_id": "I_kwDOAlTKGc6TMuVq",
        "number": 2133,
        "title": "this Project  is  already  dead ,  please  friends use   tsx  or  swc-node to instead it  ",
        "user": {
          "login": "Super1Windcloud",
          "id": 174852824,
          "node_id": "U_kgDOCmwK2A",
          "avatar_url": "https://avatars.githubusercontent.com/u/174852824?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Super1Windcloud",
          "html_url": "https://github.com/Super1Windcloud",
          "followers_url": "https://api.github.com/users/Super1Windcloud/followers",
          "following_url": "https://api.github.com/users/Super1Windcloud/following{/other_user}",
          "gists_url": "https://api.github.com/users/Super1Windcloud/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Super1Windcloud/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Super1Windcloud/subscriptions",
          "organizations_url": "https://api.github.com/users/Super1Windcloud/orgs",
          "repos_url": "https://api.github.com/users/Super1Windcloud/repos",
          "events_url": "https://api.github.com/users/Super1Windcloud/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Super1Windcloud/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2024-08-16T06:26:01Z",
        "updated_at": "2024-09-01T05:41:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "this Project  is  already  dead ,  please  friends use   tsx  or  swc-node to instead it  ",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2133/reactions",
          "total_count": 6,
          "+1": 5,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 1,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2133/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2130",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2130/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2130/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2130/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2130",
        "id": 2439940729,
        "node_id": "I_kwDOAlTKGc6Rbop5",
        "number": 2130,
        "title": "Importing modules without named exports fails when using ts-node/esm",
        "user": {
          "login": "Stono",
          "id": 1486729,
          "node_id": "MDQ6VXNlcjE0ODY3Mjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1486729?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Stono",
          "html_url": "https://github.com/Stono",
          "followers_url": "https://api.github.com/users/Stono/followers",
          "following_url": "https://api.github.com/users/Stono/following{/other_user}",
          "gists_url": "https://api.github.com/users/Stono/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Stono/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Stono/subscriptions",
          "organizations_url": "https://api.github.com/users/Stono/orgs",
          "repos_url": "https://api.github.com/users/Stono/repos",
          "events_url": "https://api.github.com/users/Stono/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Stono/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-07-31T12:29:34Z",
        "updated_at": "2024-07-31T12:30:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Firstly, apologies if this thread comes across confused - because cjs -> esm really does have me confused.   I'm trying to be a good citizen and move across, but it's painful.  It's entirely possible i'm being an idiot.  So let me explain with an example:\r\n\r\nTake the `kafkajs` library as an example, it's a commonjs library with no named exports, when my app is commonjs, this code is fine:\r\n\r\n```\r\nimport { ConfigResourceTypes } from 'kafkajs'\r\nconsole.log(ConfigResourceTypes)\r\n```\r\n\r\n```\r\n❯ ./node_modules/.bin/tsx lib/index.ts\r\n{ UNKNOWN: 0, TOPIC: 2, BROKER: 4, BROKER_LOGGER: 8 }\r\n```\r\n\r\nHowever if i change my app to esm,(`type: module` in package.json), then it fails:\r\n\r\n```\r\n❯ ./node_modules/.bin/tsx lib/index.ts\r\nimport { ConfigResourceTypes } from 'kafkajs'\r\n         ^\r\nSyntaxError: The requested module 'kafkajs' does not provide an export named 'ConfigResourceTypes'\r\n    at ModuleJob._instantiate (node:internal/modules/esm/module_job:171:21)\r\n    at async ModuleJob.run (node:internal/modules/esm/module_job:254:5)\r\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:485:26)\r\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:109:5)\r\n\r\nNode.js v22.5.1\r\n```\r\n\r\nThe error makes sense, but it's unclear to me why it's fine if my app is commonjs, but not if it's esm.  It's like in one of those scenarios it handles the fact it's a cjs module and almost pollyfills the named exports, but in the other it doesn't.\r\n\r\nOn top of that, the IDE has no problems at all, so this catches people out at runtime, which sucks.  I think that's because `@types/kafkajs` gives it the impression it _does_ have named exports.\r\n\r\nIs this a bug with `ts-node/esm`?  Or am I doing something straight up wrong?  I've tried various permutations of `allowSyntheticDefaultImports`, `esModuleInterop` etc to try and get my IDE to fail in the same way ts-node does when running in esm, but I can't.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2130/reactions",
          "total_count": 2,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2130/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2129",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2129/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2129/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2129/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2129",
        "id": 2434879287,
        "node_id": "I_kwDOAlTKGc6RIU83",
        "number": 2129,
        "title": "Compile time errors being suppressed when using esm",
        "user": {
          "login": "Stono",
          "id": 1486729,
          "node_id": "MDQ6VXNlcjE0ODY3Mjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1486729?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Stono",
          "html_url": "https://github.com/Stono",
          "followers_url": "https://api.github.com/users/Stono/followers",
          "following_url": "https://api.github.com/users/Stono/following{/other_user}",
          "gists_url": "https://api.github.com/users/Stono/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Stono/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Stono/subscriptions",
          "organizations_url": "https://api.github.com/users/Stono/orgs",
          "repos_url": "https://api.github.com/users/Stono/repos",
          "events_url": "https://api.github.com/users/Stono/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Stono/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-07-29T09:12:49Z",
        "updated_at": "2024-07-29T09:12:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I really struggled to think of the correct title for this, so please edit it as required.  I went down a rabbithole today whilst moving one of our apps to `esm`, as it was failing to start (with ts-node) due to the following node error:\r\n\r\n```\r\n❯ node --experimental-specifier-resolution=node --loader ts-node/esm lib/index.ts\r\nnode:internal/modules/run_main:115\r\n    triggerUncaughtException(\r\n    ^\r\n[Object: null prototype] {\r\n  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\r\n}\r\n\r\nNode.js v22.5.1\r\n```\r\n\r\nDoesn't really give away much.  It turned out however that the root caused we missed a return type on a promise `eg Promise` needed to be `Promise<void>`.  This error was visible if you did a `tsc`, but `ts-node` was giving this output.\r\n\r\nAfter gradually chipping away at the code to make a minimal example; i managed to reproduce it with a really simple bit of code that doesn't even technically have an error in it.\r\n\r\nAssuming your code is in `./lib`, create `./lib/index.ts`:\r\n```\r\nimport { SomeServer } from './server.js'\r\n\r\nconst webServer = new SomeServer()\r\n```\r\n\r\nand `./lib/server.ts`:\r\n```\r\nexport class SomeServer {}\r\n```\r\n\r\nIf you try and start this; you'll get the error.  The only thing \"wrong\" with this code is the fact that `webServer` is an unused variable.  If i add `console.log(webServer)`, eg:\r\n\r\n```\r\nimport { SomeServer } from './server.js'\r\n\r\nconst webServer = new SomeServer()\r\nconsole.log(webServer)\r\n```\r\n\r\nThen all is well:\r\n\r\n```\r\n❯ node --experimental-specifier-resolution=node --loader ts-node/esm lib/index.ts\r\n\r\nSomeServer {}\r\n```\r\n\r\n### Specifications\r\n\r\n* versions:\r\n```\r\n❯ ./node_modules/.bin/ts-node -vv\r\nts-node v10.9.2\r\nnode v22.5.1\r\ncompiler v5.3.3\r\n```\r\n\r\n* tsconfig.json:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"lib\": [\"ES2022\", \"DOM\"],\r\n    \"module\": \"ES2022\",\r\n    \"target\": \"ES2022\",\r\n    \"rootDir\": \"./\",\r\n    \"outDir\": \"./built\",\r\n    \"baseUrl\": \"./\",\r\n    \"allowJs\": false,\r\n    \"checkJs\": false,\r\n    \"alwaysStrict\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noImplicitThis\": true,\r\n    \"strictNullChecks\": true,\r\n    \"strictFunctionTypes\": true,\r\n    \"strictPropertyInitialization\": true,\r\n    \"noEmitOnError\": false,\r\n    \"sourceMap\": false,\r\n    \"declaration\": false,\r\n    \"strictBindCallApply\": true,\r\n    \"noImplicitOverride\": true,\r\n    \"noUncheckedIndexedAccess\": true,\r\n    \"incremental\": false,\r\n    \"skipDefaultLibCheck\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"esModuleInterop\": true,\r\n    \"moduleResolution\": \"node\",\r\n    \"emitDecoratorMetadata\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"noFallthroughCasesInSwitch\": true\r\n  },\r\n  \"include\": [\"lib/**/*.ts\", \"test/**/*.ts\"],\r\n  \"exclude\": [\"node_modules/**/*\"]\r\n}\r\n```\r\n\r\n* Operating system and version:  Mac\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2129/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2129/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2127",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2127/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2127/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2127/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2127",
        "id": 2410366785,
        "node_id": "I_kwDOAlTKGc6Pq0dB",
        "number": 2127,
        "title": "Using register() with typecheck: false still fails with a type error in test run",
        "user": {
          "login": "MerzDaniel",
          "id": 16895137,
          "node_id": "MDQ6VXNlcjE2ODk1MTM3",
          "avatar_url": "https://avatars.githubusercontent.com/u/16895137?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MerzDaniel",
          "html_url": "https://github.com/MerzDaniel",
          "followers_url": "https://api.github.com/users/MerzDaniel/followers",
          "following_url": "https://api.github.com/users/MerzDaniel/following{/other_user}",
          "gists_url": "https://api.github.com/users/MerzDaniel/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/MerzDaniel/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/MerzDaniel/subscriptions",
          "organizations_url": "https://api.github.com/users/MerzDaniel/orgs",
          "repos_url": "https://api.github.com/users/MerzDaniel/repos",
          "events_url": "https://api.github.com/users/MerzDaniel/events{/privacy}",
          "received_events_url": "https://api.github.com/users/MerzDaniel/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-07-16T06:57:17Z",
        "updated_at": "2024-07-16T06:57:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nregister\r\ntypecheck\r\ntest\r\n\r\n### Expected Behavior\r\n\r\nWhen using \r\n```\r\nconst { register } = require('ts-node')\r\nregister({ typeCheck: false })\r\n```\r\nin my `.mocharc.js` for my mocha test run\r\n\r\nI would expect that tests are run without typecheck. \r\n\r\n### Actual Behavior\r\n\r\nThe tests don't run, because ts-node early exits on a typecheck error.\r\n\r\nThis is really blocking the test-driven coding flow. I have a separate script for doing a typecheck&linting before committing changes. When I run tests, I only want to run tests without caring for types\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. Use \r\n```\r\n// .mocharc.js\r\nconst { register } = require('ts-node')\r\n\r\nregister({ typeCheck: false })\r\n\r\nmodule.exports = {\r\n  extensions: [\r\n    'ts',\r\n  ],\r\n}\r\n```\r\n\r\n2. introduce a small typecheck error\r\n3. run the tests\r\n\r\n### Specifications\r\n```\r\nts-node v10.9.2\r\nnode v20.8.1\r\ncompiler v5.4.4\r\n```\r\n\r\n* Operating system and version:\r\n* Manjaro Linux (rolling release)\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2127/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2127/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2126",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2126/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2126/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2126/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2126",
        "id": 2404652001,
        "node_id": "I_kwDOAlTKGc6PVBPh",
        "number": 2126,
        "title": "Gulp: ERR_UNKNOWN_FILE_EXTENSION",
        "user": {
          "login": "binarykitchen",
          "id": 177641,
          "node_id": "MDQ6VXNlcjE3NzY0MQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/177641?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/binarykitchen",
          "html_url": "https://github.com/binarykitchen",
          "followers_url": "https://api.github.com/users/binarykitchen/followers",
          "following_url": "https://api.github.com/users/binarykitchen/following{/other_user}",
          "gists_url": "https://api.github.com/users/binarykitchen/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/binarykitchen/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/binarykitchen/subscriptions",
          "organizations_url": "https://api.github.com/users/binarykitchen/orgs",
          "repos_url": "https://api.github.com/users/binarykitchen/repos",
          "events_url": "https://api.github.com/users/binarykitchen/events{/privacy}",
          "received_events_url": "https://api.github.com/users/binarykitchen/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2024-07-12T04:04:32Z",
        "updated_at": "2024-07-19T02:00:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Unable to run gulp command when gulpfile.ts is in TypeScript\r\n\r\n### Expected Behaviour\r\n```\r\nnpx gulp\r\n```\r\n\r\nShould build. Pass.\r\n\r\n\r\n### Actual Behaviour\r\n```\r\n/home/michael-heuberger/code/binarykitchen/videomail.io ❯❯❯ npx gulp                                                                                feature/typescript ✭ ✱\r\n[15:57:06] Loaded external module: ts-node/register\r\nTypeError: Unknown file extension \".ts\" for /home/michael-heuberger/code/binarykitchen/videomail.io/gulpfile.ts\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:160:9)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:203:36)\r\n    at defaultLoad (node:internal/modules/esm/load:143:22)\r\n    at async ModuleLoader.load (node:internal/modules/esm/loader:403:7)\r\n    at async ModuleLoader.moduleProvider (node:internal/modules/esm/loader:285:45)\r\n    at async link (node:internal/modules/esm/module_job:78:21) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n\r\nGulp's official documentation says it should work, see:\r\nhttps://gulpjs.com/docs/en/getting-started/javascript-and-gulpfiles/\r\n\r\nLikewise, your documentation says the same:\r\nhttps://github.com/TypeStrong/ts-node/blob/main/website/docs/recipes/gulp.md?plain=1\r\n\r\n### Specifications\r\n\r\n* ts-node version: `v10.9.2`\r\n* node version: `v20.12.2`\r\n* TypeScript version: `5.5.3`\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"include\": [\r\n    \"etc\",\r\n    \"src\",\r\n    \"test\",\r\n    \"gulpfile.ts\",\r\n    \".eslintrc.js\",\r\n    \"prettier.config.js\",\r\n    \"babel.config.js\"\r\n  ],\r\n  \"compilerOptions\": {\r\n    // Required\r\n    \"target\": \"esnext\",\r\n    \"module\": \"CommonJS\",\r\n\r\n    \"noEmit\": true,\r\n    \"allowImportingTsExtensions\": true,\r\n    \"allowArbitraryExtensions\": true,\r\n    \"isolatedModules\": true,\r\n    \"esModuleInterop\": true,\r\n\r\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\r\n\r\n    \"skipLibCheck\": true,\r\n    \"strict\": true,\r\n    \"allowJs\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"allowUnusedLabels\": false,\r\n    \"allowUnreachableCode\": false,\r\n    \"exactOptionalPropertyTypes\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noImplicitOverride\": true,\r\n    \"noImplicitReturns\": true,\r\n    \"noUncheckedIndexedAccess\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noEmitOnError\": true,\r\n    \"stripInternal\": true,\r\n\r\n    \"resolveJsonModule\": true,\r\n\r\n    // TODO remove these exceptions and fix more errors one day\r\n    \"noImplicitAny\": false\r\n  }\r\n}\r\n\r\n```\r\n\r\n* Operating system and version: Arch Linux\r\n\r\nI've tried many different configurations and combinations. All my attempts failed. No idea why it says `.ts` is an unknown extension?",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2126/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2126/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2125",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2125/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2125/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2125/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2125",
        "id": 2365561024,
        "node_id": "I_kwDOAlTKGc6M_5jA",
        "number": 2125,
        "title": "Debugging + cluster.fork in vscode results in an error Unknown or unexpected option:--inspect-port",
        "user": {
          "login": "KingLiLi",
          "id": 26641621,
          "node_id": "MDQ6VXNlcjI2NjQxNjIx",
          "avatar_url": "https://avatars.githubusercontent.com/u/26641621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/KingLiLi",
          "html_url": "https://github.com/KingLiLi",
          "followers_url": "https://api.github.com/users/KingLiLi/followers",
          "following_url": "https://api.github.com/users/KingLiLi/following{/other_user}",
          "gists_url": "https://api.github.com/users/KingLiLi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/KingLiLi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/KingLiLi/subscriptions",
          "organizations_url": "https://api.github.com/users/KingLiLi/orgs",
          "repos_url": "https://api.github.com/users/KingLiLi/repos",
          "events_url": "https://api.github.com/users/KingLiLi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/KingLiLi/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2024-06-21T02:15:09Z",
        "updated_at": "2024-09-05T01:09:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "file:app.ts\r\ncode:\r\nif (cluster.isPrimary) {\r\n  cluster.fork()\r\n}else{\r\n  console.log(\"start\")\r\n}\r\n\r\nThe above code is run with the command: node-ts app.ts. It works well.\r\nBut if you debug it through vscode and start it with cluster.fork(). node-ts will report an error:\r\nUnknown or unexpected option:--inspect-port\r\n\r\nI tried to modify the source code: \\node_modules\\ts-node\\node_modules\\arg\\index.js\r\nAdd continue on line 87;\r\nDelete: const err = new Error(' Unknown or unexpected option: ${originalArgName} ');\r\n\r\nThe program can run normally.\r\n\r\nI think this problem needs to be fixed. Because node-ts can run in a variety of programs. Then other programs may have additional options that we have no control over.\r\nI want to add an option: Turn on the option to ignore unknown items\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2125/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2125/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2124",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2124/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2124/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2124/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2124",
        "id": 2358904355,
        "node_id": "I_kwDOAlTKGc6MmgYj",
        "number": 2124,
        "title": "Transpile-only doesn't work without tsconfig.json",
        "user": {
          "login": "vsDizzy",
          "id": 5798340,
          "node_id": "MDQ6VXNlcjU3OTgzNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5798340?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vsDizzy",
          "html_url": "https://github.com/vsDizzy",
          "followers_url": "https://api.github.com/users/vsDizzy/followers",
          "following_url": "https://api.github.com/users/vsDizzy/following{/other_user}",
          "gists_url": "https://api.github.com/users/vsDizzy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vsDizzy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vsDizzy/subscriptions",
          "organizations_url": "https://api.github.com/users/vsDizzy/orgs",
          "repos_url": "https://api.github.com/users/vsDizzy/repos",
          "events_url": "https://api.github.com/users/vsDizzy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vsDizzy/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-06-18T05:01:37Z",
        "updated_at": "2024-06-18T05:02:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\ntranspile-only tsconfig.json TS5109\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nNo error\r\n\r\n### Actual Behavior\r\n\r\nTSError: ⨯ Unable to compile TypeScript:\r\nerror TS5109: Option 'moduleResolution' must be set to 'NodeNext' (or left unspecified) when option 'module' is set to 'NodeNext'.\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. create stub src/app.ts\r\n2. `node -r ts-node/register src/app.ts` - ok\r\n3. `node -r ts-node/register/transpile-only src/app.ts` - error TS5109\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/vsDizzy/ts-node-app\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.2\r\n* node version: v22.3.0\r\n* TypeScript version: v5.4.5\r\n* tsconfig.json, if you're using one:\r\n```\r\nN/A\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"dependencies\": {\r\n    \"ts-node\": \"^10.9.2\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: Win11\r\n* If Windows, are you using WSL or WSL2?: No\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2124/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2124/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2123",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2123/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2123/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2123/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2123",
        "id": 2351259485,
        "node_id": "I_kwDOAlTKGc6MJV9d",
        "number": 2123,
        "title": "ERR_REQUIRE_ESM: Require of ES Module in CommonJS Context (ts-node, svgdom)",
        "user": {
          "login": "famhy",
          "id": 28225967,
          "node_id": "MDQ6VXNlcjI4MjI1OTY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/28225967?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/famhy",
          "html_url": "https://github.com/famhy",
          "followers_url": "https://api.github.com/users/famhy/followers",
          "following_url": "https://api.github.com/users/famhy/following{/other_user}",
          "gists_url": "https://api.github.com/users/famhy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/famhy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/famhy/subscriptions",
          "organizations_url": "https://api.github.com/users/famhy/orgs",
          "repos_url": "https://api.github.com/users/famhy/repos",
          "events_url": "https://api.github.com/users/famhy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/famhy/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-06-13T14:09:20Z",
        "updated_at": "2024-06-13T14:09:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### ERR_REQUIRE_ESM: require() of ES Module\r\nI'm encountering the error \"ERR_REQUIRE_ESM: require() of ES Module ...\" whenever I install a new package or update an @types version. The specific module causing the issue seems to be Error [ERR_REQUIRE_ESM]\r\n\r\neven when delete svgdom i get the same error in other package .\r\n\r\n```\r\nC:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\node_modules\\ts-node\\dist\\index.js:851\r\n            return old(m, filename);\r\n                   ^\r\nError [ERR_REQUIRE_ESM]: require() of ES Module C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\node_modules\\svgdom\\main-module.js from C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\src\\controllers\\dashboard\\shop.ts not supported.\r\nInstead change the require of main-module.js in C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\src\\controllers\\dashboard\\shop.ts to a dynamic import() which is available in all CommonJS modules.\r\n    at require.extensions.<computed> [as .js] (C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\node_modules\\ts-node\\dist\\index.js:851:20)\r\n    at Object.<anonymous> (C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\src\\controllers\\dashboard\\shop.ts:19:18)\r\n    at m._compile (C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\node_modules\\ts-node\\dist\\index.js:857:29) {\r\n  code: 'ERR_REQUIRE_ESM'\r\n}\r\n```\r\n* tsconfig.json:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es6\",\r\n    \"module\": \"commonjs\",\r\n    \"moduleResolution\": \"node\",\r\n    \"outDir\": \"./dist\",\r\n    \"rootDir\": \"./src\",\r\n    \"strict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n\r\n```\r\n* Package.json\r\n```\r\n \"devDependencies\": {\r\n    \"@types/formidable\": \"^3.4.5\",\r\n    \"@types/jsonwebtoken\": \"^9.0.6\",\r\n    \"@types/multer\": \"^1.4.11\",\r\n    \"@types/node\": \"^20.14.2\",\r\n    \"@types/svgdom\": \"^0.1.2\",\r\n    \"@types/ws\": \"^8.5.10\",\r\n    \"nodemon\": \"^3.1.3\",\r\n    \"prisma\": \"^5.15.0\",\r\n    \"ts-node\": \"^10.9.2\",\r\n    \"tslib\": \"^2.6.3\",\r\n    \"typescript\": \"^5.4.5\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@types/cors\": \"^2.8.17\",\r\n    \"@types/express\": \"^4.17.21\",\r\n    \"@types/html-pdf-node\": \"^1.0.2\",\r\n    \"@types/morgan\": \"^1.9.9\",\r\n    \"@types/node-cron\": \"^3.0.11\",\r\n    \"@types/nodemailer\": \"^6.4.15\",\r\n    \"@types/qr-image\": \"^3.2.9\"\r\n  }\r\n}\r\n```\r\n\r\n* I make search and i try to chenge tsconfig i change the module from form **comonjs** to **esnext**\r\n\r\n* tsconfig.json (new)\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES2020\",\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"outDir\": \"./dist\",\r\n    \"rootDir\": \"./src\",\r\n    \"strict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true,\r\n \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\r\n\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n\r\n```\r\nbut when i change the module i get new error : \r\n\r\n```\r\nDebugger attached.\r\nTypeError: Unknown file extension \".ts\" for C:\\Users\\PC\\Documents\\Giftyshop\\back_giftyshop\\src\\main.ts\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:160:9)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:203:36)\r\n    at defaultLoad (node:internal/modules/esm/load:143:22)\r\n    at async ModuleLoader.load (node:internal/modules/esm/loader:403:7)\r\n    at async ModuleLoader.moduleProvider (node:internal/modules/esm/loader:285:45)\r\n    at async link (node:internal/modules/esm/module_job:78:21) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n**i seem to be not logic for me cause i tryed all the solutions in internet but i steal butween those two error .\r\n\r\nso if there is any solution or something that i did wrong please help me to find it out .**\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2123/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2123/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2122",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2122/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2122/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2122/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2122",
        "id": 2348436777,
        "node_id": "I_kwDOAlTKGc6L-k0p",
        "number": 2122,
        "title": "TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" ",
        "user": {
          "login": "luyifo",
          "id": 160839448,
          "node_id": "U_kgDOCZY3GA",
          "avatar_url": "https://avatars.githubusercontent.com/u/160839448?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/luyifo",
          "html_url": "https://github.com/luyifo",
          "followers_url": "https://api.github.com/users/luyifo/followers",
          "following_url": "https://api.github.com/users/luyifo/following{/other_user}",
          "gists_url": "https://api.github.com/users/luyifo/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/luyifo/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/luyifo/subscriptions",
          "organizations_url": "https://api.github.com/users/luyifo/orgs",
          "repos_url": "https://api.github.com/users/luyifo/repos",
          "events_url": "https://api.github.com/users/luyifo/events{/privacy}",
          "received_events_url": "https://api.github.com/users/luyifo/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2024-06-12T10:43:46Z",
        "updated_at": "2024-09-14T05:11:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nWhen the node version is 18.20.0, running TS-node --esm **.ts displays TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\". Runs successfully after the Node version is reduced to 16.20.2.\r\n```bash\r\nPS D:\\Testspace\\ts-node-demo> pn dev\r\n\r\n> ts-node-demo@1.0.0 dev D:\\Testspace\\ts-node-demo\r\n> ts-node-esm src/index.ts\r\n\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for D:\\Testspace\\ts-node-demo\\src\\index.ts\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:136:11)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:182:36)\r\n    at defaultLoad (node:internal/modules/esm/load:101:20)\r\n    at nextLoad (node:internal/modules/esm/hooks:864:28)\r\n    at load (D:\\Testspace\\ts-node-demo\\node_modules\\.pnpm\\ts-node@10.9.2_@types+node@20.14.2_typescript@5.4.5\\node_modules\\ts-node\\dist\\child\\child-loader.js:19:122)\r\n    at nextLoad (node:internal/modules/esm/hooks:864:28)\r\n    at Hooks.load (node:internal/modules/esm/hooks:447:26)\r\n    at MessagePort.handleMessage (node:internal/modules/esm/worker:196:24)\r\n    at [nodejs.internal.kHybridDispatch] (node:internal/event_target:786:20) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n ELIFECYCLE  Command failed with exit code 1.\r\nPS D:\\Testspace\\ts-node-demo> nvm list\r\n\r\n  * 18.20.0 (Currently using 64-bit executable)\r\n    16.20.2\r\nPS D:\\Testspace\\ts-node-demo> nvm use 16.20.2\r\nNow using node v16.20.2 (64-bit)\r\nPS D:\\Testspace\\ts-node-demo> pn dev\r\n\r\n> ts-node-demo@1.0.0 dev D:\\Testspace\\ts-node-demo\r\n> ts-node-esm src/index.ts\r\n\r\nhello world\r\nPS D:\\Testspace\\ts-node-demo> \r\n```\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\n\r\n\r\n### Actual Behavior\r\n\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version:  10.9.2\r\n* node version: 18.20.0\r\n* TypeScript version:  5.4.5\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"rootDir\": \"./src\",\r\n    \"target\": \"es2016\", \r\n    \"module\": \"NodeNext\", \r\n    \"moduleResolution\": \"NodeNext\",\r\n    \"esModuleInterop\": true, \r\n    \"forceConsistentCasingInFileNames\": true, \r\n    \"strict\": true, \r\n    \"skipLibCheck\": true, \r\n    \"verbatimModuleSyntax\": true,\r\n    \"declaration\": true,\r\n    \"declarationMap\": true,\r\n    \"sourceMap\": true\r\n  }\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"type\": \"module\",\r\n  \"name\": \"ts-node-demo\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"dev\": \"ts-node-esm src/index.ts\",\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"ts-node\": \"^10.9.2\",\r\n    \"typescript\": \"^5.4.5\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: Windows 11  Pro 10.0.22631 Build 22631\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2122/reactions",
          "total_count": 17,
          "+1": 15,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 2
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2122/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2121",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2121/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2121/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2121/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2121",
        "id": 2332032312,
        "node_id": "I_kwDOAlTKGc6K__04",
        "number": 2121,
        "title": "Compile not outputing expected format",
        "user": {
          "login": "nonara",
          "id": 1427565,
          "node_id": "MDQ6VXNlcjE0Mjc1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1427565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/nonara",
          "html_url": "https://github.com/nonara",
          "followers_url": "https://api.github.com/users/nonara/followers",
          "following_url": "https://api.github.com/users/nonara/following{/other_user}",
          "gists_url": "https://api.github.com/users/nonara/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/nonara/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/nonara/subscriptions",
          "organizations_url": "https://api.github.com/users/nonara/orgs",
          "repos_url": "https://api.github.com/users/nonara/repos",
          "events_url": "https://api.github.com/users/nonara/events{/privacy}",
          "received_events_url": "https://api.github.com/users/nonara/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-06-03T20:52:40Z",
        "updated_at": "2024-06-03T20:52:40Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "Hey Andrew (@cspotcode)! Hope you're doing well.\r\n\r\nI wanted to drop a quick heads up here on a potential issue. I'm not entirely sure if this is unexpected behaviour, so I'll just give the highlights and if it sounds like something is up, I can rewrite this with proper bug-report format & make a repro.\r\n\r\n## Backstory\r\n\r\nWe needed to make some changes to [ts-patch](https://github.com/nonara/ts-patch) to support the forthcoming typescript 5.5 release. They're doing some pretty interesting things to be able to support ESM. Not sure exactly what the status is on that as yet, but I know a lot of ground work has been laid.\r\n\r\nAfter completing the changes, I ran into something that looks like it may be an issue on ts-node side, but again, I'm not certain.\r\n\r\n## Issue\r\n\r\nWe have been using ts-node to pre-compile typescript ESM transformers to JS, so we can use the [esm](https://github.com/standard-things/esm) library to require them. We did this via `tsNodeInstance.compile(code, filePath)`.\r\n\r\nThis still works if I give it a file whose path is explicitly \".mts\", but **if it's \".ts\", it seems to compile as cjs code**.\r\n\r\n## Workaround & Other Details\r\n\r\nI've confirmed and the config + compiler options specify both module and target as `ESNext`\r\n\r\nAs a workaround, I made it change the provided path to explicitly be \"mts\". \r\n\r\nYou can see the workaround here:\r\n\r\nhttps://github.com/nonara/ts-patch/blob/master/projects/patch/src/plugin/esm-intercept.ts#L87-L94\r\n\r\nHere is where we specify tsConfig:\r\n\r\nhttps://github.com/nonara/ts-patch/blob/master/projects/patch/src/plugin/register-plugin.ts#L111-L120\r\n\r\nI've confirmed it does register with those options via debugger.\r\n\r\nIf I'm just missing something, feel free to let me know! Otherwise, if you'd like to check into it, let me know, and I can make you a repro.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2121/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2121/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2119",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2119/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2119/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2119/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2119",
        "id": 2316866252,
        "node_id": "I_kwDOAlTKGc6KGJLM",
        "number": 2119,
        "title": "Last release was 6 months ago... is the project dead?",
        "user": {
          "login": "devlato",
          "id": 1210210,
          "node_id": "MDQ6VXNlcjEyMTAyMTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1210210?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/devlato",
          "html_url": "https://github.com/devlato",
          "followers_url": "https://api.github.com/users/devlato/followers",
          "following_url": "https://api.github.com/users/devlato/following{/other_user}",
          "gists_url": "https://api.github.com/users/devlato/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/devlato/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/devlato/subscriptions",
          "organizations_url": "https://api.github.com/users/devlato/orgs",
          "repos_url": "https://api.github.com/users/devlato/repos",
          "events_url": "https://api.github.com/users/devlato/events{/privacy}",
          "received_events_url": "https://api.github.com/users/devlato/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2024-05-25T09:19:35Z",
        "updated_at": "2024-08-25T17:23:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Last release was 6 months ago... is the project dead?",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2119/reactions",
          "total_count": 39,
          "+1": 31,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 8
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2119/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2117",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2117/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2117/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2117/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2117",
        "id": 2278328230,
        "node_id": "I_kwDOAlTKGc6HzIem",
        "number": 2117,
        "title": "Setting emitAssertForImportAttributes no longer works in Node.js 22 with latest swc",
        "user": {
          "login": "KidkArolis",
          "id": 324440,
          "node_id": "MDQ6VXNlcjMyNDQ0MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/324440?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/KidkArolis",
          "html_url": "https://github.com/KidkArolis",
          "followers_url": "https://api.github.com/users/KidkArolis/followers",
          "following_url": "https://api.github.com/users/KidkArolis/following{/other_user}",
          "gists_url": "https://api.github.com/users/KidkArolis/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/KidkArolis/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/KidkArolis/subscriptions",
          "organizations_url": "https://api.github.com/users/KidkArolis/orgs",
          "repos_url": "https://api.github.com/users/KidkArolis/repos",
          "events_url": "https://api.github.com/users/KidkArolis/events{/privacy}",
          "received_events_url": "https://api.github.com/users/KidkArolis/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2024-05-03T19:51:36Z",
        "updated_at": "2024-07-30T15:56:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Expected Behavior\r\n\r\nRunning this with ts-node should work when `swc: true` is set:\r\n\r\n```js\r\nimport pkg from './package.json' with { type: 'json' }\r\nconsole.log(pkg)\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```\r\nimport pkg from './package.json' assert {\r\n                                 ^^^^^^\r\n\r\nSyntaxError: Unexpected identifier 'assert'\r\n```\r\n\r\n\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.2\r\n* node version: 22.1.0\r\n* TypeScript version: 5.3.3\r\n* @swc/core 1.4.17\r\n\r\n\r\n## Note\r\n\r\nNode.js 22 removed import asserts and now only has import attributes. Setting `emitAssertForImportAttributes` to false in `dist/transpilers/swc.js` fixes the issue, but ofc, this would break the existing users, so not sure how to approach this!? A config option..? A breaking change?",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2117/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2117/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2116",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2116/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2116/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2116/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2116",
        "id": 2273442279,
        "node_id": "I_kwDOAlTKGc6Hgfnn",
        "number": 2116,
        "title": "[DEP0180] DeprecationWarning: fs.Stats constructor is deprecated when using node 22",
        "user": {
          "login": "darcyrush",
          "id": 22768040,
          "node_id": "MDQ6VXNlcjIyNzY4MDQw",
          "avatar_url": "https://avatars.githubusercontent.com/u/22768040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darcyrush",
          "html_url": "https://github.com/darcyrush",
          "followers_url": "https://api.github.com/users/darcyrush/followers",
          "following_url": "https://api.github.com/users/darcyrush/following{/other_user}",
          "gists_url": "https://api.github.com/users/darcyrush/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/darcyrush/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/darcyrush/subscriptions",
          "organizations_url": "https://api.github.com/users/darcyrush/orgs",
          "repos_url": "https://api.github.com/users/darcyrush/repos",
          "events_url": "https://api.github.com/users/darcyrush/events{/privacy}",
          "received_events_url": "https://api.github.com/users/darcyrush/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2024-05-01T12:40:04Z",
        "updated_at": "2024-09-06T15:37:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nDeprecationWarning: fs.Stats \r\n\r\n### Steps to reproduce the problem\r\n\r\nWarning only appears in node 22, node 21 is fine.\r\n\r\n```\r\n(node:4075381) [DEP0180] DeprecationWarning: fs.Stats constructor is deprecated.\r\n    at Object.createResolve (/.../node_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:146:25)\r\n    at /.../node_modules/ts-node/src/index.ts:1494:7\r\n    at Object.onceFn [as getNodeEsmResolver] (/.../node_modules/ts-node/src/util.ts:166:13)\r\n    at createEsmHooks (/.../node_modules/ts-node/src/esm.ts:125:51)\r\n    at Object.registerAndCreateEsmHooks (/.../node_modules/ts-node/src/esm.ts:118:10)\r\n    at file:///.../node_modules/ts-node/esm.mjs:8:7\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:235:25)\r\n    at async ModuleLoader.import (node:internal/modules/esm/loader:461:24)\r\n    at async Hooks.register (node:internal/modules/esm/hooks:150:26)\r\n    at async MessagePort.handleMessage (node:internal/modules/esm/worker:199:18)\r\n```\r\nThe line of code in question;\r\n```\r\nconst statsIfNotFound = new Stats();\r\n```\r\n\r\n### Minimal reproduction\r\n```\r\nnode --trace-deprecation --import ./ts-node.register.mjs path/to/any/file.ts\r\n```\r\nWith `ts-node.register.mjs` containing the lines of code suggested [here](https://github.com/TypeStrong/ts-node/issues/2100#issuecomment-2039564225).\r\n\r\n\r\n### Specifications\r\n* ts-node version: 10.9.1\r\n* node version: v22.0.0\r\n* TypeScript version: 5.4.5\r\n* Operating system and version: Ubuntu 22.04 LTS, 5.15.0-105-generic x86_64\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2116/reactions",
          "total_count": 126,
          "+1": 116,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 10,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2116/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2112",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2112/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2112/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2112/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2112",
        "id": 2193363385,
        "node_id": "I_kwDOAlTKGc6CvBG5",
        "number": 2112,
        "title": "ts-node doesn't resolve extended tsconfigs if they originate from the export fields of packages",
        "user": {
          "login": "ItamarGronich",
          "id": 14963977,
          "node_id": "MDQ6VXNlcjE0OTYzOTc3",
          "avatar_url": "https://avatars.githubusercontent.com/u/14963977?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ItamarGronich",
          "html_url": "https://github.com/ItamarGronich",
          "followers_url": "https://api.github.com/users/ItamarGronich/followers",
          "following_url": "https://api.github.com/users/ItamarGronich/following{/other_user}",
          "gists_url": "https://api.github.com/users/ItamarGronich/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ItamarGronich/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ItamarGronich/subscriptions",
          "organizations_url": "https://api.github.com/users/ItamarGronich/orgs",
          "repos_url": "https://api.github.com/users/ItamarGronich/repos",
          "events_url": "https://api.github.com/users/ItamarGronich/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ItamarGronich/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-03-18T21:28:03Z",
        "updated_at": "2024-03-18T21:28:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nexports, package.json, tsconfig, extends, base config\r\n\r\n\r\n### Description\r\nWhile tsc works and resolves the config files from the exports fields of the packages, ts-node fails.\r\n\r\n### Expected Behavior\r\nts-node finds and reads extended configs from an external package when they're defined in the `packageJson.exports` field.\r\n\r\n\r\n\r\n### Actual Behavior\r\nts-node fails to parse the config and exits with an error.\r\n\r\n## Minimal reproduction\r\nRepro: https://github.com/TypeStrong/ts-node-repros/pull/39\r\n\r\nThis setup includes two packages `@tsnode-exports/main` a regular package and  a `@tsnode-exports/ts-config` holding just the base tsconfig file.\r\n\r\nin package `ts-config` the tsconfig file is in some internal folder and is exposed via the `package.json` field: `exports`\r\n\r\nIn package `main` we have a tsconfig with an `extends` that points to that tsconfig in the `ts-config` package.\r\n\r\n### Steps to reproduce the problem\r\n1. clone and checkout branch\r\n2. make sure you got the right node version (`v20.11.0`)\r\n2. run `npm ci`\r\n3. See how `tsc` builds successfully by running `npm run tsc`\r\n4. See how `ts-node` fails to build by running `npm run ts-node`\r\n\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.2\r\n* node version: v20.11.0\r\n* TypeScript version: v5.4.2\r\n* tsconfig.json, if you're using one: (in repro)\r\n* package.json: in repro\r\n* Operating system and version: MacOS Sonoma 14.3.1\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2112/reactions",
          "total_count": 6,
          "+1": 6,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2112/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2111",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2111/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2111/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2111/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2111",
        "id": 2177517038,
        "node_id": "I_kwDOAlTKGc6BykXu",
        "number": 2111,
        "title": "Cryptic error on invalid tsconfig.json, e.g. if attempting to extend nonexistent tsconfig file",
        "user": {
          "login": "dandv",
          "id": 33569,
          "node_id": "MDQ6VXNlcjMzNTY5",
          "avatar_url": "https://avatars.githubusercontent.com/u/33569?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dandv",
          "html_url": "https://github.com/dandv",
          "followers_url": "https://api.github.com/users/dandv/followers",
          "following_url": "https://api.github.com/users/dandv/following{/other_user}",
          "gists_url": "https://api.github.com/users/dandv/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/dandv/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/dandv/subscriptions",
          "organizations_url": "https://api.github.com/users/dandv/orgs",
          "repos_url": "https://api.github.com/users/dandv/repos",
          "events_url": "https://api.github.com/users/dandv/events{/privacy}",
          "received_events_url": "https://api.github.com/users/dandv/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2024-03-10T04:18:42Z",
        "updated_at": "2024-09-17T12:34:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nFunction: [nodejs.util.inspect.custom]\r\n\r\n### Expected Behavior\r\n\r\nThis bug arose after I renamed a base tsconfig-base.json file, and the `tsconfig.json` in my monorepo subdir was doing an `\"extends\": \"../tsconfig-base.json\"`. The `tsconfig.json` was syntactically valid, but `../tsconfig-base.json` was not found. Turns out that any error with `tsconfig.json` will produce the cryptic error below.\r\n\r\n### Actual Behavior\r\n\r\n```\r\n$ node --loader=ts-node/esm -e 'console.log(1)'\r\n\r\nnode:internal/process/esm_loader:40\r\n      internalBinding('errors').triggerUncaughtException(\r\n                                ^\r\n[Object: null prototype] {\r\n  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\r\n}\r\n\r\nNode.js v18.19.0\r\n```\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. Create an invalid `tsconfig.json`, e.g. `{ 1 }`\r\n2. Run `node --loader=ts-node/esm -e 'console.log(1)'`\r\n\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: 18.19.0\r\n* TypeScript version: 5.3.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{ 1 }\r\n```\r\n* package.json:\r\n```\r\n{ \"type\": \"module\" }\r\n```\r\n* Operating system and version: Fedora Linux 38\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2111/reactions",
          "total_count": 4,
          "+1": 4,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2111/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2110",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2110/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2110/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2110/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2110",
        "id": 2176243512,
        "node_id": "I_kwDOAlTKGc6Bttc4",
        "number": 2110,
        "title": "ts-node cannot run mixed ESM/CJS project",
        "user": {
          "login": "m-ronchi",
          "id": 35332423,
          "node_id": "MDQ6VXNlcjM1MzMyNDIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/35332423?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/m-ronchi",
          "html_url": "https://github.com/m-ronchi",
          "followers_url": "https://api.github.com/users/m-ronchi/followers",
          "following_url": "https://api.github.com/users/m-ronchi/following{/other_user}",
          "gists_url": "https://api.github.com/users/m-ronchi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/m-ronchi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/m-ronchi/subscriptions",
          "organizations_url": "https://api.github.com/users/m-ronchi/orgs",
          "repos_url": "https://api.github.com/users/m-ronchi/repos",
          "events_url": "https://api.github.com/users/m-ronchi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/m-ronchi/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2024-03-08T15:20:04Z",
        "updated_at": "2024-05-16T08:32:05Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nESM CJS mixed project\r\nSyntaxError: Named export not found. The requested module is a CommonJS module, which may not support all module.exports as named exports.\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nts-node works and prints `BAR`\r\n\r\n### Actual Behavior\r\n\r\n```sh\r\n$ npx tsc && node dist/test.mjs\r\nBAR\r\n```\r\n```sh\r\n$ npx ts-node --esm src/test.mts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".mts\" for /***/ts-node-bug/src/test.mts\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:160:9)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:203:36)\r\n    at defaultLoad (node:internal/modules/esm/load:143:22)\r\n    at async nextLoad (node:internal/modules/esm/hooks:865:22)\r\n    at async nextLoad (node:internal/modules/esm/hooks:865:22)\r\n    at async Hooks.load (node:internal/modules/esm/hooks:448:20)\r\n    at async MessagePort.handleMessage (node:internal/modules/esm/worker:196:18) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n```sh\r\n$ node --loader ts-node/esm src/test.mjs\r\n(node:65265) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:\r\n--import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));'\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\nfile:///****/ts-node-bug/src/test.mts:1\r\nimport { foo } from \"./lib.js\";\r\n         ^^^\r\nSyntaxError: Named export 'foo' not found. The requested module './lib.js' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from './lib.js';\r\nconst { foo } = pkg;\r\n\r\n    at ModuleJob._instantiate (node:internal/modules/esm/module_job:132:21)\r\n    at async ModuleJob.run (node:internal/modules/esm/module_job:214:5)\r\n    at async ModuleLoader.import (node:internal/modules/esm/loader:329:24)\r\n    at async loadESM (node:internal/process/esm_loader:28:7)\r\n    at async handleMainPromise (node:internal/modules/run_main:113:12)\r\n\r\nNode.js v20.11.1\r\n```\r\n```sh\r\n$ node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' src/test.mts                   cluster: prod\r\nfile:///***/ts-node-bug/src/test.mts:1\r\nimport { foo } from \"./lib.js\";\r\n         ^^^\r\nSyntaxError: Named export 'foo' not found. The requested module './lib.js' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from './lib.js';\r\nconst { foo } = pkg;\r\n\r\n    at ModuleJob._instantiate (node:internal/modules/esm/module_job:132:21)\r\n    at async ModuleJob.run (node:internal/modules/esm/module_job:214:5)\r\n    at async ModuleLoader.import (node:internal/modules/esm/loader:329:24)\r\n    at async loadESM (node:internal/process/esm_loader:28:7)\r\n    at async handleMainPromise (node:internal/modules/run_main:113:12)\r\n\r\nNode.js v20.11.1\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\nrun this:\r\n[ts-node-bug.zip](https://github.com/TypeStrong/ts-node/files/14539799/ts-node-bug.zip)\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\nlib.ts (inferred as CommonJS module)\r\n```\r\nexport const foo = \"BAR\"\r\n```\r\ntest.mts (ESM)\r\n```\r\nimport { foo } from \"./lib.js\";\r\n\r\nconsole.log(foo);\r\n```\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\nts-node v10.9.2\r\nnode v20.11.1\r\ncompiler v5.4.2\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"lib\": [ \"es2023\" ],\r\n    \"module\": \"node16\",\r\n    \"target\": \"es2022\",\r\n\r\n    \"strict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"moduleResolution\": \"node16\",\r\n    \"noEmit\": false,\r\n    \"outDir\": \"dist/\",\r\n    \"sourceMap\": true,\r\n    \"strictNullChecks\": true,\r\n  },\r\n  \"include\": [\r\n    \"src\"\r\n  ]\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"ts-node-bug\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^20.11.25\",\r\n    \"ts-node\": \"^10.9.2\"\r\n  }\r\n}\r\n\r\n```\r\n* Operating system and version: macos\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2110/reactions",
          "total_count": 4,
          "+1": 4,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2110/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2107",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2107/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2107/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2107/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2107",
        "id": 2144847120,
        "node_id": "I_kwDOAlTKGc5_18UQ",
        "number": 2107,
        "title": "calling `repl.start()` causes a doubling of stdin/stdout",
        "user": {
          "login": "natemwilson",
          "id": 10066574,
          "node_id": "MDQ6VXNlcjEwMDY2NTc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/10066574?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/natemwilson",
          "html_url": "https://github.com/natemwilson",
          "followers_url": "https://api.github.com/users/natemwilson/followers",
          "following_url": "https://api.github.com/users/natemwilson/following{/other_user}",
          "gists_url": "https://api.github.com/users/natemwilson/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/natemwilson/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/natemwilson/subscriptions",
          "organizations_url": "https://api.github.com/users/natemwilson/orgs",
          "repos_url": "https://api.github.com/users/natemwilson/repos",
          "events_url": "https://api.github.com/users/natemwilson/events{/privacy}",
          "received_events_url": "https://api.github.com/users/natemwilson/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-02-20T16:58:42Z",
        "updated_at": "2024-02-20T16:58:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n`repl`\r\n`repl.start()`\r\n`context`\r\n`double`\r\n`STDIN`\r\n`STDOUT`\r\n\r\n\r\n### Expected Behavior\r\n\r\nSTDOUT _is not_ double printed\r\n\r\n### Actual Behavior\r\n\r\nSTDOUT _is_ double printed\r\n\r\n### Steps to reproduce the problem\r\n\r\nI want a ts-node repl, with all its benefits, with context from my app attached, (note I would in reality attach an imported module, but here am just attaching a variable to illustrate my need minimally.) Since I want context attached to my repl, I am using the node built-in package, `repl`, like so:\r\n\r\n`example.ts`\r\n```ts\r\nimport repl from \"repl\";\r\n\r\nconst foo = \"bar\";\r\n\r\nconst replServer = repl.start();\r\n\r\nreplServer.context.foo = foo;\r\n```\r\n\r\n\r\nMaybe this is not best practice, if so, please advise.\r\n\r\n\r\nIf I try to run the script `example.ts` with ts-node, then type the six characters, <kbd>f</kbd>,<kbd>o</kbd>,<kbd>o</kbd>,<kbd>b</kbd>,<kbd>a</kbd>,<kbd>r</kbd>, I see the following output:\r\n\r\n```bash\r\n$ npx ts-node  -r ./example.ts\r\n> ffoobbaarr\r\n```\r\n\r\nSo the bug is that every input is doubled, as I would expect to only see `foobar`.\r\n\r\n\r\n\r\n\r\n### Minimal reproduction\r\nhttps://github.com/TypeStrong/ts-node-repros/pull/38\r\n\r\n### Specifications\r\n\r\n* ts-node version: v10.9.2\r\n* node version: v20.11.0\r\n* TypeScript version: v5.3.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"dependencies\": {\r\n    \"ts-node\": \"latest\",\r\n    \"typescript\": \"latest\"\r\n  }\r\n}\r\n\r\n```\r\n* Operating system and version:\r\nMac OSX 13.4\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2107/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2107/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2105",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2105/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2105/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2105/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2105",
        "id": 2116888493,
        "node_id": "I_kwDOAlTKGc5-LSet",
        "number": 2105,
        "title": "Can't use `--eval` with ESM",
        "user": {
          "login": "STRd6",
          "id": 18894,
          "node_id": "MDQ6VXNlcjE4ODk0",
          "avatar_url": "https://avatars.githubusercontent.com/u/18894?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/STRd6",
          "html_url": "https://github.com/STRd6",
          "followers_url": "https://api.github.com/users/STRd6/followers",
          "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
          "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
          "organizations_url": "https://api.github.com/users/STRd6/orgs",
          "repos_url": "https://api.github.com/users/STRd6/repos",
          "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
          "received_events_url": "https://api.github.com/users/STRd6/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2024-02-04T05:08:50Z",
        "updated_at": "2024-02-04T05:10:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\ninput-type=module\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\n```bash\r\nts-node -e \"import 'package.json'\"\r\n```\r\n\r\nimport statements should work from CLI.\r\n\r\n### Actual Behavior\r\n\r\n```\r\nnode:internal/errors:490\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nError [ERR_INPUT_TYPE_NOT_ALLOWED]: --input-type can only be used with string input via --eval, --print, or STDIN\r\n    at new NodeError (node:internal/errors:399:5)\r\n    at defaultResolve (node:internal/modules/esm/resolve:1052:25)\r\n    at nextResolve (node:internal/modules/esm/loader:163:28)\r\n    at resolve (/home/daniel/.nvm/versions/node/v19.7.0/lib/node_modules/ts-node/dist/child/child-loader.js:15:125)\r\n    at nextResolve (node:internal/modules/esm/loader:163:28)\r\n    at ESMLoader.resolve (node:internal/modules/esm/loader:835:30)\r\n    at ESMLoader.getModuleJob (node:internal/modules/esm/loader:416:18)\r\n    at ESMLoader.import (node:internal/modules/esm/loader:517:22)\r\n    at node:internal/modules/run_main:56:28\r\n    at loadESM (node:internal/process/esm_loader:94:11) {\r\n  code: 'ERR_INPUT_TYPE_NOT_ALLOWED'\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\n```bash\r\nts-node -e \"import 'package.json'\"\r\n```\r\n\r\nTrying with `input-type=module` also does not work. It is not recognized as an option to ts-node.\r\n\r\nhttps://nodejs.org/api/cli.html#--input-typetype\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\nts-node v10.9.2\r\nnode v19.7.0\r\ncompiler v5.3.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"strict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"resolveJsonModule\": true,\r\n  },\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n  }\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"type\": \"module\"\r\n}\r\n```\r\n* Operating system and version: Linux 5.10.16.3-microsoft-standard-WSL2 x86_64 x86_64 x86_64 GNU/Linux\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2105/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2105/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2103",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2103/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2103/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2103/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2103",
        "id": 2083856436,
        "node_id": "I_kwDOAlTKGc58NSA0",
        "number": 2103,
        "title": "\"Cannot find package\" when running mocha and importing between packages in monorepo",
        "user": {
          "login": "alicegherbison",
          "id": 14370434,
          "node_id": "MDQ6VXNlcjE0MzcwNDM0",
          "avatar_url": "https://avatars.githubusercontent.com/u/14370434?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alicegherbison",
          "html_url": "https://github.com/alicegherbison",
          "followers_url": "https://api.github.com/users/alicegherbison/followers",
          "following_url": "https://api.github.com/users/alicegherbison/following{/other_user}",
          "gists_url": "https://api.github.com/users/alicegherbison/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alicegherbison/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alicegherbison/subscriptions",
          "organizations_url": "https://api.github.com/users/alicegherbison/orgs",
          "repos_url": "https://api.github.com/users/alicegherbison/repos",
          "events_url": "https://api.github.com/users/alicegherbison/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alicegherbison/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2024-01-16T12:31:06Z",
        "updated_at": "2024-02-04T04:07:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nI think this is similar or related to https://github.com/TypeStrong/ts-node/issues/2031 and https://github.com/TypeStrong/ts-node/issues/2023 but not sure.\r\n\r\n### Expected Behavior\r\n\r\nWhen running mocha and pulling in modules from between packages they should resolve and be found when a test runs.\r\n\r\n### Actual Behavior\r\n\r\nWhen a test script runs a function that itself imports a variable (or anything) from a another package in the monorepo, the variable is not resolved.\r\n\r\n```\r\nError: Cannot find package 'packages' imported from C:\\Users\\AliceHerbison\\import-error\\packages\\extra1\\functions\\exampleFunction.ts\r\n    at packageResolve (C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:757:9)\r\n    at moduleResolve (C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:798:18)\r\n    at Object.defaultResolve (C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:912:11)\r\n    at C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\src\\esm.ts:218:35\r\n    at entrypointFallback (C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\src\\esm.ts:168:34)\r\n    at C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\src\\esm.ts:217:14\r\n    at addShortCircuitFlag (C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\src\\esm.ts:409:21)\r\n    at resolve (C:\\Users\\AliceHerbison\\import-error\\node_modules\\ts-node\\src\\esm.ts:197:12)\r\n    at nextResolve (node:internal/modules/esm/loader:163:28)\r\n    at ESMLoader.resolve (node:internal/modules/esm/loader:838:30)\r\n    at ESMLoader.getModuleJob (node:internal/modules/esm/loader:424:18)\r\n    at ModuleWrap.<anonymous> (node:internal/modules/esm/module_job:77:40)\r\n    at link (node:internal/modules/esm/module_job:76:36)\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\n```\r\nyarn\r\nyarn test\r\n```\r\n\r\n### Minimal reproduction\r\n\r\nThis is a minimal reproduction using the same setup and folder structure for our corporate monorepo. The example functions and tests are basic but illustrate exactly the same concept - https://github.com/alicegherbison/import-error\r\n\r\n### Specifications\r\n\r\n* ts-node version: ^10.9.2\r\n* node version: 18.16.1\r\n* TypeScript version: 5.3.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compileOnSave\": false,\r\n  \"compilerOptions\": {\r\n    \"allowJs\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"alwaysStrict\": true,\r\n    \"baseUrl\": \".\",\r\n    \"checkJs\": true,\r\n    \"declaration\": false,\r\n    \"esModuleInterop\": true,\r\n    \"importsNotUsedAsValues\": \"error\",\r\n    \"incremental\": true,\r\n    \"isolatedModules\": false,\r\n    \"jsx\": \"react-jsx\",\r\n    \"lib\": [\"dom\", \"dom.iterable\", \"ES2019\"],\r\n    \"module\": \"ES2020\",\r\n    \"moduleResolution\": \"node\",\r\n    \"noEmit\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noImplicitReturns\": false,\r\n    \"noImplicitThis\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"outDir\": \"dist\",\r\n    \"paths\": {\r\n      \"public\": [\"public/\"]\r\n    },\r\n    \"plugins\": [\r\n      {\r\n        \"name\": \"typescript-plugin-css-modules\",\r\n        \"options\": {\r\n          \"customMatcher\": \"\\\\.scss$\"\r\n        }\r\n      }\r\n    ],\r\n    \"pretty\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"skipLibCheck\": true,\r\n    \"sourceMap\": true,\r\n    \"strictNullChecks\": false,\r\n    \"target\": \"ES2019\",\r\n    \"rootDirs\": [\"packages\"]\r\n  },\r\n  \"include\": [\"packages/**/*\", \"./**/*.ts\", \"**/*.tsx\", \"**/*.mdx\"],\r\n  \"exclude\": [\"node_modules/\", \".yarn/\"],\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n    \"experimentalSpecifierResolution\": \"node\",\r\n    \"require\": [\"tsconfig-paths/register\", \"ts-node/register\"]\r\n  }\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"import-error\",\r\n  \"packageManager\": \"yarn@3.6.1\",\r\n  \"workspaces\": [\r\n    \"packages/*\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@mdx-js/loader\": \"^3.0.0\",\r\n    \"eslint-mdx\": \"^3.0.0\",\r\n    \"eslint-plugin-mdx\": \"^3.0.0\",\r\n    \"jsdom-global\": \"^3.0.2\",\r\n    \"react\": \"17.0.2\",\r\n    \"react-dom\": \"17.0.2\",\r\n    \"react-redux\": \"7.2.9\",\r\n    \"react-router\": \"6.20.1\",\r\n    \"react-router-dom\": \"6.20.1\",\r\n    \"react-router-hash-link\": \"^2.4.3\",\r\n    \"redux\": \"4.2.1\",\r\n    \"rehype-external-links\": \"2.0.1\",\r\n    \"rehype-react\": \"7.1.1\",\r\n    \"source-map-support\": \"^0.5.21\",\r\n    \"ts-node\": \"^10.9.2\",\r\n    \"tsconfig-paths\": \"^4.2.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@testing-library/react\": \"14.1.2\",\r\n    \"@types/chai\": \"4.3.11\",\r\n    \"@types/chai-dom\": \"1.11.3\",\r\n    \"@types/mocha\": \"10.0.6\",\r\n    \"@types/node\": \"20.10.4\",\r\n    \"@types/react\": \"17.0.71\",\r\n    \"@types/react-dom\": \"17.0.25\",\r\n    \"@types/react-router-dom\": \"5.3.3\",\r\n    \"@typescript-eslint/eslint-plugin\": \"6.14.0\",\r\n    \"@typescript-eslint/parser\": \"6.14.0\",\r\n    \"chai\": \"5.0.0\",\r\n    \"chai-dom\": \"1.12.0\",\r\n    \"cross-env\": \"7.0.3\",\r\n    \"css-loader\": \"6.8.1\",\r\n    \"css-minimizer-webpack-plugin\": \"5.0.1\",\r\n    \"cssnano\": \"6.0.1\",\r\n    \"eslint\": \"8.55.0\",\r\n    \"eslint-config-prettier\": \"9.1.0\",\r\n    \"eslint-plugin-css-modules\": \"2.12.0\",\r\n    \"eslint-plugin-react\": \"7.33.2\",\r\n    \"eslint-plugin-react-hooks\": \"4.6.0\",\r\n    \"eslint-plugin-storybook\": \"^0.6.15\",\r\n    \"fork-ts-checker-webpack-plugin\": \"9.0.2\",\r\n    \"global-jsdom\": \"9.2.0\",\r\n    \"jsdom\": \"23.0.1\",\r\n    \"lint-staged\": \"15.2.0\",\r\n    \"mocha\": \"10.2.0\",\r\n    \"node-abi\": \"3.52.0\",\r\n    \"node-gyp\": \"10.0.1\",\r\n    \"node-loader\": \"2.0.0\",\r\n    \"npm-run-all\": \"4.1.5\",\r\n    \"postcss\": \"8.4.32\",\r\n    \"postcss-loader\": \"7.3.3\",\r\n    \"postcss-scss\": \"4.0.9\",\r\n    \"prettier\": \"3.1.1\",\r\n    \"sass\": \"1.69.5\",\r\n    \"sass-loader\": \"13.3.2\",\r\n    \"semver\": \"^7.5.4\",\r\n    \"style-loader\": \"3.3.3\",\r\n    \"typescript\": \"5.3.3\",\r\n    \"typescript-plugin-css-modules\": \"5.0.2\",\r\n    \"webpack\": \"5.74.0\",\r\n    \"webpack-bundle-analyzer\": \"4.10.1\",\r\n    \"webpack-cli\": \"5.1.4\",\r\n    \"webpack-dev-server\": \"4.15.1\",\r\n    \"webpack-merge\": \"5.10.0\",\r\n    \"workbox-webpack-plugin\": \"7.0.0\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=16\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"cross-env TS_NODE_FILES=true TS_NODE_BASEURL=. TS_NODE_PROJECT=tsconfig.json mocha --enable-source-maps\"\r\n  },\r\n  \"type\": \"module\"\r\n}\r\n\r\n```\r\n* Operating system and version: Windows 10\r\n\r\nThis is my first issue raised here - can provide more details if needed. Any help is much appreciated, as have tried what feels like every solution regarding tsconfig-paths/register, path mapping etc to no avail.\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2103/reactions",
          "total_count": 2,
          "+1": 2,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2103/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2100",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2100/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2100/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2100/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2100",
        "id": 2069863362,
        "node_id": "I_kwDOAlTKGc57X5vC",
        "number": 2100,
        "title": "TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" in Node v21.5.0",
        "user": {
          "login": "cibilex",
          "id": 55107569,
          "node_id": "MDQ6VXNlcjU1MTA3NTY5",
          "avatar_url": "https://avatars.githubusercontent.com/u/55107569?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cibilex",
          "html_url": "https://github.com/cibilex",
          "followers_url": "https://api.github.com/users/cibilex/followers",
          "following_url": "https://api.github.com/users/cibilex/following{/other_user}",
          "gists_url": "https://api.github.com/users/cibilex/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cibilex/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cibilex/subscriptions",
          "organizations_url": "https://api.github.com/users/cibilex/orgs",
          "repos_url": "https://api.github.com/users/cibilex/repos",
          "events_url": "https://api.github.com/users/cibilex/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cibilex/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 54,
        "created_at": "2024-01-08T07:15:36Z",
        "updated_at": "2024-08-08T14:56:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "First of all ,I already looked at https://github.com/TypeStrong/ts-node/issues/1997 and most of other websites to solve the problem but I couldn't.This error is throwed when I try to use in Node v21.5.0.I realized that The problem is node version,when I updated Node version to v19.0.0 it works.Could you please update ts-node to work in new Node versions.\r\n\r\nBest regards.\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2100/reactions",
          "total_count": 73,
          "+1": 73,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2100/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2099",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2099/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2099/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2099/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2099",
        "id": 2048045636,
        "node_id": "I_kwDOAlTKGc56ErJE",
        "number": 2099,
        "title": "ESM: Cannot find module './index.js' and requiring \"imaginaryUncacheableRequireResolveScript\"",
        "user": {
          "login": "flleeppyy",
          "id": 18307183,
          "node_id": "MDQ6VXNlcjE4MzA3MTgz",
          "avatar_url": "https://avatars.githubusercontent.com/u/18307183?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/flleeppyy",
          "html_url": "https://github.com/flleeppyy",
          "followers_url": "https://api.github.com/users/flleeppyy/followers",
          "following_url": "https://api.github.com/users/flleeppyy/following{/other_user}",
          "gists_url": "https://api.github.com/users/flleeppyy/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/flleeppyy/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/flleeppyy/subscriptions",
          "organizations_url": "https://api.github.com/users/flleeppyy/orgs",
          "repos_url": "https://api.github.com/users/flleeppyy/repos",
          "events_url": "https://api.github.com/users/flleeppyy/events{/privacy}",
          "received_events_url": "https://api.github.com/users/flleeppyy/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-12-19T06:59:30Z",
        "updated_at": "2024-08-01T08:04:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nIf I try to run the script src/index.ts, it results in this error\r\n```\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /home/chen/development/relatrack-backend/src/index.ts\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:160:9)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:203:36)\r\n    at defaultLoad (node:internal/modules/esm/load:141:22)\r\n    at async nextLoad (node:internal/modules/esm/hooks:865:22)\r\n    at async nextLoad (node:internal/modules/esm/hooks:865:22)\r\n    at async Hooks.load (node:internal/modules/esm/hooks:448:20)\r\n    at async MessagePort.handleMessage (node:internal/modules/esm/worker:196:18) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n\r\nBut if I run the script with script/index.js, I get this error\r\n```\r\nnode:internal/modules/cjs/loader:1147\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module './index.js'\r\nRequire stack:\r\n- /home/chen/development/relatrack-backend/src/imaginaryUncacheableRequireResolveScript\r\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1144:15)\r\n    at Function.resolve (node:internal/modules/helpers:187:19)\r\n    at requireResolveNonCached (/home/chen/development/relatrack-backend/node_modules/.pnpm/ts-node@10.9.2_@types+node@20.10.5_typescript@5.3.3/node_modules/ts-node/dist/bin.js:550:16)\r\n    at getProjectSearchDir (/home/chen/development/relatrack-backend/node_modules/.pnpm/ts-node@10.9.2_@types+node@20.10.5_typescript@5.3.3/node_modules/ts-node/dist/bin.js:519:40)\r\n    at phase3 (/home/chen/development/relatrack-backend/node_modules/.pnpm/ts-node@10.9.2_@types+node@20.10.5_typescript@5.3.3/node_modules/ts-node/dist/bin.js:267:27)\r\n    at bootstrap (/home/chen/development/relatrack-backend/node_modules/.pnpm/ts-node@10.9.2_@types+node@20.10.5_typescript@5.3.3/node_modules/ts-node/dist/bin.js:47:30)\r\n    at main (/home/chen/development/relatrack-backend/node_modules/.pnpm/ts-node@10.9.2_@types+node@20.10.5_typescript@5.3.3/node_modules/ts-node/dist/bin.js:33:12)\r\n    at Object.<anonymous> (/home/chen/development/relatrack-backend/node_modules/.pnpm/ts-node@10.9.2_@types+node@20.10.5_typescript@5.3.3/node_modules/ts-node/dist/bin.js:580:5)\r\n    at Module._compile (node:internal/modules/cjs/loader:1376:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1435:10) {\r\n  code: 'MODULE_NOT_FOUND',\r\n  requireStack: [\r\n    '/home/chen/development/relatrack-backend/src/imaginaryUncacheableRequireResolveScript'\r\n  ]\r\n}\r\n\r\nNode.js v20.10.0\r\n```\r\n\r\nNo where am I importing \"imaginaryUncacheableRequireResolveScript\" and looking that up on Google yields nothing. \r\n \r\n### Expected Behavior\r\nIt runs my code with either of the file extensions I provide\r\n\r\n### Actual Behavior\r\nThe errors above.\r\n\r\n### Steps to reproduce the problem\r\n\r\nrunning pnpm/npm ts-node src/index.js with my tsconfig (making sure tpye is set to module in package.json)\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/flleeppyy/ts-node-repros\r\nhttps://github.com/TypeStrong/ts-node-repros/pull/37\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\nts-node v10.9.2\r\nnode v20.10.0\r\ncompiler v5.3.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"allowJs\": false,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"allowArbitraryExtensions\": true,\r\n    \"alwaysStrict\": true,\r\n    \"baseUrl\": \".\",\r\n    \"checkJs\": false,\r\n    \"downlevelIteration\": true,\r\n    \"declaration\": false,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"esModuleInterop\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"importHelpers\": true,\r\n    \"incremental\": true,\r\n    \"inlineSources\": false,\r\n    \"isolatedModules\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"lib\": [\"ES2023\"],\r\n    \"module\": \"NodeNext\",\r\n    // \"moduleResolution\": \"Node\",\r\n    \"noEmit\": false,\r\n    \"noEmitHelpers\": true,\r\n    \"noEmitOnError\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noImplicitReturns\": false,\r\n    \"noImplicitThis\": true,\r\n    \"noUnusedLocals\": false,\r\n    \"noUnusedParameters\": false,\r\n    \"outDir\": \"./dist\",\r\n    \"pretty\": true,\r\n    \"removeComments\": true,\r\n    \"resolvePackageJsonImports\": true,\r\n    \"resolvePackageJsonExports\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"skipLibCheck\": true,\r\n    \"sourceMap\": true,\r\n    \"strict\": true,\r\n    \"strictBindCallApply\": true,\r\n    \"strictFunctionTypes\": false,\r\n    \"strictNullChecks\": true,\r\n    \"strictPropertyInitialization\": true,\r\n    \"suppressImplicitAnyIndexErrors\": false,\r\n    \"target\": \"ES2020\",\r\n    \"verbatimModuleSyntax\": true,\r\n    \"useDefineForClassFields\": true\r\n  },\r\n  \"ts-node\": {\r\n    \"experimentalSpecifierResolution\": \"node\",\r\n    \"transpileOnly\": true,\r\n    \"esm\": true\r\n  }\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"relatrack-backend\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Backend to Relatrack, an inventory solution.\",\r\n  \"main\": \"src/index.ts\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"dev\": \"nodemon src/index.js\",\r\n    \"start\": \"cd dist && node index.js\",\r\n    \"build\": \"tsc\",\r\n    \"lint\": \"eslint . --ext .js,.ts --fix --ignore-path .gitignore && prettier --write --ignore-path .gitignore .\",\r\n    \"db:genschema\": \"cross-env node --no-warnings --loader ts-node/esm -r ts-node/register ./src/utils/dbSchemaParser.ts\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=20.6.0\",\r\n    \"pnpm\": \">=8.0.0\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": {\r\n    \"name\": \"Chen Jinkerson\",\r\n    \"email\": \"flleeppyybusiness@gmail.com\",\r\n    \"url\": \"https://fleepy.tv\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"@fastify/cors\": \"^8.5.0\",\r\n    \"@fastify/helmet\": \"^11.1.1\",\r\n    \"@fastify/multipart\": \"^8.0.0\",\r\n    \"@typescript-eslint/types\": \"^6.15.0\",\r\n    \"ajv\": \"^8.12.0\",\r\n    \"ajv-keywords\": \"^5.1.0\",\r\n    \"bcryptjs\": \"^2.4.3\",\r\n    \"better-sqlite3\": \"^9.2.2\",\r\n    \"cross-env\": \"^7.0.3\",\r\n    \"dotenv\": \"^16.3.1\",\r\n    \"fastify\": \"^4.25.1\",\r\n    \"fastify-plugin\": \"^4.5.1\",\r\n    \"image-size\": \"^1.0.2\",\r\n    \"jose\": \"^5.1.3\",\r\n    \"json-schema-to-typescript\": \"^13.1.1\",\r\n    \"jsonwebtoken\": \"^8.5.1\",\r\n    \"knex\": \"^2.5.1\",\r\n    \"pino\": \"^8.17.1\",\r\n    \"pino-pretty\": \"^10.3.0\",\r\n    \"sqlite3\": \"^5.1.6\",\r\n    \"ts-node\": \"^10.9.2\",\r\n    \"tslib\": \"^2.6.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@espimarisa/eslint-config\": \"^4.2.0\",\r\n    \"@types/bcryptjs\": \"^2.4.6\",\r\n    \"@types/jsonwebtoken\": \"^8.5.9\",\r\n    \"@types/node\": \"^20.10.5\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^6.15.0\",\r\n    \"@typescript-eslint/parser\": \"^6.15.0\",\r\n    \"@typescript-eslint/typescript-estree\": \"^6.15.0\",\r\n    \"eslint\": \"^8.56.0\",\r\n    \"eslint-config-prettier\": \"^9.1.0\",\r\n    \"eslint-import-resolver-typescript\": \"^3.6.1\",\r\n    \"eslint-plugin-import\": \"^2.29.1\",\r\n    \"eslint-plugin-node\": \"^11.1.0\",\r\n    \"eslint-plugin-prettier\": \"^5.0.1\",\r\n    \"eslint-plugin-unicorn\": \"^49.0.0\",\r\n    \"nodemon\": \"^3.0.2\",\r\n    \"prettier\": \"^3.1.1\",\r\n    \"typescript\": \"^5.3.3\"\r\n  }\r\n}\r\n\r\n```\r\n* Operating system and version: Ubuntu 23.10 x86_64 \r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2099/reactions",
          "total_count": 3,
          "+1": 3,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2099/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2095",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2095/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2095/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2095/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2095",
        "id": 2022257480,
        "node_id": "I_kwDOAlTKGc54iTNI",
        "number": 2095,
        "title": "Support clearing the local context with .clear when starting programmatically",
        "user": {
          "login": "lilactown",
          "id": 2687140,
          "node_id": "MDQ6VXNlcjI2ODcxNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2687140?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lilactown",
          "html_url": "https://github.com/lilactown",
          "followers_url": "https://api.github.com/users/lilactown/followers",
          "following_url": "https://api.github.com/users/lilactown/following{/other_user}",
          "gists_url": "https://api.github.com/users/lilactown/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lilactown/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lilactown/subscriptions",
          "organizations_url": "https://api.github.com/users/lilactown/orgs",
          "repos_url": "https://api.github.com/users/lilactown/repos",
          "events_url": "https://api.github.com/users/lilactown/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lilactown/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-12-02T23:51:25Z",
        "updated_at": "2023-12-02T23:51:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nWhen starting a REPL using `node`, `.clear` is an alias for `.break`\r\n\r\n```shellsession\r\n$ node\r\n> .help\r\n.break    Sometimes you get stuck, this gets you out\r\n.clear    Alias for .break\r\n.editor   Enter editor mode\r\n.exit     Exit the REPL\r\n.help     Print this help message\r\n.load     Load JS from a file into the REPL session\r\n.save     Save all evaluated commands in this REPL session to a file\r\n\r\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\r\n```\r\n\r\nHowever, if you start the REPL programmatically, `.clear` will also clear the local context, [allowing you to redefine variables](https://stackoverflow.com/questions/74487529/how-do-i-clear-all-variables-in-node-repl). This is very useful when reloading files or in general doing REPL-driven development.\r\n\r\n```shellsession\r\n$ node -e \"require('repl').start()\"\r\n> .help\r\n.break    Sometimes you get stuck, this gets you out\r\n.clear    Break, and also clear the local context\r\n.editor   Enter editor mode\r\n.exit     Exit the REPL\r\n.help     Print this help message\r\n.load     Load JS from a file into the REPL session\r\n.save     Save all evaluated commands in this REPL session to a file\r\n\r\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\r\n> let a = 1\r\nundefined\r\n> let a = 2\r\nUncaught SyntaxError: Identifier 'a' has already been declared\r\n> .clear\r\nClearing context...\r\n> let a = 2\r\nundefined\r\n```\r\n\r\nIt would be great if ts-node could support this same behavior. Currently, attempting to start the ts-node REPL programmatically gives the same behavior as if started from the CLI, i.e. `.clear` does not clear the local context.\r\n\r\n```shellsession\r\n$ cat repl\r\n#!/usr/bin/env node\r\n\r\nlet tsNode = require('ts-node');\r\nlet repl = tsNode.createRepl();\r\nlet service = tsNode.create({...repl.evalAwarePartialHost});\r\nrepl.setService(service);\r\nrepl.start();\r\n$ ./repl\r\n> let a = 1\r\nundefined\r\n> .clear\r\n> let a = 1\r\n<repl>.ts:4:5 - error TS2451: Cannot redeclare block-scoped variable 'a'.\r\n\r\n4 let a = 1;\r\n      ~\r\n<repl>.ts:5:5 - error TS2451: Cannot redeclare block-scoped variable 'a'.\r\n\r\n5 let a = 1\r\n      ~\r\n```\r\n\r\n### Is this request related to a problem?\r\n\r\nSomewhat related to https://github.com/TypeStrong/ts-node/issues/472\r\n\r\n### Alternatives you've considered\r\n\r\nNone really. The linked issue says that ts-node wants to keep parity with node, and not add any other magic invalidations. The behavior suggested here is consistent with node.\r\n\r\n### Additional context\r\n\r\nN/A",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2095/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2095/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2094",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2094/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2094/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2094/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2094",
        "id": 2020423591,
        "node_id": "I_kwDOAlTKGc54bTen",
        "number": 2094,
        "title": "ERR_UNKNOWN_FILE_EXTENSION since Node.js 18.19.0 (works fine with 18.18.2)",
        "user": {
          "login": "mlenkeit",
          "id": 2060790,
          "node_id": "MDQ6VXNlcjIwNjA3OTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2060790?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mlenkeit",
          "html_url": "https://github.com/mlenkeit",
          "followers_url": "https://api.github.com/users/mlenkeit/followers",
          "following_url": "https://api.github.com/users/mlenkeit/following{/other_user}",
          "gists_url": "https://api.github.com/users/mlenkeit/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mlenkeit/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mlenkeit/subscriptions",
          "organizations_url": "https://api.github.com/users/mlenkeit/orgs",
          "repos_url": "https://api.github.com/users/mlenkeit/repos",
          "events_url": "https://api.github.com/users/mlenkeit/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mlenkeit/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 18,
        "created_at": "2023-12-01T09:01:09Z",
        "updated_at": "2024-08-05T16:22:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n- ERR_UNKNOWN_FILE_EXTENSION\r\n- Node.js 18.19.0\r\n- Node.js 18.18.2\r\n\r\n### Expected Behavior\r\n\r\n`npx ts-node <script.ts>` works on Node.js `18.19.0` just as it does with `18.18.2`.\r\n\r\n### Actual Behavior\r\n\r\nSince the upgrade to Node.js `18.19.0`, the call fails with `ERR_UNKNOWN_FILE_EXTENSION`. \r\n\r\nAll other potentially related parameters remained unchanged (e.g. `package-lock.json`, `ts-config.json`, etc.).\r\n\r\nWe discovered this with GitHub workflow runs that run periodically (with `schedule`) at short intervals; only difference since things started failing is the Node.js version.\r\n\r\n### Steps to reproduce the problem\r\n\r\n- set up Node.js 18.19.2\r\n- set `\"type\": \"module\"` in `package.json`\r\n- set `\"esm\": true` in `tsconfig.json`\r\n- create `main.ts` with something like: `console.log('Hello world')`\r\n- run `npx ts-node main.ts`\r\n\r\n\r\n### Minimal reproduction\r\n\r\nsee https://github.com/mlenkeit/ts-node-repro\r\n\r\nthere's also a GitHub workflow to run this repo against Node.js `18.19.0` and `18.18.2`:\r\nhttps://github.com/mlenkeit/ts-node-repro/actions/runs/7057725777\r\n\r\n### Specifications\r\n\r\n* ts-node version: v10.9.1\r\n* node version: v18.19.0\r\n* TypeScript version: v5.2.2\r\n* tsconfig.json, if you're using one:\r\n  ```\r\n  {\r\n    \"extends\": \"@tsconfig/node18/tsconfig.json\",\r\n    \"ts-node\": {\r\n      \"esm\": true\r\n    },\r\n    \"compilerOptions\": {\r\n      \"allowSyntheticDefaultImports\": true,\r\n      \"moduleResolution\": \"Node\",\r\n      \"module\": \"ESNext\",\r\n      \"noImplicitAny\": false,\r\n      \"strictNullChecks\": true,\r\n      \"sourceMap\": true,\r\n      \"outDir\": \"./dist\",\r\n      \"resolveJsonModule\": false,\r\n      \"types\": [\r\n        \"node\"\r\n      ]\r\n    },\r\n    \"exclude\": [\"node_modules\"]\r\n  }\r\n  ```\r\n* package.json:\r\n  ```\r\n  {\r\n    \"name\": \"ts-node-repro\",\r\n    \"private\": true,\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"type\": \"module\",\r\n    \"dependencies\": {\r\n      \"@tsconfig/node18\": \"18.2.2\",\r\n      \"@types/node\": \"18.16.1\",\r\n      \"ts-node\": \"10.9.1\",\r\n      \"typescript\": \"5.2.2\"\r\n    }\r\n  }\r\n  ```\r\n* Operating system and version: macOS Sonoma 14.1.1\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2094/reactions",
          "total_count": 76,
          "+1": 74,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 2,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2094/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2092",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2092/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2092/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2092/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2092",
        "id": 2008755568,
        "node_id": "I_kwDOAlTKGc53uy1w",
        "number": 2092,
        "title": "add --env-file environment variable similar to node v:20.6.0 ",
        "user": {
          "login": "sumitbhanushali",
          "id": 9103781,
          "node_id": "MDQ6VXNlcjkxMDM3ODE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9103781?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sumitbhanushali",
          "html_url": "https://github.com/sumitbhanushali",
          "followers_url": "https://api.github.com/users/sumitbhanushali/followers",
          "following_url": "https://api.github.com/users/sumitbhanushali/following{/other_user}",
          "gists_url": "https://api.github.com/users/sumitbhanushali/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sumitbhanushali/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sumitbhanushali/subscriptions",
          "organizations_url": "https://api.github.com/users/sumitbhanushali/orgs",
          "repos_url": "https://api.github.com/users/sumitbhanushali/repos",
          "events_url": "https://api.github.com/users/sumitbhanushali/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sumitbhanushali/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-11-23T20:22:02Z",
        "updated_at": "2024-05-02T15:37:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nsince v:20.6.0, nodejs natively supports .env files for loading environment variables. I use ts-node for development purposes and intend to not use dotenv package.\r\n\r\n\r\n### Is this request related to a problem?\r\n\r\n\r\n\r\n<!-- Describe the problem, for example: \"I'm always frustrated when ... \" -->\r\n\r\n### Alternatives you've considered\r\n\r\n\r\n\r\n### Additional context\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2092/reactions",
          "total_count": 16,
          "+1": 16,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2092/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2089",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2089/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2089/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2089/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2089",
        "id": 2006253308,
        "node_id": "I_kwDOAlTKGc53lP78",
        "number": 2089,
        "title": "\"TypeError: require(...) is not a function\" in ts-node dependecy",
        "user": {
          "login": "adrielgama",
          "id": 26908986,
          "node_id": "MDQ6VXNlcjI2OTA4OTg2",
          "avatar_url": "https://avatars.githubusercontent.com/u/26908986?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/adrielgama",
          "html_url": "https://github.com/adrielgama",
          "followers_url": "https://api.github.com/users/adrielgama/followers",
          "following_url": "https://api.github.com/users/adrielgama/following{/other_user}",
          "gists_url": "https://api.github.com/users/adrielgama/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/adrielgama/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/adrielgama/subscriptions",
          "organizations_url": "https://api.github.com/users/adrielgama/orgs",
          "repos_url": "https://api.github.com/users/adrielgama/repos",
          "events_url": "https://api.github.com/users/adrielgama/events{/privacy}",
          "received_events_url": "https://api.github.com/users/adrielgama/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-11-22T12:37:47Z",
        "updated_at": "2023-11-22T12:37:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n`ts-node` `finalhandler` `require`\r\n\r\n\r\n### Expected Behavior\r\nRunning project without problems\r\n\r\n\r\n### Actual Behavior\r\nFailed to start\r\n\r\n\r\n### Steps to reproduce the problem\r\nRun `yarn start:dev`: `nodemon --watch 'src/**' --exec npx ts-node -r tsconfig-paths/register dev-infra.ts -e ts`\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n\r\n```\r\n[nodemon] 2.0.22\r\n[nodemon] to restart at any time, enter `rs`\r\n[nodemon] watching path(s): 'src\\**'\r\n[nodemon] watching extensions: ts\r\n[nodemon] starting `npx ts-node -r tsconfig-paths/register dev-infra.ts`\r\n[server] running\r\nC:\\Users\\proce\\Documents\\F\\T\\node_modules\\finalhandler\\index.js:14\r\nvar debug = require('debug')('finalhandler')\r\n                            ^\r\nTypeError: require(...) is not a function\r\n    at Object.<anonymous> (C:\\Users\\proce\\Documents\\F\\T\\node_modules\\finalhandler\\index.js:14:29)\r\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)\r\n    at Object.require.extensions.<computed> [as .js] (C:\\Users\\proce\\Documents\\F\\T\\node_modules\\ts-node\\src\\index.ts:1608:43)\r\n    at Module.load (node:internal/modules/cjs/loader:1119:32)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:960:12)\r\n    at Module.require (node:internal/modules/cjs/loader:1143:19)\r\n    at require (node:internal/modules/cjs/helpers:119:18)\r\n    at Object.<anonymous> (C:\\Users\\proce\\Documents\\F\\T\\node_modules\\express\\lib\\application.js:16:20)\r\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\r\n[nodemon] app crashed - waiting for file changes before starting...\r\n```\r\n\r\n### Specifications\r\n\r\n\r\n* ts-node version: 10.9.1\r\n* node version: 18.18.0\r\n* TypeScript version: 4.9.5\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES2021\",\r\n    \"module\": \"CommonJS\",\r\n    \"types\": [\"node\", \"jest\", \"reflect-metadata\", \"multer\"],\r\n    \"allowJs\": true,\r\n    \"importHelpers\": true,\r\n    \"baseUrl\": \".\",\r\n    \"rootDir\": \".\",\r\n    \"outDir\": \"dist\",\r\n    \"removeComments\": true,\r\n    \"skipLibCheck\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"esModuleInterop\": true,\r\n    \"sourceMap\": true,\r\n    \"noUncheckedIndexedAccess\": true,\r\n    \"strictNullChecks\": true,\r\n    \"paths\": {\r\n      \"@domain/*\": [\"./src/domain/*\"],\r\n      \"@infra/*\": [\"./src/infra/*\"],\r\n      \"@main/*\": [\"./src/main/*\"],\r\n      \"@tests/*\": [\"./tests/*\"]\r\n    }\r\n  },\r\n  \"include\": [\"debug.ts\", \"src/**/*\", \"tests/**/*\", \"dev-infra.ts\"]\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"t\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"private\": true,\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"infra\": \"node dev-infra.js\",\r\n    \"build\": \"swc src -d build\",\r\n    \"test\": \"jest --runInBand --passWithNoTests --detectOpenHandles --silent --bail\",\r\n    \"test:cov\": \"jest --runInBand --silent --coverage\",\r\n    \"start\": \"node ./build/main/server.js\",\r\n    \"start:dev\": \"nodemon --watch 'src/**' --exec npx ts-node -r tsconfig-paths/register dev-infra.ts -e ts\",\r\n    \"typeorm\": \"node -r ts-node/register ./node_modules/typeorm/cli -d ./data-source.ts\",\r\n    \"prepare\": \"husky install\",\r\n    \"debug\": \"ts-node -r tsconfig-paths/register ./debug.ts\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@commitlint/cli\": \"^17.4.3\",\r\n    \"@commitlint/config-conventional\": \"^17.4.3\",\r\n    \"@faker-js/faker\": \"^8.0.2\",\r\n    \"@swc/cli\": \"^0.1.57\",\r\n    \"@swc/core\": \"^1.2.196\",\r\n    \"@types/aws-lambda\": \"^8.10.110\",\r\n    \"@types/express\": \"^4.17.17\",\r\n    \"@types/jest\": \"^29.0.3\",\r\n    \"@types/luxon\": \"^3.3.2\",\r\n    \"@types/multer\": \"^1.4.9\",\r\n    \"@types/node\": \"^18.17.1\",\r\n    \"@types/supertest\": \"^2.0.12\",\r\n    \"@types/swagger-ui-express\": \"^4.1.3\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^5.52.0\",\r\n    \"@typescript-eslint/parser\": \"^5.52.0\",\r\n    \"eslint\": \"^8.34.0\",\r\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\r\n    \"eslint-config-standard\": \"^17.0.0\",\r\n    \"eslint-import-resolver-typescript\": \"^3.5.3\",\r\n    \"eslint-plugin-import\": \"^2.27.5\",\r\n    \"eslint-plugin-jest\": \"^24.1.5\",\r\n    \"eslint-plugin-n\": \"^15.6.1\",\r\n    \"eslint-plugin-node\": \"^11.1.0\",\r\n    \"eslint-plugin-promise\": \"^6.1.1\",\r\n    \"eslint-plugin-security\": \"^1.4.0\",\r\n    \"eslint-plugin-you-dont-need-lodash-underscore\": \"^6.11.0\",\r\n    \"git-commit-msg-linter\": \"^4.1.3\",\r\n    \"husky\": \"^8.0.3\",\r\n    \"jest\": \"^29.0.3\",\r\n    \"lint-staged\": \"^13.2.3\",\r\n    \"nodemon\": \"^2.0.20\",\r\n    \"serverless\": \"^3.19.0\",\r\n    \"serverless-dotenv-plugin\": \"^4.0.1\",\r\n    \"serverless-offline\": \"^12.0.4\",\r\n    \"serverless-plugin-typescript\": \"^2.1.4\",\r\n    \"supertest\": \"^6.3.3\",\r\n    \"swagger-ui-express\": \"^5.0.0\",\r\n    \"testcontainers\": \"^9.10.0\",\r\n    \"ts-jest\": \"^29.0.1\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tsc-alias\": \"^1.7.0\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"typescript\": \"^4.9.5\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@aws-sdk/client-kinesis\": \"^3.363.0\",\r\n    \"@aws-sdk/client-secrets-manager\": \"^3.338.0\",\r\n    \"aws-sdk\": \"^2.1315.0\",\r\n    \"axios\": \"^1.4.0\",\r\n    \"dotenv\": \"^16.1.3\",\r\n    \"express\": \"^4.18.2\",\r\n    \"install\": \"^0.13.0\",\r\n    \"inversify\": \"^6.0.1\",\r\n    \"inversify-express-utils\": \"^6.4.3\",\r\n    \"luxon\": \"^3.4.3\",\r\n    \"mongodb\": \"^5.7.0\",\r\n    \"multer\": \"^1.4.5-lts.1\",\r\n    \"mysql2\": \"^3.6.1\",\r\n    \"node-cache\": \"^5.1.2\",\r\n    \"npm\": \"^9.8.1\",\r\n    \"pino\": \"^8.11.0\",\r\n    \"pino-pretty\": \"^9.3.0\",\r\n    \"reflect-metadata\": \"^0.1.13\",\r\n    \"swagger-express-ts\": \"^1.1.0\",\r\n    \"swc\": \"^1.0.11\",\r\n    \"typeorm\": \"^0.3.17\",\r\n    \"yup\": \"^1.0.0\"\r\n  },\r\n  \"engines\": {\r\n    \"npm\": \"please-use-yarn\"\r\n  },\r\n  \"lint-staged\": {\r\n    \"*.ts\": [\r\n      \"prettier -w\",\r\n      \"eslint --cache --fix --ext .ts\"\r\n    ]\r\n  }\r\n}\r\n\r\n```\r\n* Operating system and version: `Windows 11 - 22H2 (22621.2715)`\r\n* If Windows, are you using WSL or WSL2?: \r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2089/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2089/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2087",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2087/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2087/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2087/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2087",
        "id": 1997249189,
        "node_id": "I_kwDOAlTKGc53C5ql",
        "number": 2087,
        "title": "In REPL, can't access the previous line's return value via `_`",
        "user": {
          "login": "Iwaslazkis",
          "id": 67493856,
          "node_id": "MDQ6VXNlcjY3NDkzODU2",
          "avatar_url": "https://avatars.githubusercontent.com/u/67493856?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Iwaslazkis",
          "html_url": "https://github.com/Iwaslazkis",
          "followers_url": "https://api.github.com/users/Iwaslazkis/followers",
          "following_url": "https://api.github.com/users/Iwaslazkis/following{/other_user}",
          "gists_url": "https://api.github.com/users/Iwaslazkis/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Iwaslazkis/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Iwaslazkis/subscriptions",
          "organizations_url": "https://api.github.com/users/Iwaslazkis/orgs",
          "repos_url": "https://api.github.com/users/Iwaslazkis/repos",
          "events_url": "https://api.github.com/users/Iwaslazkis/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Iwaslazkis/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-11-16T16:25:49Z",
        "updated_at": "2023-11-16T16:25:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n`REPL`, `Return Value`, `_`\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n```node\r\n$ ts-node\r\n> const foo = 123\r\nundefined\r\n> foo\r\n123\r\n> _\r\n123\r\n> \"strings, like anything else, should work\"\r\n'strings, like anything else, should work'\r\n> const bar = _\r\nundefined\r\n> bar\r\n'strings, like anything else, would work'\r\n> \r\n```\r\n\r\n### Actual Behavior\r\n```node\r\n$ ts-node\r\n> const foo = 123\r\nundefined\r\n> foo\r\n123\r\n> _\r\n<repl>.ts:6:1 - error TS2304: Cannot find name '_'.\r\n\r\n6 _\r\n  ~\r\n\r\n> \"strings don't work either\"\r\n\"strings don't work either\"\r\n> const bar = _\r\n<repl>.ts:7:13 - error TS2304: Cannot find name '_'.\r\n\r\n7 const bar = _\r\n              ~\r\n\r\n> bar\r\n<repl>.ts:7:1 - error TS2304: Cannot find name 'bar'.\r\n\r\n7 bar\r\n  ~~~\r\n\r\n> \r\n\r\n```\r\n\r\n### Steps to reproduce the problem\r\nOpen a `ts-node` REPL, execute a line of code, and on the next line the return value should be accessible via `_`, just like on the normal `node` REPL, as described [here](https://nodejs.org/en/learn/command-line/how-to-use-the-nodejs-repl#the-_-special-variable).\r\n\r\n### Minimal reproduction\r\nGiven this is happening in any ts-node REPL environment as far as I can tell (at least on the versions mentioned below), I'm not sure what exactly what a \"minimal reproduction\" would look like here. Please specify what you want me to include if you still want one though, and I'd be happy to oblige.\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n--> \r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: `v10.9.1`\r\n* node version: `v19.7.0`\r\n* TypeScript version: `v5.1.6`\r\n* tsconfig.json, if you're using one: `N/A`\r\n* package.json: `N/A`\r\n* Operating system and version: `Linux 6.5.9-arch1-1, Arch Linux, GNOME`\r\n* If Windows, are you using WSL or WSL2?: `No`\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2087/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2087/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2086",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2086/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2086/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2086/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2086",
        "id": 1995892717,
        "node_id": "I_kwDOAlTKGc529uft",
        "number": 2086,
        "title": "ts-node doesn't run ESM modules as expected, either refusing`import` statements in ts file or not being able to run `.ts` files",
        "user": {
          "login": "GovindarajanNagarajan-TomTom",
          "id": 143812141,
          "node_id": "U_kgDOCJJmLQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/143812141?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/GovindarajanNagarajan-TomTom",
          "html_url": "https://github.com/GovindarajanNagarajan-TomTom",
          "followers_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/followers",
          "following_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/following{/other_user}",
          "gists_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/subscriptions",
          "organizations_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/orgs",
          "repos_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/repos",
          "events_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/events{/privacy}",
          "received_events_url": "https://api.github.com/users/GovindarajanNagarajan-TomTom/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-11-16T01:59:11Z",
        "updated_at": "2024-05-11T21:59:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nESM import paths\r\n\r\n### Expected Behavior\r\n\r\nI expect `ts-node` to be able to run typescript code using ESM module imports. However , it either fails with \r\n```\r\nSyntaxError: Cannot use import statement outside a module  \r\n```\r\nor after adding a `\"type\": \"module\"` to `package.json`, fails with\r\n\r\n```\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /Users/MY_PROJECT_DIR/workers/master.ts\r\n``` \r\n\r\nThe documentation is rather insufficient on how ts-node operations with tsconfig.json and the `type` value in package.json. \r\nOf all of `target`, `module` and `moduleResolution` in `tsconfig.json:compilerOptions`, what should be the first value that is set (as in, does `target` determine `module` and `moduleResolution`'s values, or vice versa ?) \r\n\r\nPlease provide some guidance on how this works. \r\n### Actual Behavior\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\nThis file creates basically parses the env variables and then creates a bunch of worker processes. \r\n\r\n\r\nrun with `npx ts-node workers/master.ts`\r\n\r\n```\r\n// workers/master.ts\r\nimport Redis from 'ioredis';\r\nimport { fork } from 'child_process';\r\nimport dotenv from 'dotenv';\r\n\r\nimport { Worker } from './worker';\r\nimport { isValid } from './../shared/lib/utils';\r\n\r\ndotenv.config();\r\nconst streamNames: string[] = [\"stream-1\", \"stream-2\"];\r\nconst numWorkersPerStream: number = 5;\r\nconst REDIS_HOST = process.env.REDIS_HOST;\r\nconst REDIS_PORT = isValid(process.env.REDIS_PORT) ? parseInt(process.env.REDIS_PORT!, 10) : null;\r\n\r\nif (!isValid(REDIS_HOST)) {\r\n  console.error('REDIS_HOST is not a valid environmental variable');\r\n  process.exit(1);\r\n}\r\n\r\nif (!isValid(REDIS_PORT)) {\r\n  console.error('REDIS_PORT is not a valid environmental variable');\r\n  process.exit(1);\r\n}\r\n\r\n\r\nconst redisClient = new Redis({\r\n  host: REDIS_HOST!,\r\n  port: REDIS_PORT!,\r\n});\r\n\r\nasync function createConsumerGroupIfNotExists(streamName: string, consumerGroup: string) {\r\n  try {\r\n    await redisClient.xgroup('CREATE', streamName, consumerGroup, '$', 'MKSTREAM');\r\n    console.log(`Consumer group \"${consumerGroup}\" created (if not already exists) for stream \"${streamName}\"`);\r\n  } catch (error: any) {\r\n    if (!error.message.includes('BUSYGROUP Consumer Group name already exists')) {\r\n      console.error('Error creating consumer group:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Create consumer groups only once\r\nfor (let i = 0; i < streamNames.length; i++) {\r\n  const streamName = streamNames[i];\r\n  const consumerGroup = `${streamName}-group`;\r\n  createConsumerGroupIfNotExists(streamName, consumerGroup);\r\n}\r\n\r\n\r\n\r\n// Create worker processes for each stream and group combination\r\nfor (let i = 0; i < streamNames.length; i++) {\r\n  for (let j = 0; j < numWorkersPerStream; j++) {\r\n    const workerName: string = `worker-${streamNames[i]}-${j}`;\r\n    const streamName: string = streamNames[i];\r\n    const consumerGroup: string = `${streamName}-group`;\r\n    const args: string[] = [workerName, streamName, consumerGroup, REDIS_HOST!, REDIS_PORT!.toString()];\r\n    const workerProcess = fork(\"./workers/worker.ts\", args);\r\n    workerProcess.send(\"start\"); // Signal the child process to start\r\n  }\r\n}%\r\n```\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n\r\n\r\n### Specifications\r\nOS: macOS Sonoma 14.1.1\r\n\"ts-node\": \"^10.9.1\"\r\n`node` version: 20.6.1\r\n\r\ntsconfig.json\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"commonjs\",\r\n    \"outDir\": \"./dist\",\r\n    \"esModuleInterop\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"strict\": true,\r\n    \"skipLibCheck\": true\r\n  },\r\n  \"ts-node\": {\r\n    \"compilerOptions\": {\r\n       \"target\": \"es2015\",\r\n      \"module\": \"es2015\",\r\n      \"moduleResolution\": \"nodenext\"\r\n    }\r\n  }\r\n}\r\n```\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2086/reactions",
          "total_count": 21,
          "+1": 21,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2086/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2085",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2085/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2085/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2085/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2085",
        "id": 1991736309,
        "node_id": "I_kwDOAlTKGc52t3v1",
        "number": 2085,
        "title": "UnhandledPromiseRejection: ts-node-esm does not display type checking results",
        "user": {
          "login": "jahirvidrio",
          "id": 32244290,
          "node_id": "MDQ6VXNlcjMyMjQ0Mjkw",
          "avatar_url": "https://avatars.githubusercontent.com/u/32244290?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jahirvidrio",
          "html_url": "https://github.com/jahirvidrio",
          "followers_url": "https://api.github.com/users/jahirvidrio/followers",
          "following_url": "https://api.github.com/users/jahirvidrio/following{/other_user}",
          "gists_url": "https://api.github.com/users/jahirvidrio/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jahirvidrio/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jahirvidrio/subscriptions",
          "organizations_url": "https://api.github.com/users/jahirvidrio/orgs",
          "repos_url": "https://api.github.com/users/jahirvidrio/repos",
          "events_url": "https://api.github.com/users/jahirvidrio/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jahirvidrio/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2023-11-14T00:47:22Z",
        "updated_at": "2024-08-29T23:09:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nesm, node 20, UnhandledPromiseRejection\r\n\r\n### Expected Behavior\r\n\r\nI expect to see the type checking errors displayed in the console when using `ts-node` with esm support, providing information about what went wrong during TypeScript compilation.\r\n\r\n### Actual Behavior\r\n\r\nThe console output from ts-node-esm does not include information about type checking errors, making it challenging to identify and resolve issues during development. Additionally, Node.js reports the following error:\r\n\r\n```\r\n[UnhandledPromiseRejection: This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). The promise rejected with the reason \"[object Object]\".] {\r\n  code: 'ERR_UNHANDLED_REJECTION'\r\n}\r\n```\r\n\r\n> I tried using it with ts-node-esm and also with the --loader ts-node/esm option.\r\n>\r\n> If I remove ESM support, everything works correctly, and I can see the type checking report from tsc.\r\n\r\n### Steps to reproduce the problem\r\n\r\n```ts\r\nconst str: number = 'hello world';\r\n\r\nconsole.log(str);\r\n```\r\n\r\n### Minimal reproduction\r\n\r\nJust run `ts-node` with esm support\r\n\r\n```sh\r\n$ NODE_OPTIONS=\"--no-warnings=ExperimentalWarning --experimental-loader=ts-node/esm\" ts-node main.ts\r\n\r\n[UnhandledPromiseRejection: This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). The promise rejected with the reason \"[object Object]\".] {\r\n  code: 'ERR_UNHANDLED_REJECTION'\r\n}\r\n```\r\n\r\n### Specifications\r\n\r\n* ts-node version: 10.9.1\r\n* node version: 20.9.0\r\n* TypeScript version: 5.2.2\r\n* tsconfig.json\r\n```\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es2022\",\r\n        \"module\": \"es2022\"\r\n    },\r\n    \"ts-node\": {\r\n        \"esm\": true,\r\n        \"experimentalSpecifierResolution\": \"node\"\r\n    }\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n    \"type\": \"module\",\r\n    \"scripts\": {\r\n        \"start\": \"NODE_OPTIONS=\\\"--no-warnings=ExperimentalWarning --experimental-loader=ts-node/esm\\\" ts-node main.ts\"\r\n    },\r\n    \"devDependencies\": {\r\n        \"ts-node\": \"^10.9.1\",\r\n        \"tslib\": \"^2.6.2\",\r\n        \"typescript\": \"^5.2.2\"\r\n    }\r\n}\r\n```\r\n* Operating system and version: Linux Debian in docker dev container node:20.9.0-bookworm\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2085/reactions",
          "total_count": 8,
          "+1": 8,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2085/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2083",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2083/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2083/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2083/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2083",
        "id": 1975564411,
        "node_id": "I_kwDOAlTKGc51wLh7",
        "number": 2083,
        "title": "not even the most simple use-case",
        "user": {
          "login": "AndreLeifert",
          "id": 2843630,
          "node_id": "MDQ6VXNlcjI4NDM2MzA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2843630?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/AndreLeifert",
          "html_url": "https://github.com/AndreLeifert",
          "followers_url": "https://api.github.com/users/AndreLeifert/followers",
          "following_url": "https://api.github.com/users/AndreLeifert/following{/other_user}",
          "gists_url": "https://api.github.com/users/AndreLeifert/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/AndreLeifert/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/AndreLeifert/subscriptions",
          "organizations_url": "https://api.github.com/users/AndreLeifert/orgs",
          "repos_url": "https://api.github.com/users/AndreLeifert/repos",
          "events_url": "https://api.github.com/users/AndreLeifert/events{/privacy}",
          "received_events_url": "https://api.github.com/users/AndreLeifert/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-11-03T07:04:54Z",
        "updated_at": "2023-11-13T22:54:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "sudo npm i -g ts-node typescript\r\nts-node -v\r\n    v10.9.1\r\necho 'console.log(\"OK\")' > tst.ts\r\nts-node tst.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /home/andre/play/tic/bmos-ic/tst.ts\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:79:11)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:124:36)\r\n    at defaultLoad (node:internal/modules/esm/load:84:20)\r\n    at nextLoad (node:internal/modules/esm/loader:163:28)\r\n    at ESMLoader.load (node:internal/modules/esm/loader:603:26)\r\n    at ESMLoader.moduleProvider (node:internal/modules/esm/loader:457:22)\r\n    at new ModuleJob (node:internal/modules/esm/module_job:64:26)\r\n    at ESMLoader.#createModuleJob (node:internal/modules/esm/loader:480:17)\r\n    at ESMLoader.getModuleJob (node:internal/modules/esm/loader:434:34) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2083/reactions",
          "total_count": 3,
          "+1": 3,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2083/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2078",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2078/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2078/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2078/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2078",
        "id": 1956925112,
        "node_id": "I_kwDOAlTKGc50pE64",
        "number": 2078,
        "title": "Allow replacing symbols",
        "user": {
          "login": "stdedos",
          "id": 133706,
          "node_id": "MDQ6VXNlcjEzMzcwNg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/133706?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stdedos",
          "html_url": "https://github.com/stdedos",
          "followers_url": "https://api.github.com/users/stdedos/followers",
          "following_url": "https://api.github.com/users/stdedos/following{/other_user}",
          "gists_url": "https://api.github.com/users/stdedos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/stdedos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/stdedos/subscriptions",
          "organizations_url": "https://api.github.com/users/stdedos/orgs",
          "repos_url": "https://api.github.com/users/stdedos/repos",
          "events_url": "https://api.github.com/users/stdedos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/stdedos/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-10-23T11:14:46Z",
        "updated_at": "2023-10-23T11:14:46Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nIMHO, in REPL-situations, re-writing and re-executing code is the number one priority.\r\n\r\nThis however, conflicts with using `const`s or `function`s - which both are strong language recommendation.\r\n\r\n### Is this request related to a problem?\r\n\r\n\r\n\r\n<!-- Describe the problem, for example: \"I'm always frustrated when ... \" -->\r\n\r\n### Alternatives you've considered\r\n\r\n* Kill and start `ts-node` again\r\n* Use `let` instead of const\r\n\r\nBoth have huge time and manual-work overhead\r\n\r\n### Additional context\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2078/reactions",
          "total_count": 2,
          "+1": 2,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2078/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2077",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2077/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2077/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2077/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2077",
        "id": 1948037719,
        "node_id": "I_kwDOAlTKGc50HLJX",
        "number": 2077,
        "title": "v11 beta",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-10-17T18:45:37Z",
        "updated_at": "2024-09-06T02:12:58Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "v11 beta has been published to npm.\r\n\r\nhttps://www.npmjs.com/package/ts-node/v/11.0.0-beta.1\r\n\r\n`npm install ts-node` will *not* give you the beta by default.\r\n\r\nYou must do `npm install ts-node@beta` to install the beta tag.\r\n\r\nI haven't had time to prepare release notes yet.  They will accompany the v11 stable release.  Until then, the commit log will have to suffice.  It links to PRs which describe their changes, though their descriptions will not be as easy to read as documentation.\r\n\r\nhttps://github.com/TypeStrong/ts-node/compare/v10.9.1...v11.0.0-beta.1",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2077/reactions",
          "total_count": 10,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 6,
          "confused": 0,
          "heart": 0,
          "rocket": 3,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2077/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2072",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2072/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2072/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2072/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2072",
        "id": 1926419380,
        "node_id": "I_kwDOAlTKGc5y0tO0",
        "number": 2072,
        "title": "Export `ts-node/esm-register` to use with `--import`",
        "user": {
          "login": "jlenon7",
          "id": 52840235,
          "node_id": "MDQ6VXNlcjUyODQwMjM1",
          "avatar_url": "https://avatars.githubusercontent.com/u/52840235?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jlenon7",
          "html_url": "https://github.com/jlenon7",
          "followers_url": "https://api.github.com/users/jlenon7/followers",
          "following_url": "https://api.github.com/users/jlenon7/following{/other_user}",
          "gists_url": "https://api.github.com/users/jlenon7/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jlenon7/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jlenon7/subscriptions",
          "organizations_url": "https://api.github.com/users/jlenon7/orgs",
          "repos_url": "https://api.github.com/users/jlenon7/repos",
          "events_url": "https://api.github.com/users/jlenon7/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jlenon7/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-10-04T14:58:43Z",
        "updated_at": "2024-01-16T20:29:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nRegister the `ts-node/esm` loader using the `register` function. Example of use:\r\n\r\n`node --import=ts-node/esm-register`\r\n\r\nThe content of the file would be something like this:\r\n\r\n```js\r\nimport { register } from 'node:module'\r\nimport { pathToFileURL } from 'node:url'\r\n\r\nregister('ts-node/esm', pathToFileURL('./'))\r\n```\r\n\r\n### Is this request related to a problem?\r\n\r\nNo.\r\n\r\n<!-- Describe the problem, for example: \"I'm always frustrated when ... \" -->\r\n\r\n### Alternatives you've considered\r\n\r\n.\r\n\r\n### Additional context\r\n\r\n.\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2072/reactions",
          "total_count": 31,
          "+1": 31,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2072/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2070",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2070/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2070/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2070/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2070",
        "id": 1910201262,
        "node_id": "I_kwDOAlTKGc5x21uu",
        "number": 2070,
        "title": "SWC: unknown field `noInterop`, expected `resolveFully`",
        "user": {
          "login": "meabed",
          "id": 45731,
          "node_id": "MDQ6VXNlcjQ1NzMx",
          "avatar_url": "https://avatars.githubusercontent.com/u/45731?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/meabed",
          "html_url": "https://github.com/meabed",
          "followers_url": "https://api.github.com/users/meabed/followers",
          "following_url": "https://api.github.com/users/meabed/following{/other_user}",
          "gists_url": "https://api.github.com/users/meabed/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/meabed/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/meabed/subscriptions",
          "organizations_url": "https://api.github.com/users/meabed/orgs",
          "repos_url": "https://api.github.com/users/meabed/repos",
          "events_url": "https://api.github.com/users/meabed/events{/privacy}",
          "received_events_url": "https://api.github.com/users/meabed/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 17,
        "created_at": "2023-09-24T11:28:49Z",
        "updated_at": "2023-11-13T08:28:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Using \"@swc/core\": \"1.3.88\", there is error with `noInterop`\r\n\r\n```\r\nJSON: {\"sourceMaps\":true,\"module\":{\"noInterop\":false,\"type\":\"es6\",\"strictMode\":true,\"ignoreDynamic\":false},\"swcrc\":false,\"jsc\":{\"parser\":{\"syntax\":\"typescript\",\"tsx\":false,\"dynamicImport\":true,\"importAssertions\":true},\"target\":\"es2015\",\"transform\":{\"legacyDecorator\":true,\"react\":{\"throwIfNamespace\":false,\"useBuiltins\":false}},\"keepClassNames\":false,\"experimental\":{\"keepImportAssertions\":true}}}\r\n\r\nCaused by:\r\n    unknown field `noInterop`, expected `resolveFully` at line 1 column 391\r\n\r\n```\r\nProbably similar fix as: https://github.com/TypeStrong/ts-node/pull/2062\r\n\r\nMight be related: \r\n- https://github.com/swc-project/swc/issues/7979\r\n- https://github.com/swc-project/swc/issues/7963",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2070/reactions",
          "total_count": 19,
          "+1": 19,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2070/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2069",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2069/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2069/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2069/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2069",
        "id": 1909648026,
        "node_id": "I_kwDOAlTKGc5x0uqa",
        "number": 2069,
        "title": "Using ts-node main branch as a dependency fails on GitHub Actions with pnpm",
        "user": {
          "login": "WankkoRee",
          "id": 21287731,
          "node_id": "MDQ6VXNlcjIxMjg3NzMx",
          "avatar_url": "https://avatars.githubusercontent.com/u/21287731?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/WankkoRee",
          "html_url": "https://github.com/WankkoRee",
          "followers_url": "https://api.github.com/users/WankkoRee/followers",
          "following_url": "https://api.github.com/users/WankkoRee/following{/other_user}",
          "gists_url": "https://api.github.com/users/WankkoRee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/WankkoRee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/WankkoRee/subscriptions",
          "organizations_url": "https://api.github.com/users/WankkoRee/orgs",
          "repos_url": "https://api.github.com/users/WankkoRee/repos",
          "events_url": "https://api.github.com/users/WankkoRee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/WankkoRee/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-09-23T00:46:53Z",
        "updated_at": "2024-09-07T23:00:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n`pnpm` `ERR_PNPM_PREPARE_PACKAGE` `prepack` `TS2742` `macroReplNoErrorsAndStdoutContains` `macroReplStderrContains` `@cspotcode/ava-lib`\r\n\r\n### Expected Behavior\r\n\r\ninstall `github:TypeStrong/ts-node#main` as a dependency successfully.\r\n\r\n### Actual Behavior\r\n\r\ninstall `github:TypeStrong/ts-node#main` as a dependency failed.\r\n\r\n```ts\r\n...1816_0fa4b34047b2a870b11744b3f7556d5f prepack$ node ./scripts/prepack.mjs\r\n...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: > ts-node@10.9.1 prepack-worker /home/runner/setup-pnpm/node_modules/.bin/store/v3/tmp/_tmp_1816_0fa4b34047b2a870b11744b3f7556d5f\r\n...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: > rimraf temp dist tsconfig.schema.json tsconfig.schemastore-schema.json tsconfig.tsbuildinfo tests/ts-node-packed.tgz tests/node_modules tests/tmp && tsc -b ./tsconfig.build-dist.json && typescript-json-schema --topRef --refs --validationKeywords allOf --out tsconfig.schema.json tsconfig.build-schema.json TsConfigSchema && node --require ./register ./scripts/create-merged-schema\r\n##[debug]Dropping file value '/home/runner/work/action-runner-test/action-runner-test/...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: src/test/repl/helpers/macros.ts'. Path does not exist\r\nError: ...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: src/test/repl/helpers/macros.ts(4,14): error TS2742: The inferred type of 'macroReplNoErrorsAndStdoutContains' cannot be named without a reference to '.bin/store/v3/tmp/_tmp_1816_0fa4b34047b2a870b11744b3f7556d5f/node_modules/@cspotcode/ava-lib'. This is likely not portable. A type annotation is necessary.\r\n##[debug]Dropping file value '/home/runner/work/action-runner-test/action-runner-test/...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: src/test/repl/helpers/macros.ts'. Path does not exist\r\nError: ...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: src/test/repl/helpers/macros.ts(9,14): error TS2742: The inferred type of 'macroReplStderrContains' cannot be named without a reference to '.bin/store/v3/tmp/_tmp_1816_0fa4b34047b2a870b11744b3f7556d5f/node_modules/@cspotcode/ava-lib'. This is likely not portable. A type annotation is necessary.\r\n...1816_0fa4b34047b2a870b11744b3f7556d5f prepack:  ELIFECYCLE  Command failed with exit code 2.\r\n...1816_0fa4b34047b2a870b11744b3f7556d5f prepack: Failed\r\n ERR_PNPM_PREPARE_PACKAGE  Failed to prepare git-hosted package fetched from \"https://codeload.github.com/TypeStrong/ts-node/tar.gz/0eb980f2b7e86801eca76782a323f7ad696784ab\": ts-node@10.9.1 prepack: `node ./scripts/prepack.mjs`\r\nExit status 1\r\nError: Process completed with exit code 1.\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\nI install dependencies in my computer with no problem. But there is some errors on GitHub Actions.\r\n\r\nhttps://github.com/WankkoRee/action-runner-test/actions/runs/6283895211/job/17064801621\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/WankkoRee/action-runner-test\r\n\r\n### Specifications\r\n\r\nGitHub Actions runner 2.309.0 with Node.js 18.17.1 and pnpm 8.7.6\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2069/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2069/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2068",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2068/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2068/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2068/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2068",
        "id": 1907028986,
        "node_id": "I_kwDOAlTKGc5xqvP6",
        "number": 2068,
        "title": "ESM + path mapping",
        "user": {
          "login": "damianobarbati",
          "id": 2225869,
          "node_id": "MDQ6VXNlcjIyMjU4Njk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2225869?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/damianobarbati",
          "html_url": "https://github.com/damianobarbati",
          "followers_url": "https://api.github.com/users/damianobarbati/followers",
          "following_url": "https://api.github.com/users/damianobarbati/following{/other_user}",
          "gists_url": "https://api.github.com/users/damianobarbati/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/damianobarbati/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/damianobarbati/subscriptions",
          "organizations_url": "https://api.github.com/users/damianobarbati/orgs",
          "repos_url": "https://api.github.com/users/damianobarbati/repos",
          "events_url": "https://api.github.com/users/damianobarbati/events{/privacy}",
          "received_events_url": "https://api.github.com/users/damianobarbati/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-09-21T13:47:46Z",
        "updated_at": "2023-11-05T04:57:52Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Is <https://typestrong.org/ts-node/docs/paths/> supposed to be working with ESM?\r\n\r\nAdding the following to `tsconfig.json`:\r\n```sh\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n    \"experimentalSpecifierResolution\": \"node\",\r\n    \"require\": [\"tsconfig-paths/register\"]\r\n  }\r\n```\r\n\r\nResults in this error:\r\n```sh\r\nError: Cannot find package '@controller/Lesson' imported from /Users/damians/Desktop/box696/packages/api/src/jobs.ts\r\n```\r\n\r\nWhen trying to load any mapped import:\r\n```ts\r\nimport LessonController from '@controller/Lesson';\r\n```",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2068/reactions",
          "total_count": 6,
          "+1": 6,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2068/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2066",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2066/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2066/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2066/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2066",
        "id": 1902126171,
        "node_id": "I_kwDOAlTKGc5xYCRb",
        "number": 2066,
        "title": "Use ts-node command to compile .ts file is unsuccessful ,throwing an error as is below ",
        "user": {
          "login": "birdflesh",
          "id": 51043912,
          "node_id": "MDQ6VXNlcjUxMDQzOTEy",
          "avatar_url": "https://avatars.githubusercontent.com/u/51043912?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/birdflesh",
          "html_url": "https://github.com/birdflesh",
          "followers_url": "https://api.github.com/users/birdflesh/followers",
          "following_url": "https://api.github.com/users/birdflesh/following{/other_user}",
          "gists_url": "https://api.github.com/users/birdflesh/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/birdflesh/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/birdflesh/subscriptions",
          "organizations_url": "https://api.github.com/users/birdflesh/orgs",
          "repos_url": "https://api.github.com/users/birdflesh/repos",
          "events_url": "https://api.github.com/users/birdflesh/events{/privacy}",
          "received_events_url": "https://api.github.com/users/birdflesh/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-09-19T03:08:47Z",
        "updated_at": "2024-02-15T21:14:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nts-node\r\nE:XXXXX\\nodejs\\node_modules\\typescript\\lib\\typescript.js:139\r\n    for (let i = startIndex ?? 0; i < array.length; i++) {\r\n                             ^\r\n\r\nSyntaxError: Unexpected token ?\r\n    at new Script (vm.js:79:7)\r\n    at createScript (vm.js:251:10)\r\n    at Object.runInThisContext (vm.js:303:10)\r\n    at Module._compile (internal/modules/cjs/loader.js:656:28)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10)\r\n    at Module.load (internal/modules/cjs/loader.js:598:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:537:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:529:3)\r\n    at Module.require (internal/modules/cjs/loader.js:636:17)\r\n    at require (internal/modules/cjs/helpers.js:20:18)\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\n\r\n\r\n### Actual Behavior\r\n\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version:  v10.9.1\r\n* node version: v10.12.0\r\n* TypeScript version:5.2.2\r\n* tsconfig.json, if you're using one:{\r\n  \"extends\": \"@tsconfig/node10/tsconfig.json\"\r\n}\r\n```\r\n{}\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n* Operating system and version: win 10 \r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2066/reactions",
          "total_count": 3,
          "+1": 3,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2066/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2060",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2060/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2060/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2060/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2060",
        "id": 1892625952,
        "node_id": "I_kwDOAlTKGc5wzy4g",
        "number": 2060,
        "title": "Does not support modulesuffixes in tsconfig.json",
        "user": {
          "login": "jayshah123",
          "id": 659202,
          "node_id": "MDQ6VXNlcjY1OTIwMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/659202?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jayshah123",
          "html_url": "https://github.com/jayshah123",
          "followers_url": "https://api.github.com/users/jayshah123/followers",
          "following_url": "https://api.github.com/users/jayshah123/following{/other_user}",
          "gists_url": "https://api.github.com/users/jayshah123/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jayshah123/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jayshah123/subscriptions",
          "organizations_url": "https://api.github.com/users/jayshah123/orgs",
          "repos_url": "https://api.github.com/users/jayshah123/repos",
          "events_url": "https://api.github.com/users/jayshah123/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jayshah123/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-09-12T14:17:31Z",
        "updated_at": "2023-09-16T02:19:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n\r\nWe use https://www.typescriptlang.org/tsconfig#moduleSuffixes for react-native project.\r\n\r\nAdding this config option causes `ts-node` to break, is there a way to avoid this?\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nts-node should not crash\r\n\r\n### Actual Behavior\r\n\r\n```\r\n$ ts-node ./scripts/i18n/build-i18n.ts\r\n/bitrise/src/node_modules/ts-node/src/index.ts:859\r\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\r\n           ^\r\nTSError: ⨯ Unable to compile TypeScript:\r\nerror TS5023: Unknown compiler option 'moduleSuffixes'.\r\n    at createTSError (/bitrise/src/node_modules/ts-node/src/index.ts:859:12)\r\n    at reportTSError (/bitrise/src/node_modules/ts-node/src/index.ts:863:19)\r\n    at createFromPreloadedConfig (/bitrise/src/node_modules/ts-node/src/index.ts:874:36)\r\n    at phase4 (/bitrise/src/node_modules/ts-node/src/bin.ts:543:44)\r\n    at bootstrap (/bitrise/src/node_modules/ts-node/src/bin.ts:95:10)\r\n    at main (/bitrise/src/node_modules/ts-node/src/bin.ts:55:10)\r\n    at Object.<anonymous> (/bitrise/src/node_modules/ts-node/src/bin.ts:800:3)\r\n    at Module._compile (node:internal/modules/cjs/loader:1218:14)\r\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1272:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1081:32) {\r\n  diagnosticCodes: [ 5023 ]\r\n}\r\n\r\n```\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\nCreate a project with `moduleSuffixes` compiler option.\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: `10.9.1`\r\n* node version: `18.3.0`\r\n* TypeScript version: 4.7.4\r\n* tsconfig.json, if you're using one: \r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"esnext\",\r\n    \"module\": \"commonjs\",\r\n    \"lib\": [\"es6\"],\r\n    \"allowJs\": true,\r\n    \"jsx\": \"react-native\",\r\n    \"noEmit\": true,\r\n    \"isolatedModules\": true,\r\n    \"strict\": true,\r\n    \"moduleResolution\": \"node\",\r\n    \"baseUrl\": \"./\",\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"esModuleInterop\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"moduleSuffixes\": [\".ios\", \".android\", \".native\", \"\"],\r\n    \"paths\": {\r\n      \"@app/*\": [\"./app/*\"],\r\n      \"@lib/*\": [\"./app/lib/*\"],\r\n      \"@assets/*\": [\"./assets/*\"],\r\n      \"@hooks/*\": [\"./app/hooks/*\"],\r\n      \"@modules/*\": [\"./app/modules/*\"],\r\n      \"@utilities/*\": [\"./app/utilities/*\"]\r\n    }\r\n  },\r\n  \"exclude\": [\r\n    \"./node_modules\",\r\n    \"./node_modules\",\r\n    \"babel.config.js\",\r\n    \"metro.config.js\",\r\n    \"./jest.config.js\"\r\n  ]\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n* Operating system and version:  13.5.1 (22G90)\r\n* If Windows, are you using WSL or WSL2?: No\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2060/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2060/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2053",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2053/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2053/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2053/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2053",
        "id": 1881958154,
        "node_id": "I_kwDOAlTKGc5wLGcK",
        "number": 2053,
        "title": "Line numbers in stack traces are wrong in Node v20",
        "user": {
          "login": "gthb",
          "id": 153580,
          "node_id": "MDQ6VXNlcjE1MzU4MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/153580?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gthb",
          "html_url": "https://github.com/gthb",
          "followers_url": "https://api.github.com/users/gthb/followers",
          "following_url": "https://api.github.com/users/gthb/following{/other_user}",
          "gists_url": "https://api.github.com/users/gthb/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gthb/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gthb/subscriptions",
          "organizations_url": "https://api.github.com/users/gthb/orgs",
          "repos_url": "https://api.github.com/users/gthb/repos",
          "events_url": "https://api.github.com/users/gthb/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gthb/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2023-09-05T13:13:30Z",
        "updated_at": "2024-06-19T17:30:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nline numbers\r\n\r\nNote that there is https://github.com/TypeStrong/ts-node/issues/1495, closed almost two years ago, long before Node v20 came out. I opened a new issue because (a) root causes are likely different even if the manifestation is similar, and (b) the way to reproduce is likely different as well, and (c) I can't reopen that old one anyway :) but the problem is clearly present today.\r\n\r\n### Expected Behavior\r\n\r\nI expect line numbers in stack traces thrown from TypeScript code to match the actual line numbers in the file, when running under Node v20, as they do when running under Node v18 and v19.\r\n\r\n### Actual Behavior\r\n\r\nWhen running under Node v20, line numbers in stack traces are wrong, appearing to be from the transpiled version of the module.\r\n\r\n### Steps to reproduce the problem\r\n\r\nRun a TypeScript module in which an error is thrown. Observe that the line numbers in the stack trace of that error are incorrect when running in Node v20, but are correct when running in Node v18 or v19.\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/TypeStrong/ts-node-repros/pull/34\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v20.5.1\r\n* TypeScript version: v5.2.2\r\n* tsconfig.json, if you're using one:\r\n```\r\n{}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"type\": \"module\",\r\n  \"dependencies\": {\r\n    \"ts-node\": \"latest\",\r\n    \"typescript\": \"latest\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: macOS 13.5.1 (22G90)\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2053/reactions",
          "total_count": 14,
          "+1": 14,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2053/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2050",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2050/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2050/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2050/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2050",
        "id": 1878691607,
        "node_id": "I_kwDOAlTKGc5v-o8X",
        "number": 2050,
        "title": "Research usability of `--enable-source-maps`",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 280271351,
            "node_id": "MDU6TGFiZWwyODAyNzEzNTE=",
            "url": "https://api.github.com/repos/TypeStrong/ts-node/labels/research",
            "name": "research",
            "color": "eb6420",
            "default": false,
            "description": "Needs design work, investigation, or prototyping.  Implementation uncertain."
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-09-02T13:31:37Z",
        "updated_at": "2023-09-02T16:12:12Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "In the past, node's built-in `--enable-source-maps` had bugs / missing features and performance issues.  But things may have changed.\r\n\r\nIn #2009 @isaacs found that `@cspotcode/source-map-support` is not working in node 20.  Maybe to do with installing it in both the loader and main threads, or to do with the source cache populating in one thread but the stack traces being mapped in another?\r\n\r\n---\r\n\r\nhttps://discord.com/channels/508357248330760243/933130253692436560/1147324780920459344\r\n\r\n### Correctness test and benchmark\r\n\r\nHere is a benchmark that I used to compare the correctness and performance of different sourcemap implementations.\r\nhttps://github.com/cspotcode/source-map-performance-demo#example-output\r\nhttps://github.com/evanw/node-source-map-support/issues/122#issuecomment-1079433868\r\n\r\n### Async frames rendering incorrectly\r\n\r\nhttps://github.com/nodejs/node/issues/42417\r\n\r\nasync stack frames weren't rendering correctly\r\nI linked the test & benchmark as evidence\r\n\r\n### Callsite vs callee function names\r\n\r\nSome sourcemappers map function names to the callsite (wrong), not the callee.  Meaning stack frames show the wrong function name\r\nhttps://github.com/jestjs/jest/pull/12786#issuecomment-1115474383\r\n\r\nHowever, @cspotcode/source-map-support also doing this wrong?",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2050/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2050/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2047",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2047/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2047/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2047/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2047",
        "id": 1852473917,
        "node_id": "I_kwDOAlTKGc5uaoI9",
        "number": 2047,
        "title": "Cannot run mts and ts files with ESM syntax",
        "user": {
          "login": "wbxl2000",
          "id": 57169560,
          "node_id": "MDQ6VXNlcjU3MTY5NTYw",
          "avatar_url": "https://avatars.githubusercontent.com/u/57169560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/wbxl2000",
          "html_url": "https://github.com/wbxl2000",
          "followers_url": "https://api.github.com/users/wbxl2000/followers",
          "following_url": "https://api.github.com/users/wbxl2000/following{/other_user}",
          "gists_url": "https://api.github.com/users/wbxl2000/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/wbxl2000/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/wbxl2000/subscriptions",
          "organizations_url": "https://api.github.com/users/wbxl2000/orgs",
          "repos_url": "https://api.github.com/users/wbxl2000/repos",
          "events_url": "https://api.github.com/users/wbxl2000/events{/privacy}",
          "received_events_url": "https://api.github.com/users/wbxl2000/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-08-16T04:12:42Z",
        "updated_at": "2023-08-23T19:18:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n- https://github.com/TypeStrong/ts-node/issues/935\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nprint '???' in terminal\r\n\r\n### Actual Behavior\r\n\r\n<img width=\"691\" alt=\"image\" src=\"https://github.com/TypeStrong/ts-node/assets/57169560/285db7c4-ecea-4392-8dd1-19fa672157d0\">\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. `pnpm i`\r\n2. `pnpm start`\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/wbxl2000/ts-esm-test\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v20.2.0\r\n* TypeScript version: v5.1.6\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"ESNext\" // or ES2015, ES2020\r\n  },\r\n  \"ts-node\": {\r\n    // Tell ts-node CLI to install the --loader automatically, explained below\r\n    \"esm\": true\r\n  }\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"ts-node-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"start\": \"ts-node ./test.ts\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^5.1.6\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: macOS 13.5 (22G74)\r\n* \r\n<img width=\"280\" alt=\"image\" src=\"https://github.com/TypeStrong/ts-node/assets/57169560/3d6b8464-7a80-4aab-b24d-0214a50ffe4c\">\r\n\r\n* If Windows, are you using WSL or WSL2?:\r\n\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n**same to above**\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version:\r\n* node version:\r\n* TypeScript version:\r\n* tsconfig.json, if you're using one:\r\n```\r\n{}\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n* Operating systion:\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2047/reactions",
          "total_count": 3,
          "+1": 3,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2047/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2044",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2044/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2044/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2044/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2044",
        "id": 1846851328,
        "node_id": "I_kwDOAlTKGc5uFLcA",
        "number": 2044,
        "title": "Imports mapping wildcard support",
        "user": {
          "login": "CMCDragonkai",
          "id": 640797,
          "node_id": "MDQ6VXNlcjY0MDc5Nw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/640797?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/CMCDragonkai",
          "html_url": "https://github.com/CMCDragonkai",
          "followers_url": "https://api.github.com/users/CMCDragonkai/followers",
          "following_url": "https://api.github.com/users/CMCDragonkai/following{/other_user}",
          "gists_url": "https://api.github.com/users/CMCDragonkai/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/CMCDragonkai/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/CMCDragonkai/subscriptions",
          "organizations_url": "https://api.github.com/users/CMCDragonkai/orgs",
          "repos_url": "https://api.github.com/users/CMCDragonkai/repos",
          "events_url": "https://api.github.com/users/CMCDragonkai/events{/privacy}",
          "received_events_url": "https://api.github.com/users/CMCDragonkai/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-08-11T13:43:30Z",
        "updated_at": "2023-08-11T13:43:30Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n* imports mapping\r\n* wildcard\r\n\r\n### Expected Behavior\r\n\r\nThe `imports` mapping key in `package.json` is a new way of specifying internal imports.\r\n\r\nI've noticed that `ts-node` does not appear to understand unless all mappings are specified literally.\r\n\r\nFor example if this is done:\r\n\r\n```\r\n  \"imports\": {\r\n    \"#*.js\": \"./dist/*.js\"\r\n  },\r\n```\r\n\r\nThis allows `node` to import `#index.js` without any problems.\r\n\r\n### Actual Behavior\r\n\r\nHowever if I use `ts-node`, it complains that\r\n\r\n```\r\n/home/cmcdragonkai/Projects/js-logger/node_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:374\r\n  throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(\r\n        ^\r\nCustomError: ERR_PACKAGE_IMPORT_NOT_DEFINED #index.js\r\n```\r\n\r\nIn order to fix this, it is necessary to to define the mapping explicitly:\r\n\r\n```\r\n  \"imports\": {\r\n    \"#index.js\": \"./dist/index.js\",\r\n    \"#*.js\": \"./dist/*.js\"\r\n  },\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\nCreate a new package with `\"imports\"` key as above.\r\n\r\nCreate a file that imports:\r\n\r\n```\r\nimport x from '#index.js';\r\n```\r\n\r\nName it `.js`, run it with `node`.\r\n\r\nThen name it `.ts` and run it with `ts-node`.\r\n\r\n### Minimal reproduction\r\n\r\n```\r\n  \"ts-node\": {\r\n    \"esm\": true\r\n  }\r\n```\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: node v18.15.0\r\n* TypeScript version: compiler v5.1.6",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2044/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2044/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2043",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2043/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2043/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2043/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2043",
        "id": 1834029269,
        "node_id": "I_kwDOAlTKGc5tURDV",
        "number": 2043,
        "title": "Can't have line breaks in object literals in REPL in some cases",
        "user": {
          "login": "groszdaniel",
          "id": 12212002,
          "node_id": "MDQ6VXNlcjEyMjEyMDAy",
          "avatar_url": "https://avatars.githubusercontent.com/u/12212002?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/groszdaniel",
          "html_url": "https://github.com/groszdaniel",
          "followers_url": "https://api.github.com/users/groszdaniel/followers",
          "following_url": "https://api.github.com/users/groszdaniel/following{/other_user}",
          "gists_url": "https://api.github.com/users/groszdaniel/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/groszdaniel/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/groszdaniel/subscriptions",
          "organizations_url": "https://api.github.com/users/groszdaniel/orgs",
          "repos_url": "https://api.github.com/users/groszdaniel/repos",
          "events_url": "https://api.github.com/users/groszdaniel/events{/privacy}",
          "received_events_url": "https://api.github.com/users/groszdaniel/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-08-02T23:41:29Z",
        "updated_at": "2023-08-02T23:41:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "In the REPL, I can't enter or paste an object literal across multiple lines if it has to conform to an interface/type: immediately after the opening { it throws errors.\r\n\r\nSeems equivalent with #644, except with TS2741.\r\n\r\n### Steps to reproduce the problem\r\n\r\nIn the ts-node REPL, enter or paste this:\r\n```typescript\r\nvar o: { n: number } = {\r\n    n: 2\r\n}\r\n``` \r\nWell, it's enough to enter the first line to get errors, the rest just show how it could be completed.\r\n\r\n### Expected Behavior\r\n\r\nSame as if it's all on one line:\r\n```\r\nundefined\r\n```\r\n\r\n### Actual Behavior\r\n\r\nAfter the first line:\r\n```\r\n<repl>.ts:4:5 - error TS2741: Property 'n' is missing in type '{}' but required in type '{ n: number; }'.\r\n\r\n4 var o: { n: number } = {\r\n      ~\r\n\r\n  <repl>.ts:4:10\r\n    4 var o: { n: number } = {\r\n               ~\r\n    'n' is declared here.\r\n<repl>.ts:5:1 - error TS1005: '}' expected.\r\n\r\n5 \r\n  \r\n\r\n  <repl>.ts:4:24\r\n    4 var o: { n: number } = {\r\n                             ~\r\n    The parser expected to find a '}' to match the '{' token here.\r\n\r\n```\r\n\r\n### Search Terms\r\n\r\nobject lines\r\n\r\n### Specifications\r\n\r\n* ts-node version: v10.9.1\r\n* node version: v20.3.1\r\n* TypeScript version: v4.9.5\r\n* Operating system and version: Linux, openSUSE Tumbleweed 20230731",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2043/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2043/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2041",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2041/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2041/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2041/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2041",
        "id": 1820166432,
        "node_id": "I_kwDOAlTKGc5sfYkg",
        "number": 2041,
        "title": "ERR_MODULE_NOT_FOUND when excluding .ts from imports",
        "user": {
          "login": "pietro99",
          "id": 43954467,
          "node_id": "MDQ6VXNlcjQzOTU0NDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/43954467?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pietro99",
          "html_url": "https://github.com/pietro99",
          "followers_url": "https://api.github.com/users/pietro99/followers",
          "following_url": "https://api.github.com/users/pietro99/following{/other_user}",
          "gists_url": "https://api.github.com/users/pietro99/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pietro99/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pietro99/subscriptions",
          "organizations_url": "https://api.github.com/users/pietro99/orgs",
          "repos_url": "https://api.github.com/users/pietro99/repos",
          "events_url": "https://api.github.com/users/pietro99/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pietro99/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-25T11:56:14Z",
        "updated_at": "2023-07-30T18:57:35Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nERR_MODULE_NOT_FOUND \r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\nI am expecting ts-node to successfully compile and run.\r\nI also compile with tsc and then run the compiled code and it works fine, this is what is confusing me.\r\nwhy is it working with tsc and not ts-node? they use the same tsconfig so it shouldn't have a difference.\r\n\r\n### Actual Behavior\r\nI get the following error:\r\n```\r\nC:\\Users\\Pietro\\Documents\\projects\\bulletproof-backand\\src>ts-node server.ts\r\nC:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:366\r\n    throw new ERR_MODULE_NOT_FOUND(\r\n          ^\r\n\r\nCustomError: Cannot find module 'C:\\Users\\Pietro\\Documents\\projects\\bulletproof-backand\\src\\sources\\api\\routes\\routes' imported from C:\\Users\\Pietro\\Documents\\projects\\bulletproof-backand\\src\\server.ts\r\n    at finalizeResolution (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:366:11)\r\n    at moduleResolve (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:801:10)\r\n    at Object.defaultResolve (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:912:11)\r\n    at C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\src\\esm.ts:218:35\r\n    at entrypointFallback (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\src\\esm.ts:168:34)\r\n    at C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\src\\esm.ts:217:14\r\n    at addShortCircuitFlag (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\src\\esm.ts:409:21)\r\n    at resolve (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\src\\esm.ts:197:12)\r\n    at resolve (C:\\Users\\Pietro\\AppData\\Roaming\\npm\\node_modules\\ts-node\\src\\child\\child-loader.ts:15:39)\r\n    at ESMLoader.resolve (node:internal/modules/esm/loader:530:30)\r\n\r\n```\r\n\r\n\r\n### Steps to reproduce the problem\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v16.14.2\r\n* TypeScript version: 4.9.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"es2022\",\r\n    \"target\": \"es2022\",\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"moduleResolution\": \"node\",\r\n    \"noEmit\": true,\r\n    \"baseUrl\": \"./\",\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"esModuleInterop\": true,\r\n\r\n    \"resolveJsonModule\": true,\r\n    \"isolatedModules\": true,\r\n    \"outDir\": \"./dist\",\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"strict\": true,\r\n    \"paths\": {\r\n      \"*\": [\"./node_modules/*\"],\r\n      \"@base/*\": [\"./src/*\"],\r\n      \"@libs/*\": [\"./src/libs/*\"]\r\n    }\r\n  },\r\n  \"include\": [\"src/**/*\"],\r\n  \"exclude\": [\"node_modules\", \"dist\", \".vscode\"],\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n    \"require\": [\"tsconfig-paths/register\"]\r\n  }\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"bulletproof-backand\",\r\n  \"type\": \"module\",\r\n  \"version\": \"1.0.0\",\r\n  \"license\": \"MIT\",\r\n  \"scripts\": {\r\n    \"build\": \"tsc\",\r\n    \"start\": \"node dist/server.js\",\r\n    \"dev\": \"nodemon\",\r\n    \"databases:up\": \"docker-compose -f ./docker/test-databases/docker-compose.yml build && docker-compose -f ./docker/test-databases/docker-compose.yml up -d\",\r\n    \"databases:down\": \"docker-compose -f ./docker/test-databases/docker-compose.yml down\",\r\n    \"test\": \"npx jest\",\r\n    \"lint\": \"eslint .\",\r\n    \"lint:fix\": \"eslint . --fix\",\r\n    \"format\": \"prettier --write .\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/babel__generator\": \"^7.6.4\",\r\n    \"@types/express\": \"^4.17.17\",\r\n    \"@types/jest\": \"^29.5.3\",\r\n    \"@types/node\": \"^20.4.2\",\r\n    \"eslint\": \"^8.45.0\",\r\n    \"eslint-config-prettier\": \"^8.8.0\",\r\n    \"eslint-plugin-import\": \"^2.27.5\",\r\n    \"eslint-plugin-prettier\": \"^5.0.0\",\r\n    \"jest\": \"^29.6.1\",\r\n    \"nodemon\": \"^3.0.1\",\r\n    \"prettier\": \"^3.0.0\",\r\n    \"ts-jest\": \"^29.1.1\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"typescript\": \"^5.1.6\"\r\n  },\r\n  \"dependencies\": {\r\n    \"dotenv\": \"^16.3.1\",\r\n    \"express\": \"^4.18.2\",\r\n    \"express-async-errors\": \"^3.1.1\",\r\n    \"express-validator\": \"^7.0.1\",\r\n    \"mysql2\": \"^3.5.2\",\r\n    \"pg\": \"^8.11.1\",\r\n    \"sequelize\": \"^6.32.1\",\r\n    \"ts-transformer-keys\": \"^0.4.4\"\r\n  }\r\n}\r\n\r\n```\r\n* Operating system and version: 10.0.19044 Build 19044\r\n* If Windows, are you using WSL or WSL2?: NO\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2041/reactions",
          "total_count": 2,
          "+1": 2,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2041/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2039",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2039/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2039/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2039/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2039",
        "id": 1816060104,
        "node_id": "I_kwDOAlTKGc5sPuDI",
        "number": 2039,
        "title": "Can't start a REPL",
        "user": {
          "login": "skrat",
          "id": 5008,
          "node_id": "MDQ6VXNlcjUwMDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5008?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/skrat",
          "html_url": "https://github.com/skrat",
          "followers_url": "https://api.github.com/users/skrat/followers",
          "following_url": "https://api.github.com/users/skrat/following{/other_user}",
          "gists_url": "https://api.github.com/users/skrat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/skrat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/skrat/subscriptions",
          "organizations_url": "https://api.github.com/users/skrat/orgs",
          "repos_url": "https://api.github.com/users/skrat/repos",
          "events_url": "https://api.github.com/users/skrat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/skrat/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-21T16:11:03Z",
        "updated_at": "2023-11-19T01:21:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Just when I was thinking TS/node ecosystem isn't too bad, this happened. I had a sudden need for a REPL, as I am used to it from Python:\r\n\r\n```\r\n~/W/r/rwdom/domlib master• ↑2 [1] yarn run ts-node --files --esm -T\r\nyarn run v1.22.19\r\n$ /home/skrat/Workspace/xxx/yyy/node_modules/.bin/ts-node --files --esm -T\r\n> import { Face } from 'src/rw/dom/model/document';\r\n/home/skrat/Workspace/xxx/yyy/domlib/<repl>.ts:2\r\nexport {};\r\n^^^^^^\r\n\r\nUncaught SyntaxError: Unexpected token 'export'\r\n> Face\r\n/home/skrat/Workspace/xxx/yyy/domlib/<repl>.ts:1\r\nimport { Face } from 'src/rw/dom/model/document';\r\n^^^^^^\r\n\r\nUncaught:\r\nSyntaxError: Cannot use import statement inside the Node.js REPL, alternatively use dynamic import\r\n```\r\n\r\nI feel like a tried a bunch of related CLI flags, various combinations of those, various forms of `import` etc. all failing on me. What is the problem?\r\n\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v18.15.0\r\n* TypeScript version: v5.1.6\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"composite\": false,\r\n    \"declaration\": true,\r\n    \"esModuleInterop\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"jsx\": \"react\",\r\n    \"lib\": [\"es2020\", \"dom\"],\r\n    \"module\": \"ES2020\",\r\n    \"moduleResolution\": \"node\",\r\n    \"outDir\": \"build\",\r\n    \"rootDir\": \"src\",\r\n    \"skipLibCheck\": true,\r\n    \"sourceMap\": true,\r\n    \"strictBindCallApply\": true,\r\n    \"target\": \"ES2019\",\r\n    \"typeRoots\": [\r\n      \"../node_modules/@types\"\r\n    ]\r\n  },\r\n  \"include\": [\r\n    \"src/**/*.ts\",\r\n    \"src/**/*.tsx\"\r\n  ]\r\n}\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n* Operating system and version: Linux\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2039/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2039/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2035",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2035/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2035/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2035/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2035",
        "id": 1803968102,
        "node_id": "I_kwDOAlTKGc5rhl5m",
        "number": 2035,
        "title": "Inconsistent behaviour with `moduleResolution: \"node16\"` and `swc: true` for CommonJS module output",
        "user": {
          "login": "jdb8",
          "id": 643295,
          "node_id": "MDQ6VXNlcjY0MzI5NQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/643295?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jdb8",
          "html_url": "https://github.com/jdb8",
          "followers_url": "https://api.github.com/users/jdb8/followers",
          "following_url": "https://api.github.com/users/jdb8/following{/other_user}",
          "gists_url": "https://api.github.com/users/jdb8/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jdb8/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jdb8/subscriptions",
          "organizations_url": "https://api.github.com/users/jdb8/orgs",
          "repos_url": "https://api.github.com/users/jdb8/repos",
          "events_url": "https://api.github.com/users/jdb8/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jdb8/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-07-14T01:13:55Z",
        "updated_at": "2023-09-19T02:58:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "_I decided to file this issue here after looking at both the `swc` and `ts-node` issues - apologies if this is a better fit for `swc`! I'm also fully expecting to be told that there is additional swc configuration required, in which case this issue could be reframed as \"add additional info on configuring swc to https://typestrong.org/ts-node/docs/swc/\"._\r\n\r\n### Search Terms\r\n\r\n`moduleResolution`, `swc`, CommonJS, `ERR_REQUIRE_ESM`, `import()`\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nIn a TypeScript project outputting CommonJS via `\"module\": \"CommonJS\"`, `ts-node` should compile and run files the same regardless of the `swc` option. See below for an example where this surprisingly wasn't the case.\r\n\r\nThis came up when importing an ESM-only package into a TypeScript file targeting CommonJS. Node gives us the suggestion to `Instead change the require of index.js in /Users/jbateson/code/ts-node-swc-module-resolution-repro/index.ts to a dynamic import() which is available in all CommonJS modules.`, but this doesn't seem to work with `swc: true`.\r\n\r\n### Actual Behavior\r\n\r\nGiven the following `tsconfig.json`:\r\n\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es2021\",\r\n        \"module\": \"CommonJS\",\r\n        \"moduleResolution\": \"node16\",\r\n        \"esModuleInterop\": true\r\n    }\r\n}\r\n```\r\n\r\nthe following code combining static ESM imports + dynamic imports of ESM-only code works fine:\r\n\r\n```js\r\nimport fs from 'fs';\r\n\r\n(async function main() {\r\n    console.log('main');\r\n\r\n    // Import node-fetch dynamically as it's pure ESM, and our output target is CJS\r\n    // @ts-ignore\r\n    const fetch = await import('node-fetch');\r\n\r\n    console.log({ fetch, fs });\r\n})();\r\n```\r\n\r\nbut when adding\r\n\r\n```json\r\n    \"ts-node\": {\r\n        \"swc\": true\r\n    }\r\n```\r\n\r\nit outputs the following when invoked as `ts-node index.ts`:\r\n\r\n```\r\n❯ ts-node index.ts\r\nmain\r\n/Users/jbateson/code/ts-node-swc-module-resolution-repro/node_modules/ts-node/dist/index.js:851\r\n            return old(m, filename);\r\n                   ^\r\nError [ERR_REQUIRE_ESM]: require() of ES Module /Users/jbateson/code/ts-node-swc-module-resolution-repro/node_modules/node-fetch/src/index.js from /Users/jbateson/code/ts-node-swc-module-resolution-repro/index.ts not supported.\r\nInstead change the require of index.js in /Users/jbateson/code/ts-node-swc-module-resolution-repro/index.ts to a dynamic import() which is available in all CommonJS modules.\r\n    at Object.require.extensions.<computed> [as .js] (/Users/jbateson/code/ts-node-swc-module-resolution-repro/node_modules/ts-node/dist/index.js:851:20)\r\n    at /Users/jbateson/code/ts-node-swc-module-resolution-repro/index.ts:54:92\r\n    at async main (/Users/jbateson/code/ts-node-swc-module-resolution-repro/index.ts:54:19) {\r\n  code: 'ERR_REQUIRE_ESM'\r\n}\r\n```\r\n\r\nwhich implies that `swc` is transpiling the `import()` differently from the default `ts-node`/`tsc` behaviour.\r\n\r\nI've \"verified\" this (kinda) by looking at the swc repl, which [turns `import()` into `require()` unconditionally](https://play.swc.rs/?version=1.2.207&code=H4sIAAAAAAAAA0utKMgvKlHIzAVTKgq2CkWphaWZRakaSlmBpalFlUqa1gD4Ch%2BpJAAAAA%3D%3D&config=H4sIAAAAAAAAAy2LQQrAIAwE%2F5JzD8Wjf%2BgjREOxtCpJBEX8e03pbZmZHXCxBzugOGIkXdyTuAYWpBdkT7EIzA3E0YmyMLLZza7oyaHeqB9Nl0o5YML29ZGPXwtVnC9KcCT2aQAAAA%3D%3D) when the target is CommonJS.\r\n\r\n### Steps to reproduce the problem\r\n\r\nSee above, also see a link to a runnable version of the same minimal repro below.\r\n\r\n### Minimal reproduction\r\n\r\nClone this repo, run `yarn` to install dependencies, and then run `ts-node index.ts` to reproduce the above: https://github.com/jdb8/ts-node-swc-module-resolution-repro\r\n\r\nCommenting out `swc: true` will show the expected behaviour.\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v16.16.0\r\n* TypeScript version: v5.1.6\r\n* tsconfig.json, if you're using one:\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es2021\",\r\n        \"module\": \"CommonJS\",\r\n        \"moduleResolution\": \"node16\",\r\n        \"esModuleInterop\": true\r\n    },\r\n    \"ts-node\": {\r\n        \"swc\": true\r\n    }\r\n}\r\n```\r\n* package.json:\r\n```json\r\n{\r\n  \"name\": \"ts-node-swc-module-resolution-repro\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"index.js\",\r\n  \"author\": \"Joe Bateson <joe@joebateson.com>\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"@swc/core\": \"^1.3.69\",\r\n    \"@swc/helpers\": \"^0.5.1\",\r\n    \"node-fetch\": \"^3.3.1\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^5.1.6\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^20.4.2\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: mac osx 13.4\r\n* If Windows, are you using WSL or WSL2?: n/a\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2035/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2035/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2034",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2034/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2034/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2034/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2034",
        "id": 1801880837,
        "node_id": "I_kwDOAlTKGc5rZoUF",
        "number": 2034,
        "title": "moduleResolution bundler support",
        "user": {
          "login": "eyeree",
          "id": 8445679,
          "node_id": "MDQ6VXNlcjg0NDU2Nzk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8445679?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/eyeree",
          "html_url": "https://github.com/eyeree",
          "followers_url": "https://api.github.com/users/eyeree/followers",
          "following_url": "https://api.github.com/users/eyeree/following{/other_user}",
          "gists_url": "https://api.github.com/users/eyeree/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/eyeree/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/eyeree/subscriptions",
          "organizations_url": "https://api.github.com/users/eyeree/orgs",
          "repos_url": "https://api.github.com/users/eyeree/repos",
          "events_url": "https://api.github.com/users/eyeree/events{/privacy}",
          "received_events_url": "https://api.github.com/users/eyeree/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-07-12T23:04:13Z",
        "updated_at": "2024-02-28T12:41:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nWhen tsconfig moduleResolution specifies \"bundler\", a new feature in TS 5.x, you can set type to \"module\" in package.json and still use import paths that don't end in a file extension. This does not work when using ts-node to bundle and execute the typescript code.\r\n\r\n### Is this request related to a problem?\r\n\r\nBoth ESM and CJS exist.\r\n\r\n### Alternatives you've considered\r\n\r\ntsup works correctly with config\r\n\r\n### Additional context\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2034/reactions",
          "total_count": 22,
          "+1": 21,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2034/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2033",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2033/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2033/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2033/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2033",
        "id": 1787797368,
        "node_id": "I_kwDOAlTKGc5qj594",
        "number": 2033,
        "title": "ERR_UNKNOWN_FILE_EXTENSION no matter what I do.",
        "user": {
          "login": "futuremotiondev",
          "id": 33441569,
          "node_id": "MDQ6VXNlcjMzNDQxNTY5",
          "avatar_url": "https://avatars.githubusercontent.com/u/33441569?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/futuremotiondev",
          "html_url": "https://github.com/futuremotiondev",
          "followers_url": "https://api.github.com/users/futuremotiondev/followers",
          "following_url": "https://api.github.com/users/futuremotiondev/following{/other_user}",
          "gists_url": "https://api.github.com/users/futuremotiondev/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/futuremotiondev/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/futuremotiondev/subscriptions",
          "organizations_url": "https://api.github.com/users/futuremotiondev/orgs",
          "repos_url": "https://api.github.com/users/futuremotiondev/repos",
          "events_url": "https://api.github.com/users/futuremotiondev/events{/privacy}",
          "received_events_url": "https://api.github.com/users/futuremotiondev/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-07-04T12:02:54Z",
        "updated_at": "2024-03-05T19:26:58Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nERR_UNKNOWN_FILE_EXTENSION\r\nUnknown file extension \".ts\"\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\nI've tried re-installing ts-node over and over again, both globally and in scope of my project. No matter what I do, I hit the `ERR_UNKNOWN_FILE_EXTENSION` wall. \r\n\r\nI've read through the documentation [here](https://github.com/TypeStrong/ts-node#err_unknown_file_extension) about the error, and none of the suggestions have fixed my problem.\r\n\r\nI've tried:\r\n\r\n`ts-node-esm ExportSVGsFromJSON.ts`\r\n`ts-node --esm ExportSVGsFromJSON.ts`\r\n\r\nI am on `v10.9.1` of TS-Node. \r\n\r\n> You have moved your project to ESM but still have a config file, such as webpack.config.ts, which must be executed as CommonJS \r\n\r\nI have not moved my project to ESM and have no config other than `tsconfig.json`.\r\n\r\nEssentially, none of the suggestions have helped.\r\n\r\nThe kicker is that I actually had this working fine a few hours ago, but now its failing after a fresh reinstall.\r\n\r\n### Expected Behavior\r\n\r\n`ts-node .\\ExportSVGsFromJSON.ts` executes my TypeScript file.\r\n\r\n\r\n### Actual Behavior\r\n\r\n`ts-node .\\ExportSVGsFromJSON.ts` throws a `ERR_UNKNOWN_FILE_EXTENSION` error. The complete error is here:\r\n\r\n```\r\n07-04 06:46:58 D:\\Dev\\Node\\Projects\\Iconify> ts-node .\\ExportSVGsFromJSON.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for D:\\Dev\\Node\\Projects\\Iconify\\ExportSVGsFromJSON.ts\r\n    at new NodeError (node:internal/errors:399:5)\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:99:9)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:139:38)\r\n    at defaultLoad (node:internal/modules/esm/load:83:20)\r\n    at DefaultModuleLoader.load (node:internal/modules/esm/loader:320:26)\r\n    at DefaultModuleLoader.moduleProvider (node:internal/modules/esm/loader:195:22)\r\n    at new ModuleJob (node:internal/modules/esm/module_job:63:26)\r\n    at DefaultModuleLoader.#createModuleJob (node:internal/modules/esm/loader:219:17)\r\n    at DefaultModuleLoader.getJobFromResolveResult (node:internal/modules/esm/loader:172:34)\r\n    at DefaultModuleLoader.getModuleJob (node:internal/modules/esm/loader:157:17) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\n`npm install @iconify/tools --save`\r\n`npm install @iconify/utils --save`\r\n`npm i @iconify/types`\r\n`npm install typescript --save-dev`\r\n`npm install -D ts-node` (or Globally, the result is the same)\r\n\r\nRun `ts-node .\\ExportSVGsFromJSON.ts`\r\n\r\n### Minimal reproduction\r\n\r\nInstall Iconify utils and tools, typescript, and ts-node. Try to run a TS script with ts-node.\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n\r\n* ts-node version: v10.9.1\r\n* node version: v20.1.0 (But I have nvm with two other versions)\r\n* TypeScript version: v5.1.6\r\n* tsconfig.json, if you're using one:\r\n\r\n```\r\n{\r\n   \"compileOnSave\": true,\r\n   \"compilerOptions\": {\r\n      \"target\": \"es6\",\r\n      \"module\": \"commonjs\",\r\n      \"declaration\": false,\r\n      \"noImplicitAny\": false,\r\n      \"moduleResolution\": \"node\",\r\n      \"preserveConstEnums\": true,\r\n      \"removeComments\": true,\r\n      \"emitDecoratorMetadata\": true,\r\n      \"experimentalDecorators\": true,\r\n      \"sourceMap\": true,\r\n\r\n\r\n      \"lib\": [\"es2015\", \"dom\"],\r\n      \"baseUrl\": \"./\",\r\n      \"typeRoots\": [\r\n          \"node_modules/@types\"\r\n      ],\r\n      \"types\": [\r\n        \"node\"\r\n      ],\r\n      \"paths\": {\r\n        \"src/*\": [\"src/*\"]\r\n      }\r\n\r\n   },\r\n\r\n   \"exclude\": [\r\n        \"node_modules\",\r\n        \"dist\",\r\n        \"build\"\r\n    ],\r\n    \"filesGlob\": [\r\n        \"./src/**/*.ts\",\r\n        \"./test/**/*.ts\",\r\n        \"./typings/index.d.ts\",\r\n        \"./custom_typings/**/*.d.ts\",\r\n        \"./node_modules/@types/**/*.d.ts\"\r\n    ]\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"type\": \"module\",\r\n  \"dependencies\": {\r\n    \"@iconify/json\": \"^2.2.85\",\r\n    \"@iconify/tools\": \"^3.0.2\",\r\n    \"@iconify/utils\": \"^2.1.7\"\r\n  },\r\n\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^20.3.3\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tslib\": \"^2.6.0\",\r\n    \"typescript\": \"^5.1.6\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: Windows 10 Pro x64 22H2\r\n* If Windows, are you using WSL or WSL2?: No\r\n\r\nI could really use some help here. I had this working nearly 2-3 hours ago and I must have messed something up. I also noticed that `@iconify/json` was updated in the last 6 hours. Maybe that has something to do with it.\r\n\r\nIf someone can point me in the right direction that would be a lifesaver.\r\n\r\nThank you.\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2033/reactions",
          "total_count": 11,
          "+1": 11,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2033/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2031",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2031/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2031/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2031/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2031",
        "id": 1766383293,
        "node_id": "I_kwDOAlTKGc5pSN69",
        "number": 2031,
        "title": "`ERR_MODULE_NOT_FOUND` `CustomError: Cannot find package` when using paths",
        "user": {
          "login": "Jazcash",
          "id": 1434248,
          "node_id": "MDQ6VXNlcjE0MzQyNDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1434248?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jazcash",
          "html_url": "https://github.com/Jazcash",
          "followers_url": "https://api.github.com/users/Jazcash/followers",
          "following_url": "https://api.github.com/users/Jazcash/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jazcash/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jazcash/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jazcash/subscriptions",
          "organizations_url": "https://api.github.com/users/Jazcash/orgs",
          "repos_url": "https://api.github.com/users/Jazcash/repos",
          "events_url": "https://api.github.com/users/Jazcash/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jazcash/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-21T00:23:01Z",
        "updated_at": "2024-04-11T11:01:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "```\r\nC:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:757\r\n  throw new ERR_MODULE_NOT_FOUND(packageName, fileURLToPath(base));\r\n        ^\r\nCustomError: Cannot find package '@/stuff' imported from C:\\Users\\me\\Desktop\\test\\src\\index.ts\r\n    at packageResolve (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:757:9)\r\n    at moduleResolve (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:798:18)\r\n    at Object.defaultResolve (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:912:11)\r\n    at C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\src\\esm.ts:218:35\r\n    at entrypointFallback (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\src\\esm.ts:168:34)\r\n    at C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\src\\esm.ts:217:14\r\n    at addShortCircuitFlag (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\src\\esm.ts:409:21)\r\n    at resolve (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\src\\esm.ts:197:12)\r\n    at resolve (C:\\Users\\me\\Desktop\\test\\node_modules\\ts-node\\src\\child\\child-loader.ts:15:39)\r\n    at nextResolve (node:internal/modules/esm/loader:163:28)\r\n```\r\n\r\nI'm importing another file with `import { test } from \"@/stuff\"`. If I don't use the `@` path alias and instead do `import { test } from \"./stuff\"` then it works fine. Previously the `tsconfig-paths` module has worked fine for me, but in this ESM project it seems to not work. Any ideas that don't require abandoning ESM and going back to CJS?\r\n\r\n### Minimal reproduction\r\nhttps://codesandbox.io/p/sandbox/fast-dew-p8vcjk?file=%2Ftsconfig.json%3A11%2C27\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: `^10.9.1`\r\n* node version: `18.16.0`\r\n* TypeScript version: `5.1.3`\r\n* tsconfig.json:\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"es2022\",\r\n    \"moduleResolution\": \"Node\",\r\n    \"noEmit\": true,\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@/*\": [\"./src/*\"]\r\n    }\r\n  },\r\n  \"include\": [\"src/**/*\"],\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n    \"require\": [\"tsconfig-paths/register\"]\r\n  }\r\n}\r\n```\r\n* package.json:\r\n```json\r\n{\r\n  \"name\": \"test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"build\": \"ts-node src/index.ts\",\r\n    \"start\": \"\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"typescript\": \"^5.1.3\"\r\n  }\r\n}\r\n```\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2031/reactions",
          "total_count": 7,
          "+1": 7,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2031/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2026",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2026/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2026/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2026/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2026",
        "id": 1721961585,
        "node_id": "I_kwDOAlTKGc5mowxx",
        "number": 2026,
        "title": "Node 20: errors produced by `reportTSError` are not serialised correctly when using ESM loader",
        "user": {
          "login": "danrr",
          "id": 3409865,
          "node_id": "MDQ6VXNlcjM0MDk4NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3409865?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/danrr",
          "html_url": "https://github.com/danrr",
          "followers_url": "https://api.github.com/users/danrr/followers",
          "following_url": "https://api.github.com/users/danrr/following{/other_user}",
          "gists_url": "https://api.github.com/users/danrr/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/danrr/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/danrr/subscriptions",
          "organizations_url": "https://api.github.com/users/danrr/orgs",
          "repos_url": "https://api.github.com/users/danrr/repos",
          "events_url": "https://api.github.com/users/danrr/events{/privacy}",
          "received_events_url": "https://api.github.com/users/danrr/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 31,
        "created_at": "2023-05-23T12:21:15Z",
        "updated_at": "2024-08-29T23:00:08Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nNode 20, reportTSError, error\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\nWhen using the `ts-node/esm` loader with Node 18, TS errors are reported correctly. The file below when run with `node --experimental-loader ts-node/esm test.ts`\r\n\r\n```ts\r\nconst a = (b: 1 | 2) => b + 1\r\n\r\nconsole.log(a(3))\r\n```\r\nproduces the following correct error:\r\n\r\n```\r\nTSError: ⨯ Unable to compile TypeScript:\r\ntest.ts:3:15 - error TS2345: Argument of type '3' is not assignable to parameter of type '1 | 2'.\r\n\r\n3 console.log(a(3))\r\n<stack trace>\r\n  diagnosticCodes: [ 2345 ]\r\n\r\n````\r\n\r\n### Actual Behavior\r\n\r\nOn Node 20, the error is serialised to only retain `diagnosticCodes` and no other info\r\n```\r\nnode:internal/process/esm_loader:42\r\n      internalBinding('errors').triggerUncaughtException(\r\n                                ^\r\n{ diagnosticCodes: [ 2345 ] }\r\n```\r\n\r\nLikely related to https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V20.md#custom-esm-loader-hooks-run-on-dedicated-thread\r\n\r\n### Steps to reproduce the problem\r\nRun command above on Node 20\r\n\r\n\r\n### Minimal reproduction\r\nhttps://github.com/TypeStrong/ts-node-repros/pull/33\r\n\r\nhttps://github.com/TypeStrong/ts-node-repros/actions/runs/5057165129/jobs/9075579140\r\n\r\n### Specifications\r\n* ts-node v10.9.1\r\n* node v18.16.0\r\n* TS compiler v5.0.4\r\n \r\nand \r\n\r\n* ts-node v10.9.1\r\n* node v20.2.0\r\n* TS compiler v5.0.4\r\n\r\n* package.json:\r\n```\r\n{\r\n  \"type\": \"module\",\r\n}\r\n```\r\n* Operating system and version: MacOS 13.4\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2026/reactions",
          "total_count": 31,
          "+1": 31,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2026/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2023",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2023/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2023/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2023/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2023",
        "id": 1713561176,
        "node_id": "I_kwDOAlTKGc5mIt5Y",
        "number": 2023,
        "title": "ts-node should take into account tsconfig paths in esm mode and keep but transpile imports",
        "user": {
          "login": "a-x-",
          "id": 6201068,
          "node_id": "MDQ6VXNlcjYyMDEwNjg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6201068?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/a-x-",
          "html_url": "https://github.com/a-x-",
          "followers_url": "https://api.github.com/users/a-x-/followers",
          "following_url": "https://api.github.com/users/a-x-/following{/other_user}",
          "gists_url": "https://api.github.com/users/a-x-/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/a-x-/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/a-x-/subscriptions",
          "organizations_url": "https://api.github.com/users/a-x-/orgs",
          "repos_url": "https://api.github.com/users/a-x-/repos",
          "events_url": "https://api.github.com/users/a-x-/events{/privacy}",
          "received_events_url": "https://api.github.com/users/a-x-/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-05-17T10:06:20Z",
        "updated_at": "2024-08-22T05:37:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n- node-ts and tsconfig paths\r\n- tsconfig paths\r\n\r\nwhat I found:\r\n- https://github.com/TypeStrong/ts-node/issues/1948\r\n- https://stackoverflow.com/questions/72549407/how-to-use-tsconfig-paths-with-ts-node\r\n- https://typestrong.org/ts-node/docs/imports\r\n\r\n### Expected Behavior\r\nTake tsconfig.json paths into account even in esm mode. Keep imports, but transpile paths.\r\n\r\n\r\n### Actual Behavior\r\nimports keeping as is in esm mode. One good thing I have: VSCode have not TS errors in this setup now, it was hard to accomplish it too.\r\n\r\n\r\n### Steps to reproduce the problem\r\n1. create tsconfig.json with at least `{ \"compilerOptions\": { \"paths\": { \"foo\": \"src/bar.ts\" } } }`\r\n2. run `ts-node-esm --project tsconfig.json src/index.ts`\r\n3. write src/index.ts like `import foo from 'foo'` and create some src/bar.ts file with default export\r\n\r\n\r\n### Minimal reproduction\r\n\r\nwill be later\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n- ts-node v10.9.1\r\n- node v18.16.0\r\n- compiler v5.0.4\r\n\r\nI have complex monorepo setup with 3 tsconfigs and many other things, I'll show later minimal repo if it really needed in this case...  It's vitejs front and ts-node BFF for it I trying to implement now with shared utils.\r\n\r\n<!--\r\ntsconfig.json:\r\n```\r\n{}\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n-->\r\n\r\n* Operating system and version: macOS\r\n\r\n\r\n<details><summary>server/tsconfig.json</summary>\r\n\r\n```js\r\n{\r\n  \"compilerOptions\": {\r\n    \"composite\": true,\r\n\r\n    // enable latest features\r\n    \"lib\": [\"esnext\"],\r\n    \"module\": \"esnext\",\r\n    \"target\": \"esnext\",\r\n\r\n    // if TS 5.x+\r\n    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html#--moduleresolution-bundler\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"noEmit\": true,\r\n    \"moduleDetection\": \"force\",\r\n\r\n    // \"jsx\": \"react-jsx\", // support JSX\r\n    \"allowJs\": true, // allow importing `.js` from `.ts`\r\n    \"esModuleInterop\": true, // allow default imports for CommonJS modules\r\n\r\n    // best practices\r\n    \"strict\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"skipLibCheck\": true,\r\n\r\n    // monorepo\r\n    \"paths\": {\r\n      \"@date-fns\": [\"../shared/utils/date.server.ts\"],\r\n      \"shared/*\": [\"../shared/*\"],\r\n      \"@front/*\": [\"../src/*\"]\r\n    },\r\n    \"baseUrl\": \".\",\r\n    \"plugins\": [\r\n      { \"name\": \"typescript-styled-plugin\", \"validate\": false },\r\n      // Fix import absolute paths\r\n      { \"transform\": \"typescript-transform-paths\", \"useRootDirs\": true }, // Transform paths in output .js files\r\n      { \"transform\": \"typescript-transform-paths\", \"useRootDirs\": true, \"afterDeclarations\": true } // Transform paths in output .d.ts files (Include this line if you output declarations files)\r\n    ],\r\n    \"rootDirs\": [\".\", \"../src\", \"../shared\"],\r\n\r\n    // other\r\n    \"types\": [\"jest\"],\r\n    \"resolveJsonModule\": true\r\n  },\r\n  \"ts-node\": {\r\n    // It is faster to skip typechecking.\r\n    // Remove if you want ts-node to do typechecking.\r\n    \"transpileOnly\": true,\r\n    \"esm\": true, // import/export instead of require/module.exports\r\n    \"experimentalSpecifierResolution\": \"node\", // omit .ts in imports\r\n    \"require\": [\"typescript-transform-paths/register\", \"tsconfig-paths/register\"]\r\n  },\r\n  \"include\": [\r\n    \"./**/*\",\r\n    \"./.eslintrc.cjs\",\r\n    \"../jest.config.ts\",\r\n    // Don't include: \"../src/utils/**/*\", As it have browser specific, like utils/hooks.ts\r\n    \"../src/**/types.ts\",\r\n    \"../src/**/config.ts\",\r\n    \"../src/**/*.types.ts\",\r\n    \"../src/**/*.d.ts\",\r\n    \"../shared/**/*\"\r\n  ],\r\n  \"references\": [{ \"path\": \"../shared/tsconfig.json\" }, { \"path\": \"../src/tsconfig.json\" }]\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n<details><summary>shared/tsconfig.json</summary>\r\n\r\n```js\r\n{\r\n  \"compilerOptions\": {\r\n    \"composite\": true,\r\n\r\n    // enable latest features\r\n    \"lib\": [\"esnext\"],\r\n    \"module\": \"esnext\",\r\n    \"target\": \"esnext\",\r\n\r\n    // if TS 5.x+\r\n    \"moduleResolution\": \"bundler\",\r\n    // \"allowImportingTsExtensions\": true,\r\n    // \"noEmit\": true,\r\n    \"moduleDetection\": \"force\",\r\n\r\n    // \"jsx\": \"react-jsx\", // support JSX\r\n    \"allowJs\": true,\r\n    \"esModuleInterop\": true,\r\n\r\n    // best practices\r\n    \"strict\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"skipLibCheck\": true,\r\n\r\n    \"plugins\": [\r\n      { \"name\": \"typescript-styled-plugin\", \"validate\": false },\r\n      // Fix import absolute paths\r\n      { \"transform\": \"typescript-transform-paths\", \"useRootDirs\": true }, // Transform paths in output .js files\r\n      { \"transform\": \"typescript-transform-paths\", \"useRootDirs\": true, \"afterDeclarations\": true } // Transform paths in output .d.ts files (Include this line if you output declarations files)\r\n    ],\r\n    \"types\": [\"jest\"],\r\n    \"resolveJsonModule\": true,\r\n    \"paths\": {\r\n      \"@date-fns\": [\"./utils/date.server.ts\", \"./utils/date.client.ts\"]\r\n    }\r\n  },\r\n  \"ts-node\": {\r\n    \"transpileOnly\": true,\r\n    \"require\": [\"typescript-transform-paths/register\", \"tsconfig-paths/register\"]\r\n  },\r\n  \"include\": [\"./**/*\"],\r\n  \"exclude\": [\"./.eslintrc.cjs\"]\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n<details><summary>package.json (root)</summary>\r\n\r\n```js\r\n{\r\n  \"name\": \"rbi-ips-toro-ui\",\r\n  \"private\": true,\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"dev\": \"yarn install && scripts/dev\",\r\n    \"prod-server\": \"cd server && yarn run start\",\r\n    \"build\": \"echo type check... && tsc && echo build front with vite... && vite build\",\r\n    \"lint\": \"eslint src server shared\",\r\n    \"mocks\": \"nodemon ./dev-server/devServer.js\",\r\n    \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@vitejs/plugin-react\": \"^3.1.0\"\r\n    \"date-fns\": \"^2.29.3\",\r\n    \"date-fns-tz\": \"^2.0.0\",\r\n    \"lodash-es\": \"^4.17.21\",\r\n    \"react\": \"17.0.2\",\r\n    \"react-dom\": \"17.0.2\",\r\n    \"react-router\": \"^6.2.1\",\r\n    \"react-router-dom\": \"^6.2.1\",\r\n    // some deps are omitted \r\n  },\r\n  \"devDependencies\": {\r\n    \"@jest/globals\": \"^29.5.0\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^5.59.1\",\r\n    \"@typescript-eslint/parser\": \"^5.59.1\",\r\n    \"esbuild\": \"^0.17.10\",\r\n    \"esbuild-css-modules-plugin\": \"^2.7.1\",\r\n    \"eslint\": \"^8.39.0\",\r\n    \"eslint-config-react-app\": \"^7.0.1\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"eslint-plugin-unused-imports\": \"^2.0.0\",\r\n    \"jest\": \"^29.5.0\",\r\n    \"jest-environment-jsdom\": \"^29.5.0\",\r\n    \"ts-jest\": \"^29.1.0\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"typescript\": \"^5.0.4\",\r\n    \"typescript-plugin-css-modules\": \"^3.4.0\",\r\n    \"typescript-plugin-styled-components\": \"^2.0.0\",\r\n    \"typescript-transform-paths\": \"^3.4.6\",\r\n    \"vite\": \"^4.1.4\",\r\n    \"vite-jest\": \"^0.1.4\"\r\n    // some deps are omitted \r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n<details><summary>shared/package.json</summary>\r\n\r\n```js\r\n{\r\n  \"name\": \"shared\",\r\n  \"type\": \"module\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"index.js\",\r\n  \"license\": \"ICS\",\r\n  \"private\": true\r\n}\r\n```\r\n\r\n</details>\r\n\r\nsrc: package.json and tsconfig.json currently are not interesting as they using for client-side/front\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2023/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2023/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2022",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2022/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2022/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2022/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2022",
        "id": 1711077699,
        "node_id": "I_kwDOAlTKGc5l_PlD",
        "number": 2022,
        "title": "It would be better if --esm is automatically specified if the file extension is `.mts`",
        "user": {
          "login": "gfx",
          "id": 101800,
          "node_id": "MDQ6VXNlcjEwMTgwMA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/101800?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gfx",
          "html_url": "https://github.com/gfx",
          "followers_url": "https://api.github.com/users/gfx/followers",
          "following_url": "https://api.github.com/users/gfx/following{/other_user}",
          "gists_url": "https://api.github.com/users/gfx/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gfx/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gfx/subscriptions",
          "organizations_url": "https://api.github.com/users/gfx/orgs",
          "repos_url": "https://api.github.com/users/gfx/repos",
          "events_url": "https://api.github.com/users/gfx/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gfx/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-16T01:47:05Z",
        "updated_at": "2023-05-16T01:47:05Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\n`ts-node` requires `--esm` if the target file is ES modules, and the name of the file ends with `.mts`, it must be an ES module.\r\n\r\nSo I'd like to do `ts-node foo.mts` without `--esm` option.\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2022/reactions",
          "total_count": 2,
          "+1": 2,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2022/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2020",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2020/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2020/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2020/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2020",
        "id": 1708564152,
        "node_id": "I_kwDOAlTKGc5l1p64",
        "number": 2020,
        "title": "Types for esm loader hooks from `@types/node`",
        "user": {
          "login": "Semigradsky",
          "id": 1198848,
          "node_id": "MDQ6VXNlcjExOTg4NDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1198848?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Semigradsky",
          "html_url": "https://github.com/Semigradsky",
          "followers_url": "https://api.github.com/users/Semigradsky/followers",
          "following_url": "https://api.github.com/users/Semigradsky/following{/other_user}",
          "gists_url": "https://api.github.com/users/Semigradsky/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Semigradsky/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Semigradsky/subscriptions",
          "organizations_url": "https://api.github.com/users/Semigradsky/orgs",
          "repos_url": "https://api.github.com/users/Semigradsky/repos",
          "events_url": "https://api.github.com/users/Semigradsky/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Semigradsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-13T11:19:43Z",
        "updated_at": "2023-05-13T11:19:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi! I am trying to add types for esm loader hooks in `@types/node`: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/65490\r\n\r\nWould be great if you can try them with your code and provide some feedback.\r\nThanks!",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2020/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2020/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2008",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2008/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2008/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2008/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2008",
        "id": 1697379995,
        "node_id": "I_kwDOAlTKGc5lK_ab",
        "number": 2008,
        "title": "`ts-node/esm` shortcircuits and does not allow downstream loaders to transform the result",
        "user": {
          "login": "giltayar",
          "id": 403268,
          "node_id": "MDQ6VXNlcjQwMzI2OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/403268?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/giltayar",
          "html_url": "https://github.com/giltayar",
          "followers_url": "https://api.github.com/users/giltayar/followers",
          "following_url": "https://api.github.com/users/giltayar/following{/other_user}",
          "gists_url": "https://api.github.com/users/giltayar/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/giltayar/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/giltayar/subscriptions",
          "organizations_url": "https://api.github.com/users/giltayar/orgs",
          "repos_url": "https://api.github.com/users/giltayar/repos",
          "events_url": "https://api.github.com/users/giltayar/events{/privacy}",
          "received_events_url": "https://api.github.com/users/giltayar/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-05T10:27:30Z",
        "updated_at": "2023-05-07T23:28:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nshort circuit, short-circuit, shortcircuit, essm, loader\r\n\r\n### Expected Behavior\r\n\r\nThe loader resolver should always pass the resolved URL to the next resolver (assuming it didn't already), without a shortcircuit. The loader should never shortcircuit anyway...\r\n\r\n### Actual Behavior\r\n\r\nThe lresolver/oader doesnot shortcircuit _ever_ (I think...) and pass on its stuff to other loaders.\r\n\r\n### Steps to reproduce the problem\r\n\r\nThe repo https://github.com/codan84/jest-ts-experiments/tree/ava-testdouble uses Ava, TS, and TestDouble, to write a simple test. So it uses two loaders: `ts-node/esm` and `testdouble`.\r\n\r\nWhen adding `NODE_OPTIONS='--loader ts-node/esm --loader testdouble` I noticed that `ts-node/esm` was shortciruiting the resolution and so the `testdouble` resolver did not get a change to _add_ some query parameters to the URL. When debugging this, I noticed that the `load` also shortcircuits. I also noticed that it does shortcircuiting due to \"laziness\" ([your words, not mine!](https://github.com/TypeStrong/ts-node/blob/71dcfd7b813a4178d89562bb4c28d7d6579fae4f/src/esm.ts#L415)).\r\n\r\n1. clone <https://github.com/codan84/jest-ts-experiments/tree/9dd8449734a2d08fd13dd1fc6b7dbb1459a1cdce>\r\n1. `npm install`\r\n1. Replace the `test` script to be `NODE_OPTIONS='--no-warnings --loader=testdouble --loader=ts-node/esm' ava test/**/*.test.ts`.\r\n1. In `index.test.ts` replace `td.replaceEsm('../src/want-to-be-mocked.js')` with `td.replaceEsm('../src/want-to-be-mocked.ts')`.\r\n1. Run `npm test`\r\n\r\nYou will see the test succeed, whereas it should have failed. The reason it failed is that the mocking did not happen because resolution shortcircuited `testdouble`.\r\n\r\n\r\n### Minimal reproduction\r\n\r\nSee <https://github.com/codan84/jest-ts-experiments/tree/9dd8449734a2d08fd13dd1fc6b7dbb1459a1cdce> and above\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version:\r\n* node version: 10.9.1\r\n* TypeScript version: 4.9.5\r\n* tsconfig.json, if you're using one:\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"moduleResolution\": \"NodeNext\",\r\n    \"module\": \"ESNext\",\r\n    \"esModuleInterop\": true,\r\n    \"strict\": true,\r\n    \"rootDir\": \"./src\",\r\n    \"outDir\": \"./dist\",\r\n    \"skipLibCheck\": true\r\n  },\r\n  \"exclude\": [\"test/**\"]\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"jest-ts-test\",\r\n  \"packageManager\": \"yarn@3.5.0\",\r\n  \"main\": \"dist/index.js\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"test\": \"NODE_OPTIONS='--no-warnings --loader=testdouble --loader=ts-node/esm' ava test/**/*.test.ts\",\r\n    \"build\": \"rm -rf dist && tsc\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^18.16.3\",\r\n    \"ava\": \"^5.2.0\",\r\n    \"testdouble\": \"^3.17.2\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^4.3.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"image-type\": \"^5.2.0\"\r\n  },\r\n  \"ava\": {\r\n    \"extensions\": {\r\n      \"ts\": \"module\"\r\n    }\r\n  }\r\n}\r\n```\r\n* Operating system and version: Windows 11\r\n* If Windows, are you using WSL or WSL2?: Yes, Ubuntu\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2008/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2008/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2006",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2006/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2006/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2006/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2006",
        "id": 1695516040,
        "node_id": "I_kwDOAlTKGc5lD4WI",
        "number": 2006,
        "title": "Incorrect sourcemapping in files with newlines in Node 20.1",
        "user": {
          "login": "richardsimko",
          "id": 1245031,
          "node_id": "MDQ6VXNlcjEyNDUwMzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1245031?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/richardsimko",
          "html_url": "https://github.com/richardsimko",
          "followers_url": "https://api.github.com/users/richardsimko/followers",
          "following_url": "https://api.github.com/users/richardsimko/following{/other_user}",
          "gists_url": "https://api.github.com/users/richardsimko/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/richardsimko/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/richardsimko/subscriptions",
          "organizations_url": "https://api.github.com/users/richardsimko/orgs",
          "repos_url": "https://api.github.com/users/richardsimko/repos",
          "events_url": "https://api.github.com/users/richardsimko/events{/privacy}",
          "received_events_url": "https://api.github.com/users/richardsimko/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-04T08:30:52Z",
        "updated_at": "2023-06-15T04:43:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nsourcemap, source map, 20\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\nSource maps map the correct line even if the file has a newline (Which gets removed by tsc)\r\n\r\n### Actual Behavior\r\nOn Node 20.1 the mapping excludes the newlines.\r\n\r\n\r\n### Steps to reproduce the problem\r\nRun the [repro repo](https://github.com/richardsimko/ts-node-sourcemap-bug) `yarn run test` on Node 20.1 and Node 19 and observe the difference in stack locations for the thrown error.\r\n\r\nNode 20.1:\r\n```\r\nError: Error\r\n    at file:///Users/richard/git/tsnodesourcemaptest/index.ts:7:7\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:192:25)\r\n```\r\n\r\nNode 19:\r\n```\r\nError: Error\r\n    at file:///Users/richard/git/tsnodesourcemaptest/index.ts:12:7\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:193:25)\r\n```\r\n\r\nThere is also a `test-js` script included which will compile and run the output JS file with `--enable-source-maps`. In this case the source map is correct on both versions.\r\n\r\n\r\n### Minimal reproduction\r\nhttps://github.com/richardsimko/ts-node-sourcemap-bug\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: 20.1\r\n* TypeScript version: 5.0.4\r\n* tsconfig.json, if you're using one:\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \"./build\",\r\n    \"target\": \"ES2022\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"sourceMap\": true\r\n  },\r\n  \"ts-node\": {\r\n    \"files\": true,\r\n    \"swc\": true\r\n  },\r\n  \"include\": [\"**/*.ts\"]\r\n}\r\n```\r\n* package.json:\r\n```json\r\n{\r\n  \"name\": \"tsnodesourcemaptest\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"test\": \"node --loader ts-node/esm index.ts\",\r\n    \"test-js\": \"tsc && node --enable-source-maps build/index.js\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"@swc/core\": \"^1.3.56\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^5.0.4\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: macOS 13.3\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2006/reactions",
          "total_count": 7,
          "+1": 7,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2006/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2005",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2005/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2005/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2005/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2005",
        "id": 1694278237,
        "node_id": "I_kwDOAlTKGc5k_KJd",
        "number": 2005,
        "title": "Broken REPL with ts-node and ES modules",
        "user": {
          "login": "kasi1999999",
          "id": 3922691,
          "node_id": "MDQ6VXNlcjM5MjI2OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3922691?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kasi1999999",
          "html_url": "https://github.com/kasi1999999",
          "followers_url": "https://api.github.com/users/kasi1999999/followers",
          "following_url": "https://api.github.com/users/kasi1999999/following{/other_user}",
          "gists_url": "https://api.github.com/users/kasi1999999/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/kasi1999999/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/kasi1999999/subscriptions",
          "organizations_url": "https://api.github.com/users/kasi1999999/orgs",
          "repos_url": "https://api.github.com/users/kasi1999999/repos",
          "events_url": "https://api.github.com/users/kasi1999999/events{/privacy}",
          "received_events_url": "https://api.github.com/users/kasi1999999/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-03T15:12:15Z",
        "updated_at": "2024-06-05T22:02:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nts-node esm `\"Uncaught SyntaxError: Unexpected token 'export'\"`\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\nREPL should work in package - ` \"type\": \"module\",`\r\n\r\n\r\n### Actual Behavior\r\nI see last release v10.9.1 many months ago (Jul 14, 2022). Was this fixed? Why do I miss more recent releases? When this fix will be released? I read https://github.com/TypeStrong/ts-node/issues/1924, but still unable to get it work.\r\nI tried to use dependency `\"ts-node\": \"github:TypeStrong/ts-node#main\",`,  but still getting:\r\n```\r\n$ npx ts-node --esm\r\n> \r\n/<company>/sandbox/ts-node-sample/<repl>.ts:2\r\nexport {};\r\n^^^^^^\r\n\r\nUncaught SyntaxError: Unexpected token 'export'\r\n```\r\n\r\n### Steps to reproduce the problem\r\n```\r\n:~/workspace/<company>/sandbox/ts-node-sample$ fnm current\r\nv18.16.0\r\n:~/workspace/<company>/sandbox/ts-node-sample$ npx ts-node --esm\r\n> \r\n/<company>/sandbox/ts-node-sample/<repl>.ts:2\r\nexport {};\r\n^^^^^^\r\n\r\nUncaught SyntaxError: Unexpected token 'export'\r\n> import(\"./src/hello.js\").then(m => console.log(typeof m))\r\nPromise {\r\n  <pending>,\r\n  [Symbol(async_id_symbol)]: 40,\r\n  [Symbol(trigger_async_id_symbol)]: 39\r\n}\r\n> Uncaught:\r\nTypeError [ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING]: A dynamic import callback was not specified.\r\n    /node-versions/v16.13.2/installation/lib/node_modules/ts-node/src/repl.ts:639:28)\r\n    /node-versions/v16.13.2/installation/lib/node_modules/ts-node/src/repl.ts:673:19)\r\n    at Script.runInThisContext (node:vm:129:12)\r\n    /<company>/sandbox/ts-node-sample/<repl>.ts:1:11\r\n    at importModuleDynamicallyCallback (node:internal/process/esm_loader:39:9)\r\n    at new NodeError (node:internal/errors:399:5)\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:490:5) {\r\n  code: 'ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING'\r\n}\r\n> import {hello} from \"./src/hello.js\";\r\nundefined\r\n> hello\r\n/<company>/sandbox/ts-node-sample/<repl>.ts:1\r\nimport { hello } from \"./src/hello.js\";\r\n^^^^^^\r\n\r\nUncaught:\r\nSyntaxError: Cannot use import statement inside the Node.js REPL, alternatively use dynamic import\r\n> \r\n:~/workspace/<company>/sandbox/ts-node-sample$ cat src/run.ts && echo\r\nimport {hello} from \"./hello.js\";\r\n\r\nconsole.log(\"Hello from run.ts\");\r\nhello();\r\n:~/workspace/<company>/sandbox/ts-node-sample$ npx ts-node --esm src/run.ts \r\nHello from run.ts\r\nhello world from hello exported function\r\n```\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: TypeStrong/ts-node#main\r\n* node version: v18.16.0\r\n* TypeScript version: 5.0.4\r\n* tsconfig.json\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \"dist\",\r\n    \"declaration\": true,\r\n    \"sourceMap\": true,\r\n    \"target\": \"esnext\",\r\n    \"module\": \"NodeNext\",\r\n    \"strict\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n  },\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n  },\r\n  \"include\": [\r\n    \"src\",\r\n    \"types\",\r\n    \"test\"\r\n  ]\r\n}\r\n\r\n```\r\n\r\n* package.json:\r\n```\r\n  \"name\": \"my-package\",\r\n  \"type\": \"module\",\r\n  \"devDependencies\": {\r\n    \"ts-node\": \"github:TypeStrong/ts-node#main\",\r\n    \"tslib\": \"^2.5.0\",\r\n    \"typescript\": \"^5.0.4\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n* Operating system and version: Ubuntu 22.04\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2005/reactions",
          "total_count": 7,
          "+1": 7,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2005/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2001",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2001/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2001/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2001/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2001",
        "id": 1686291798,
        "node_id": "I_kwDOAlTKGc5kgsVW",
        "number": 2001,
        "title": "REPL: Cannot exit infinite loop with Ctrl+C",
        "user": {
          "login": "martian17",
          "id": 19868746,
          "node_id": "MDQ6VXNlcjE5ODY4NzQ2",
          "avatar_url": "https://avatars.githubusercontent.com/u/19868746?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/martian17",
          "html_url": "https://github.com/martian17",
          "followers_url": "https://api.github.com/users/martian17/followers",
          "following_url": "https://api.github.com/users/martian17/following{/other_user}",
          "gists_url": "https://api.github.com/users/martian17/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/martian17/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/martian17/subscriptions",
          "organizations_url": "https://api.github.com/users/martian17/orgs",
          "repos_url": "https://api.github.com/users/martian17/repos",
          "events_url": "https://api.github.com/users/martian17/events{/privacy}",
          "received_events_url": "https://api.github.com/users/martian17/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-04-27T07:38:03Z",
        "updated_at": "2023-08-05T12:36:05Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\ninfinite loop\r\nbreakEvalOnSigint\r\nbreak\r\n\r\n\r\n### Expected Behavior\r\nAs soon as Ctrl+C is pressed, eval should throw \"Uncaught Error: Script execution was interrupted by `SIGINT`\", as in default node.js repl.\r\n\r\n\r\n### Actual Behavior\r\nLoops indefinitely. \r\n\r\n\r\n### Steps to reproduce the problem\r\nOpen ts-node repl with `ts-node`, and type `while(1){}` and hit enter.\r\n\r\n\r\n### Minimal reproduction\r\n```\r\n$ ts-node\r\n> while(1){}\r\n// cannot exit\r\n```\r\n\r\n\r\n### Specifications\r\n* ts-node version: v10.9.1\r\n* node version: v18.14.1\r\n* TypeScript version: v5.0.4\r\n* tsconfig.json, if you're using one: N/A\r\n* package.json: N/A\r\n* Operating system and version: Xubuntu 22.04.2 LTS x86_64\r\n* If Windows, are you using WSL or WSL2?: N/A\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2001/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2001/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2000",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2000/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2000/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2000/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/2000",
        "id": 1680389552,
        "node_id": "I_kwDOAlTKGc5kKLWw",
        "number": 2000,
        "title": "[Typescript 5.0] TypeError: value.replace is not a function",
        "user": {
          "login": "loynoir",
          "id": 78727408,
          "node_id": "MDQ6VXNlcjc4NzI3NDA4",
          "avatar_url": "https://avatars.githubusercontent.com/u/78727408?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/loynoir",
          "html_url": "https://github.com/loynoir",
          "followers_url": "https://api.github.com/users/loynoir/followers",
          "following_url": "https://api.github.com/users/loynoir/following{/other_user}",
          "gists_url": "https://api.github.com/users/loynoir/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/loynoir/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/loynoir/subscriptions",
          "organizations_url": "https://api.github.com/users/loynoir/orgs",
          "repos_url": "https://api.github.com/users/loynoir/repos",
          "events_url": "https://api.github.com/users/loynoir/events{/privacy}",
          "received_events_url": "https://api.github.com/users/loynoir/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 45,
        "created_at": "2023-04-24T03:33:04Z",
        "updated_at": "2024-04-21T22:18:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n- Typescript 5.0\r\n- tsconfig extends array\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\nNo error.\r\n\r\n### Actual Behavior\r\n```\r\n$ npm exec -- ts-node --esm --swc ./path/to/reproduce.mts\r\n/path/to/node_modules/ts-node/dist/util.js:62\r\n    return value.replace(backslashRegExp, directorySeparator);\r\n                 ^\r\n\r\nTypeError: value.replace is not a function\r\n    at normalizeSlashes (/path/to/node_modules/ts-node/dist/util.js:62:18)\r\n    at Object.getExtendsConfigPath (/path/to/node_modules/ts-node/dist/ts-internals.js:24:54)\r\n    at readConfig (/path/to/node_modules/ts-node/dist/configuration.js:127:64)\r\n    at findAndReadConfig (/path/to/node_modules/ts-node/dist/configuration.js:50:84)\r\n    at phase3 (/path/to/node_modules/ts-node/dist/bin.js:254:67)\r\n    at bootstrap (/path/to/node_modules/ts-node/dist/bin.js:47:30)\r\n    at Object.<anonymous> (/path/to/node_modules/ts-node/dist/child/child-entrypoint.js:23:21)\r\n    at Module._compile (node:internal/modules/cjs/loader:1254:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1308:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1117:32)\r\n\r\nNode.js v18.15.0\r\n```\r\n\r\n### Debug\r\n```js\r\nfunction normalizeSlashes(value) {console.warn({value})\r\n    return value.replace(backslashRegExp, directorySeparator);\r\n}\r\n```\r\n\r\nerrrlog\r\n```js\r\n{\r\n  value: [ '@tsconfig/strictest/tsconfig', '@tsconfig/node18/tsconfig' ]\r\n}\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\n\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: latest\r\n* node version: v18.15.0\r\n* TypeScript version: latest\r\n* tsconfig.json, if you're using one:\r\n```\r\n  \"extends\": [\r\n    \"@tsconfig/strictest/tsconfig\",\r\n    \"@tsconfig/node18/tsconfig\"\r\n  ],\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n* Operating system and version:\r\n* If Windows, are you using WSL or WSL2?:\r\n\r\n\r\n### Additional\r\n\r\nhttps://www.npmjs.com/package/@tsconfig/node18-strictest-esm\r\n\r\n> This package has been deprecated\r\n> Author message:\r\n> TypeScript 5.0 supports combining TSConfigs using array syntax in extends\r\n\r\nhttps://github.com/tsconfig/bases#what-about-combined-configs\r\n\r\n> Because of previous limitations in the config extension system of TypeScript, this repo used to provide combined configs from a few common bases (like Node + ESM, Node + Strictest and so on).\r\n\r\n> This issue is now moot since TypeScript v5.0.0, which provides the [ability to extend from multiple configs at once](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-rc/#supporting-multiple-configuration-files-in-extends). For instance, if you want to start from a Node 18 + Strictest base config, you can install both @tsconfig/node18 and @tsconfig/strictest packages and extend those configs like so:\r\n\r\n```jsonc\r\n// tsconfig.json\r\n{\r\n  \"extends\": [\"@tsconfig/strictest/tsconfig\", \"@tsconfig/node18/tsconfig\"]\r\n}\r\n```\r\n\r\nhttps://devblogs.microsoft.com/typescript/announcing-typescript-5-0-rc/#supporting-multiple-configuration-files-in-extends\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2000/reactions",
          "total_count": 85,
          "+1": 76,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 9
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/2000/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1999",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1999/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1999/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1999/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1999",
        "id": 1679989436,
        "node_id": "I_kwDOAlTKGc5kIpq8",
        "number": 1999,
        "title": "can we get an api to specify the esm loader. ",
        "user": {
          "login": "wibed",
          "id": 69305089,
          "node_id": "MDQ6VXNlcjY5MzA1MDg5",
          "avatar_url": "https://avatars.githubusercontent.com/u/69305089?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/wibed",
          "html_url": "https://github.com/wibed",
          "followers_url": "https://api.github.com/users/wibed/followers",
          "following_url": "https://api.github.com/users/wibed/following{/other_user}",
          "gists_url": "https://api.github.com/users/wibed/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/wibed/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/wibed/subscriptions",
          "organizations_url": "https://api.github.com/users/wibed/orgs",
          "repos_url": "https://api.github.com/users/wibed/repos",
          "events_url": "https://api.github.com/users/wibed/events{/privacy}",
          "received_events_url": "https://api.github.com/users/wibed/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-04-23T11:23:46Z",
        "updated_at": "2023-04-28T17:58:04Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "to use esm my package.json looks something like this:\r\n```json\r\n{\r\n    \"start\": \"npm run clean && cross-env NODE_ENV=development NODE_OPTIONS=\\\"--loader=ts-node/esm --trace-warnings\\\" webpack serve --mode=development --config webpack.config.ts\",\r\n}\r\n```\r\n\r\neven though i set esm to be true in ts-config\r\n```json\r\n{\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n    \"files\": true,\r\n    \"experimentalSpecifierResolution\": \"node\",\r\n  },\r\n}\r\n```\r\n\r\ni dont know why this is necessary. i know i cannot set corresponding loader in any config and had to resort to set it within `NODE_OPTIONS`.\r\n\r\nnew to transpilers and the world around it, this was a surprisingly painful experience.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1999/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1999/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1997",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1997/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1997/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1997/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1997",
        "id": 1675909705,
        "node_id": "I_kwDOAlTKGc5j5FpJ",
        "number": 1997,
        "title": "ERR_UNKNOWN_FILE_EXTENSION on Node v20.0.0",
        "user": {
          "login": "septs",
          "id": 3842474,
          "node_id": "MDQ6VXNlcjM4NDI0NzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3842474?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/septs",
          "html_url": "https://github.com/septs",
          "followers_url": "https://api.github.com/users/septs/followers",
          "following_url": "https://api.github.com/users/septs/following{/other_user}",
          "gists_url": "https://api.github.com/users/septs/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/septs/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/septs/subscriptions",
          "organizations_url": "https://api.github.com/users/septs/orgs",
          "repos_url": "https://api.github.com/users/septs/repos",
          "events_url": "https://api.github.com/users/septs/events{/privacy}",
          "received_events_url": "https://api.github.com/users/septs/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 118,
        "created_at": "2023-04-20T02:55:22Z",
        "updated_at": "2024-06-21T15:03:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nNode, ERR_UNKNOWN_FILE_EXTENSION\r\n\r\n### Expected Behavior\r\n\r\nFix it\r\n\r\n### Actual Behavior\r\n\r\nsee Minimal reproduction\r\n\r\n### Steps to reproduce the problem\r\n\r\nsee Minimal reproduction\r\n\r\n### Minimal reproduction\r\n\r\n\r\n```console\r\n$ cat example.ts\r\nconsole.log('example')\r\n$ cat tsconfig.json\r\n{ \"ts-node\": { \"esm\": true } }\r\n$ npx ts-node example.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /Users/septs/Projects/example/example.ts\r\n    at new NodeError (node:internal/errors:399:5)\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:99:9)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:139:38)\r\n    at defaultLoad (node:internal/modules/esm/load:83:20)\r\n    at nextLoad (node:internal/modules/esm/hooks:781:28)\r\n    at load (/Users/septs/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/dist/child/child-loader.js:19:122)\r\n    at nextLoad (node:internal/modules/esm/hooks:781:28)\r\n    at Hooks.load (node:internal/modules/esm/hooks:381:26)\r\n    at handleMessage (node:internal/modules/esm/worker:153:24)\r\n    at checkForMessages (node:internal/modules/esm/worker:102:28) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: 20.0.0\r\n* TypeScript version: 5.0\r\n* tsconfig.json:\r\n\r\n  ```json\r\n  { \"ts-node\": { \"esm\": true } }\r\n  ```\r\n\r\n* package.json:\r\n\r\n  ```json\r\n  {}\r\n  ```\r\n\r\n* Operating system and version: macOS 13.3.1\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1997/reactions",
          "total_count": 344,
          "+1": 294,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 50
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1997/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1993",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1993/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1993/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1993/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1993",
        "id": 1669877058,
        "node_id": "I_kwDOAlTKGc5jiE1C",
        "number": 1993,
        "title": "module:nodenext complie incorrect",
        "user": {
          "login": "weidehai",
          "id": 25458528,
          "node_id": "MDQ6VXNlcjI1NDU4NTI4",
          "avatar_url": "https://avatars.githubusercontent.com/u/25458528?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/weidehai",
          "html_url": "https://github.com/weidehai",
          "followers_url": "https://api.github.com/users/weidehai/followers",
          "following_url": "https://api.github.com/users/weidehai/following{/other_user}",
          "gists_url": "https://api.github.com/users/weidehai/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/weidehai/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/weidehai/subscriptions",
          "organizations_url": "https://api.github.com/users/weidehai/orgs",
          "repos_url": "https://api.github.com/users/weidehai/repos",
          "events_url": "https://api.github.com/users/weidehai/events{/privacy}",
          "received_events_url": "https://api.github.com/users/weidehai/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-04-16T11:25:24Z",
        "updated_at": "2023-04-16T11:27:35Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "\r\n### Expected Behavior\r\n\r\n\"module\": \"NodeNext\" should not include Object.defineProperty(exports, \"__esModule\", { value: true }) with it complie result\r\n\r\n### Actual Behavior\r\n\r\n![image](https://user-images.githubusercontent.com/25458528/232306526-6cb51f14-19d4-4f31-ac23-6e6907ba50c1.png)\r\n![image](https://user-images.githubusercontent.com/25458528/232306662-715eca29-5645-448f-b665-0d7b50f48f9d.png)\r\n![image](https://user-images.githubusercontent.com/25458528/232306676-5c14c736-600f-4f67-b0b4-021a835edc1e.png)\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1993/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1993/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1989",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1989/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1989/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1989/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1989",
        "id": 1662630465,
        "node_id": "I_kwDOAlTKGc5jGbpB",
        "number": 1989,
        "title": "Wrong base path determination when ts-node/esm loader is used ",
        "user": {
          "login": "ThePlenkov",
          "id": 6381507,
          "node_id": "MDQ6VXNlcjYzODE1MDc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6381507?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ThePlenkov",
          "html_url": "https://github.com/ThePlenkov",
          "followers_url": "https://api.github.com/users/ThePlenkov/followers",
          "following_url": "https://api.github.com/users/ThePlenkov/following{/other_user}",
          "gists_url": "https://api.github.com/users/ThePlenkov/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ThePlenkov/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ThePlenkov/subscriptions",
          "organizations_url": "https://api.github.com/users/ThePlenkov/orgs",
          "repos_url": "https://api.github.com/users/ThePlenkov/repos",
          "events_url": "https://api.github.com/users/ThePlenkov/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ThePlenkov/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-04-11T14:33:18Z",
        "updated_at": "2024-02-23T11:09:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "## Current behavior\r\n\r\nLet's say I have a subpackage in my workspace which I want to use a module .\r\n\r\nSo i have a folder like `tools/codegen` with file like index.mts with a content like\r\n```\r\n#!/usr/bin/env -S node --loader ts-node/esm\r\nconst t = await true;\r\n```\r\n\r\nSo without tsconfig.json tsc will not work. So let's add `tools/codegen/tsconfig.json`\r\n```\r\n{\r\n    \"extends\": \"@tsconfig/recommended/tsconfig.json\",\r\n    \"compilerOptions\": {\r\n        \"module\": \"ESNext\",\r\n        \"target\": \"ES2017\",\r\n        \"moduleResolution\": \"node16\",\r\n        \"esModuleInterop\": false\r\n    },\r\n    \"ts-node\": {\r\n        \"esm\": true\r\n    }\r\n}\r\n```\r\nSo with this config IDE already doesn't give error. tsc command also works fine.\r\n \r\nIn my `tools/codegen/package.json`  i have `\"bin\":\"index.mts\"`\r\n\r\nSo after install I 'm able to run `npx codegen` from tools/codegen\r\n\r\nHowever if I run it from the root of the monorepo it seems that ts-node is not smart enough to determine what is the base folder for executed file. So command `npx codegen` from the root level triggers top-level await TypeScript error which occurs without tsconfig.json\r\n\r\nTo be able to run `npx codegen` from root level i use \"workspaces\" : \"tools/*\" in my root package.json\r\n\r\n## Expected behavior\r\n\r\nI expect that ts-node should understand from where it is called.  Indeed node is called with some path and that path can be used as a base path for config determination.\r\n\r\nIt should not matter from where I call my `npx codegen` command - it should work similarly becase config should be linked to the executed file and not to the folder from where I run. \r\n\r\nIn my case I don't have tsconfig.json - but in more complicated case I might have one but with different set up.\r\n\r\n## Example\r\nI've prepared a sample project showing this behavior https://github.com/ThePlenkov/ts-config-top-level-await-issue\r\n\r\nThanks!\r\n\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1989/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1989/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1986",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1986/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1986/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1986/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1986",
        "id": 1654978453,
        "node_id": "I_kwDOAlTKGc5ipPeV",
        "number": 1986,
        "title": "Require typescript file after ts-node.register doesn't work in ESM",
        "user": {
          "login": "Fernando9995",
          "id": 129927256,
          "node_id": "U_kgDOB76IWA",
          "avatar_url": "https://avatars.githubusercontent.com/u/129927256?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Fernando9995",
          "html_url": "https://github.com/Fernando9995",
          "followers_url": "https://api.github.com/users/Fernando9995/followers",
          "following_url": "https://api.github.com/users/Fernando9995/following{/other_user}",
          "gists_url": "https://api.github.com/users/Fernando9995/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Fernando9995/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Fernando9995/subscriptions",
          "organizations_url": "https://api.github.com/users/Fernando9995/orgs",
          "repos_url": "https://api.github.com/users/Fernando9995/repos",
          "events_url": "https://api.github.com/users/Fernando9995/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Fernando9995/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-04-05T05:49:21Z",
        "updated_at": "2023-04-05T05:49:21Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Steps to reproduce the problem\r\nindex.mjs\r\n```\r\nimport { dirname, resolve } from \"path\";\r\nimport { createRequire } from \"module\";\r\nimport tsnode from \"ts-node\";\r\n\r\nconst require = createRequire(import.meta.url);\r\nconst __dirname = dirname(decodeURI(new URL(import.meta.url).pathname)).replace(/^\\/([A-Za-z]):\\//, \"$1:/\");\r\n\r\ntsnode.register({\r\n  project: resolve(__dirname, \"tsconfig.json\"),\r\n});\r\n\r\n(() => {\r\n  const res = require(\"./file.ts\");\r\n  res.init();\r\n})();\r\n```\r\n\r\n### Actual Behavior\r\nUncaught exception: Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: ./file.ts require() of ES modules is not supported. require() of ./main.ts from ./index.mjs is an ES module file as it is a .ts file whose nearest parent package.json contains \"type\": \"module\" which defines all .ts files in that package scope as ES modules.\r\nInstead change the requiring code to use import(), or remove \"type\": \"module\" from ./package.json.\r\n\r\n### Expected Behavior\r\nThere are no such error if start file from cmd\r\n```\r\nnode --loader ts-node/esm --inspect ./file.ts\r\n```\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v16.19.0\r\n* TypeScript version: v5.0.3\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \"_dist\",\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node16\",\r\n    \"esModuleInterop\": true\r\n  },\r\n  \"ts-node\": {\r\n    \"esm\": true,\r\n    \"transpileOnly\": true\r\n  },\r\n  \"include\": [\".\"]\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"type\": \"module\"\r\n}\r\n```\r\n* Operating system and version: Windows 10 22H2\r\n* If Windows, are you using WSL or WSL2?: WSL2\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1986/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1986/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1983",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1983/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1983/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1983/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1983",
        "id": 1649518853,
        "node_id": "I_kwDOAlTKGc5iUakF",
        "number": 1983,
        "title": "Export logic for converting `tsconfig` into `swcrc` (or publish it as a separate NPM package)",
        "user": {
          "login": "GreenTea124",
          "id": 59367983,
          "node_id": "MDQ6VXNlcjU5MzY3OTgz",
          "avatar_url": "https://avatars.githubusercontent.com/u/59367983?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/GreenTea124",
          "html_url": "https://github.com/GreenTea124",
          "followers_url": "https://api.github.com/users/GreenTea124/followers",
          "following_url": "https://api.github.com/users/GreenTea124/following{/other_user}",
          "gists_url": "https://api.github.com/users/GreenTea124/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/GreenTea124/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/GreenTea124/subscriptions",
          "organizations_url": "https://api.github.com/users/GreenTea124/orgs",
          "repos_url": "https://api.github.com/users/GreenTea124/repos",
          "events_url": "https://api.github.com/users/GreenTea124/events{/privacy}",
          "received_events_url": "https://api.github.com/users/GreenTea124/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-03-31T14:57:45Z",
        "updated_at": "2023-03-31T14:57:45Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "ts-node is able to convert `tsconfig` into SWC config:\r\nhttps://github.com/TypeStrong/ts-node/blob/main/src/transpilers/swc.ts\r\n\r\nPerhaps, this functionality could be exported, or extracted into a separate NPM package. It is something that would be useful in more scenarios (webpack/esbuild/vite configs and plugins).\r\n\r\nThere is a similar project already (https://github.com/Songkeys/tsconfig-to-swcconfig), bit it seems like something that deserves a large and trustworthy maintainer.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1983/reactions",
          "total_count": 2,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 2,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1983/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1978",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1978/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1978/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1978/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1978",
        "id": 1644531412,
        "node_id": "I_kwDOAlTKGc5iBY7U",
        "number": 1978,
        "title": "A new ESM `transpile-only` equivalent of 'ts-node-transpile-only' ",
        "user": {
          "login": "G-Rath",
          "id": 3151613,
          "node_id": "MDQ6VXNlcjMxNTE2MTM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3151613?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/G-Rath",
          "html_url": "https://github.com/G-Rath",
          "followers_url": "https://api.github.com/users/G-Rath/followers",
          "following_url": "https://api.github.com/users/G-Rath/following{/other_user}",
          "gists_url": "https://api.github.com/users/G-Rath/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/G-Rath/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/G-Rath/subscriptions",
          "organizations_url": "https://api.github.com/users/G-Rath/orgs",
          "repos_url": "https://api.github.com/users/G-Rath/repos",
          "events_url": "https://api.github.com/users/G-Rath/events{/privacy}",
          "received_events_url": "https://api.github.com/users/G-Rath/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-03-28T19:19:49Z",
        "updated_at": "2023-03-29T15:37:17Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "Related to #1101 & #1007 - it would be nice to have `ts-node-esm-transpile-only` for scripting purposes.\r\n\r\n(this might have already been asked somewhere but I wasn't able to find it so either way I think it's useful to have a dedicated ticket regardless of the outcome)\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1978/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1978/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1974",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1974/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1974/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1974/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1974",
        "id": 1631321103,
        "node_id": "I_kwDOAlTKGc5hO_wP",
        "number": 1974,
        "title": "Support exports and imports subpath (package.json) pointing to generated .js files",
        "user": {
          "login": "InExtremaRes",
          "id": 1635491,
          "node_id": "MDQ6VXNlcjE2MzU0OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1635491?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/InExtremaRes",
          "html_url": "https://github.com/InExtremaRes",
          "followers_url": "https://api.github.com/users/InExtremaRes/followers",
          "following_url": "https://api.github.com/users/InExtremaRes/following{/other_user}",
          "gists_url": "https://api.github.com/users/InExtremaRes/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/InExtremaRes/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/InExtremaRes/subscriptions",
          "organizations_url": "https://api.github.com/users/InExtremaRes/orgs",
          "repos_url": "https://api.github.com/users/InExtremaRes/repos",
          "events_url": "https://api.github.com/users/InExtremaRes/events{/privacy}",
          "received_events_url": "https://api.github.com/users/InExtremaRes/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-03-20T03:35:50Z",
        "updated_at": "2023-12-26T20:17:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nConsider a source file `src/package-a/index.ts` that will be transpiled by tsc to `build/package-a/index.js`, and a `package.json` that looks like this:\r\n\r\n```json\r\n{\r\n  \"type\": \"module\",\r\n  \"imports\": {\r\n    \"#package-a\": \"./build/package-a/index.js\"\r\n  }\r\n}\r\n```\r\n\r\nNow TypeScript allows me to import `import {...} from #package-a` in any other file. Even when I am importing the generated `.js` file (that maybe don't exists yet), TypeScript knows that file will be generated from the `.ts` in `src` and correctly type-check that file, uses it for editor support, etc.\r\n\r\n`ts-node`, however, doesn't know how to resolve the file and fails with\r\n\r\n```plain\r\nnode_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:366\r\n    throw new ERR_MODULE_NOT_FOUND(\r\n[...]\r\n```\r\n\r\nThe same occurs for subpath `exports`: TypeScript resolves to the source file that will generate that `.js` but `ts-node` doesn't.\r\n\r\nI would expect `ts-node` to follow TypeScript semantics here and resolve to the corresponding `.ts` file as the language server does.\r\n\r\n### Is this request related to a problem?\r\n\r\nUsing [subpath imports (since v14, v12 in experimental)](https://nodejs.org/docs/latest-v14.x/api/packages.html#packages_subpath_imports) is a common practice to alleviate the burden of nested, relative paths, as well to provide \"internal packages\" and many other cases. TypeScript, with a well configured `tsconfig.json` and `package.json`, just works.\r\n\r\nThe issue is, you can't point to the `.ts` file in the `\"imports\"` field of the `package.json` to make `ts-node` works since that field will also be read by `node` at runtime to resolve the import, so it must point to the generated `.js`. This issue makes it really difficult to correctly use this Node feature.\r\n\r\n### Alternatives you've considered\r\n\r\nMy first idea was to use [conditional imports](https://nodejs.org/docs/latest-v14.x/api/packages.html#packages_conditional_exports) so the `package.json` could look something like this:\r\n\r\n```.json\r\n{\r\n  \"type\": \"module\",\r\n  \"imports\": {\r\n    \"#package-a\": {\r\n      \"ts-node\": \"./src/package-a/index.ts\",\r\n      \"default\": \"./build/package-a/index.js\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHowever I can't figure out how to use a custom condition for `ts-node` (I'm using `ts-node-esm` but don't think that's relevant).  I have tested with `NODE_OPTIONS=\"-C ts-node\" npx ts-node-esm thing` but got the same error. A possible workaround is to allow custom conditions and the last pattern should work, but I still think the original example should be supported by `ts-node` out of the box (or at least via some config).\r\n\r\n### Additional context\r\n\r\nI think the issue was commented on #1007, but that's a very long thread to follow a possible resolution there.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1974/reactions",
          "total_count": 17,
          "+1": 13,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 4,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1974/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1970",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1970/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1970/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1970/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1970",
        "id": 1628067721,
        "node_id": "I_kwDOAlTKGc5hCleJ",
        "number": 1970,
        "title": "[ESM] [SWC] SyntaxError: The requested module '' does not provide an export named ''",
        "user": {
          "login": "carlosmiei",
          "id": 43336371,
          "node_id": "MDQ6VXNlcjQzMzM2Mzcx",
          "avatar_url": "https://avatars.githubusercontent.com/u/43336371?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/carlosmiei",
          "html_url": "https://github.com/carlosmiei",
          "followers_url": "https://api.github.com/users/carlosmiei/followers",
          "following_url": "https://api.github.com/users/carlosmiei/following{/other_user}",
          "gists_url": "https://api.github.com/users/carlosmiei/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/carlosmiei/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/carlosmiei/subscriptions",
          "organizations_url": "https://api.github.com/users/carlosmiei/orgs",
          "repos_url": "https://api.github.com/users/carlosmiei/repos",
          "events_url": "https://api.github.com/users/carlosmiei/events{/privacy}",
          "received_events_url": "https://api.github.com/users/carlosmiei/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2023-03-16T18:36:04Z",
        "updated_at": "2023-10-13T12:24:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nesm,swc, interfaces\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nWhen exporting an interface, the ts-node crashes, however, this only happens when we provide `--swc` option. \r\n\r\n### Actual Behavior\r\n\r\nCrashes with the error: `SyntaxError: The requested module './.js' does not provide an export named ''` \r\n\r\n### Steps to reproduce the problem\r\n\r\n- Create `fileA.ts` and export an interface there\r\n- Create `fileB.ts` and import and export the interface from `fileA.ts`\r\n\r\n\r\n\r\n### Minimal reproduction\r\n- FileA\r\n```Typescript\r\nexport interface myType {\r\n    id: string;\r\n}\r\n```\r\n- FileB\r\n```Javascript\r\nimport { myType } from \"./types.js\";\r\nexport { myType } from \"./types.js\";\r\nconsole.log(\"Hello World!\");\r\n```\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v18.14.0\r\n* TypeScript version:  4.7.4\r\n* tsconfig.json, if you're using one:\r\n```\r\n{}\r\n```\r\n* package.json:\r\n```\r\n{}\r\n```\r\n* Operating system and version:\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1970/reactions",
          "total_count": 6,
          "+1": 6,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1970/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1969",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1969/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1969/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1969/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1969",
        "id": 1627434193,
        "node_id": "I_kwDOAlTKGc5hAKzR",
        "number": 1969,
        "title": "`preferTsExts` incorrectly imports `.js` instead of `.ts` when importing an inferred `index` file",
        "user": {
          "login": "alecgibson",
          "id": 12036746,
          "node_id": "MDQ6VXNlcjEyMDM2NzQ2",
          "avatar_url": "https://avatars.githubusercontent.com/u/12036746?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alecgibson",
          "html_url": "https://github.com/alecgibson",
          "followers_url": "https://api.github.com/users/alecgibson/followers",
          "following_url": "https://api.github.com/users/alecgibson/following{/other_user}",
          "gists_url": "https://api.github.com/users/alecgibson/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alecgibson/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alecgibson/subscriptions",
          "organizations_url": "https://api.github.com/users/alecgibson/orgs",
          "repos_url": "https://api.github.com/users/alecgibson/repos",
          "events_url": "https://api.github.com/users/alecgibson/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alecgibson/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-03-16T13:04:03Z",
        "updated_at": "2023-03-16T13:20:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n\"preferTsExts\", \"coverage\", \"index\"\r\n\r\n### Expected Behavior\r\n\r\nFollowing the below steps should result in 100% code coverage at all times\r\n\r\n### Actual Behavior\r\n\r\nCoverage is not 100%\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. Clone [this repo](https://github.com/alecgibson/ts-node-prefer-ts-exts-bug)\r\n1. `npm i`\r\n1. `npm test`\r\n1. Note 100% coverage, including `packages/object-id/index.ts`\r\n1. `npm run build`\r\n1. `npm test`\r\n1. Now note less coverage: `packages/object-id/index.ts` is uncovered, because `packages/object-id/index.js` is being used instead\r\n1. Reset using `npm run build:clean`, and coverage returns to 100%\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/alecgibson/ts-node-prefer-ts-exts-bug\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: v18.10.0\r\n* TypeScript version: ^4.9.5\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {},\r\n  \"include\": [\r\n    \"lib/\",\r\n    \"packages/\",\r\n  ],\r\n  \"ts-node\": {\r\n    \"preferTsExts\": true,\r\n  },\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"ts-node-prefer-ts-exts-bug\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"build\": \"tsc\",\r\n    \"build:clean\": \"tsc --build --clean\",\r\n    \"test\": \"nyc mocha -r ts-node/register 'lib/**/*.spec.ts' 'packages/**/*.spec.ts'\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/alecgibson/ts-node-prefer-ts-exts-bug.git\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/alecgibson/ts-node-prefer-ts-exts-bug/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/alecgibson/ts-node-prefer-ts-exts-bug#readme\",\r\n  \"devDependencies\": {\r\n    \"@types/chai\": \"^4.3.4\",\r\n    \"@types/mocha\": \"^10.0.1\",\r\n    \"chai\": \"^4.3.7\",\r\n    \"mocha\": \"^10.2.0\",\r\n    \"nyc\": \"^15.1.0\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^4.9.5\"\r\n  },\r\n  \"dependencies\": {\r\n  }\r\n}\r\n```\r\n* Operating system and version: macOS 13.2.1 (22D68)\r\n\r\n## Notes\r\n\r\nHere are some things I've noted trying to put together the MWE:\r\n\r\n* Changing [this line](https://github.com/alecgibson/ts-node-prefer-ts-exts-bug/blob/37d0fd836fc5c7fc298a9797d55146c6c041720d/packages/object-id/index.spec.ts#L2) fixes the issue: \r\n```diff\r\n- import {isObjectId} from '.';\r\n+ import {isObjectId} from './index';\r\n```\r\n* The same thing is true of [this line](https://github.com/alecgibson/ts-node-prefer-ts-exts-bug/blob/37d0fd836fc5c7fc298a9797d55146c6c041720d/lib/is-object-id.ts#L1):\r\n```diff\r\n- import {isObjectId} from '../packages/object-id';\r\n+ import {isObjectId} from '../packages/object-id/index';\r\n```\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1969/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1969/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1967",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1967/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1967/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1967/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1967",
        "id": 1617417250,
        "node_id": "I_kwDOAlTKGc5gZ9Qi",
        "number": 1967,
        "title": "Suggestion: always run \".ts\" files. Don't ever say .ts is unknown.",
        "user": {
          "login": "mikemaccana",
          "id": 172594,
          "node_id": "MDQ6VXNlcjE3MjU5NA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/172594?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mikemaccana",
          "html_url": "https://github.com/mikemaccana",
          "followers_url": "https://api.github.com/users/mikemaccana/followers",
          "following_url": "https://api.github.com/users/mikemaccana/following{/other_user}",
          "gists_url": "https://api.github.com/users/mikemaccana/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mikemaccana/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mikemaccana/subscriptions",
          "organizations_url": "https://api.github.com/users/mikemaccana/orgs",
          "repos_url": "https://api.github.com/users/mikemaccana/repos",
          "events_url": "https://api.github.com/users/mikemaccana/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mikemaccana/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-03-09T14:56:54Z",
        "updated_at": "2023-05-03T11:13:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nThere's a whole bunch of closed tickets, online discussion, workarounds, etc. for this:\r\n\r\n```\r\n$ npx ts-node somefile.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\"\r\n```\r\n\r\n**Regardless of the contents of package.json**, the `ERR_UNKNOWN_FILE_EXTENSION` is not a logical error for a program whose only purpose is to run TypeScript files. \r\n\r\nThanks for understanding the frustration of the many people that have tried to use ts-node to run a `.ts` file and been told this isn't possible.\r\n\r\n### Is this request related to a problem?\r\n```\r\n$ npx ts-node somefile.ts\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\"\r\n```\r\n### Additional context\r\n\r\nOther tools like `esrun` have been created precisely because of this issue. Rather than close every ticket with 'user error' it would be better if ts-node ran ts files, just like python runs python files and ruby runs ruby files and bash runs bash files. \r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1967/reactions",
          "total_count": 33,
          "+1": 33,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1967/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1966",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1966/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1966/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1966/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1966",
        "id": 1616532428,
        "node_id": "I_kwDOAlTKGc5gWlPM",
        "number": 1966,
        "title": "Cannot read file '/usr/local/lib/node_modules/ts-node/tsconfig.build-dist.json'",
        "user": {
          "login": "zycoJamie",
          "id": 27729870,
          "node_id": "MDQ6VXNlcjI3NzI5ODcw",
          "avatar_url": "https://avatars.githubusercontent.com/u/27729870?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zycoJamie",
          "html_url": "https://github.com/zycoJamie",
          "followers_url": "https://api.github.com/users/zycoJamie/followers",
          "following_url": "https://api.github.com/users/zycoJamie/following{/other_user}",
          "gists_url": "https://api.github.com/users/zycoJamie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/zycoJamie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/zycoJamie/subscriptions",
          "organizations_url": "https://api.github.com/users/zycoJamie/orgs",
          "repos_url": "https://api.github.com/users/zycoJamie/repos",
          "events_url": "https://api.github.com/users/zycoJamie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/zycoJamie/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-03-09T06:46:11Z",
        "updated_at": "2023-03-09T06:46:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Expected Behavior\r\nI install ts-node by 'npm i -g ts-node', when I use 'npm link ts-node' I want to use ts-node in local folder. But it throw error.\r\n\r\n### Steps to reproduce the problem\r\n```shell\r\nnpm link ts-node\r\n\r\nnpm ERR! code 1\r\nnpm ERR! path /usr/local/lib/node_modules/ts-node\r\nnpm ERR! command failed\r\nnpm ERR! command sh -c npm run clean && npm run build-nopack\r\nnpm ERR! > ts-node@10.9.1 clean\r\nnpm ERR! > rimraf temp dist tsconfig.schema.json tsconfig.schemastore-schema.json tsconfig.tsbuildinfo tests/ts-node-packed.tgz tests/node_modules tests/tmp\r\nnpm ERR! \r\nnpm ERR! \r\nnpm ERR! > ts-node@10.9.1 build-nopack\r\nnpm ERR! > npm run build-tsc && npm run build-configSchema\r\nnpm ERR! \r\nnpm ERR! \r\nnpm ERR! > ts-node@10.9.1 build-tsc\r\nnpm ERR! > tsc -b ./tsconfig.build-dist.json\r\nnpm ERR! \r\nnpm ERR! error TS5083: Cannot read file '/usr/local/lib/node_modules/ts-node/tsconfig.build-dist.json'.\r\n```\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v15.14.0\r\n* npm version: v7.7.6\r\n* TypeScript version: v4.9.5\r\n* System: Mac OS X 10.15.7\r\n\r\nhow to link ts-node to local folder when I install it with global?\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1966/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1966/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1948",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1948/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1948/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1948/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1948",
        "id": 1566650043,
        "node_id": "I_kwDOAlTKGc5dYS67",
        "number": 1948,
        "title": "When used with tsconfig-paths, tsconfig-paths should use a ts-node provided tsconfig.json path",
        "user": {
          "login": "rhyek",
          "id": 702922,
          "node_id": "MDQ6VXNlcjcwMjkyMg==",
          "avatar_url": "https://avatars.githubusercontent.com/u/702922?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rhyek",
          "html_url": "https://github.com/rhyek",
          "followers_url": "https://api.github.com/users/rhyek/followers",
          "following_url": "https://api.github.com/users/rhyek/following{/other_user}",
          "gists_url": "https://api.github.com/users/rhyek/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rhyek/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rhyek/subscriptions",
          "organizations_url": "https://api.github.com/users/rhyek/orgs",
          "repos_url": "https://api.github.com/users/rhyek/repos",
          "events_url": "https://api.github.com/users/rhyek/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rhyek/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-02-01T19:04:55Z",
        "updated_at": "2023-02-01T19:56:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nts-node can resolve a tsconfig.json file relative to the entrypoint script. This is great. It seems tsconfig-paths will instead try to use the current working directory. This means that when combining both, different tsconfig paths will be resolved if you are relying on auto-discovery and the entrypoint script is not located in the cwd.\r\n\r\n\r\n### Is this request related to a problem?\r\nWhen using tsconfig-paths, I have to either provide the project param explicitly or only use entrypoint scripts in my cwd.\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1948/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1948/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1945",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1945/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1945/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1945/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1945",
        "id": 1558954508,
        "node_id": "I_kwDOAlTKGc5c68IM",
        "number": 1945,
        "title": "In composite projects with ttypescript, ts-node should call transformers with parameters defined on the tsconfig.json of the executed file instead of the original one",
        "user": {
          "login": "aquilae",
          "id": 1634798,
          "node_id": "MDQ6VXNlcjE2MzQ3OTg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1634798?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/aquilae",
          "html_url": "https://github.com/aquilae",
          "followers_url": "https://api.github.com/users/aquilae/followers",
          "following_url": "https://api.github.com/users/aquilae/following{/other_user}",
          "gists_url": "https://api.github.com/users/aquilae/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/aquilae/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/aquilae/subscriptions",
          "organizations_url": "https://api.github.com/users/aquilae/orgs",
          "repos_url": "https://api.github.com/users/aquilae/repos",
          "events_url": "https://api.github.com/users/aquilae/events{/privacy}",
          "received_events_url": "https://api.github.com/users/aquilae/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-01-27T00:01:44Z",
        "updated_at": "2023-02-08T19:32:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\ncomposite, transform, ttypescript\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nWhen building a composite project, typescript/ttypescript picks up the transformers defined on each nested project.\r\nFor example, with this structure:\r\n\r\n```\r\nroot/\r\n - tsconfig.json with transform A\r\n - root.ts\r\n - app/\r\n  - tsconfig.json with transform B\r\n  - app.ts\r\n```\r\n`transform A` will be applied to `root.ts` and `transform B` will be applied to `app.ts`.\r\n\r\nIn repro branch:\r\n```\r\n> npx ttsc -b\r\nanother transform subapp.ts with ../visitor\r\ntransform root.ts with ./visitor\r\n```\r\n\r\n### Actual Behavior\r\n\r\n`ts-node` currently reads transformers once from the `tsconfig.json` corresponding to the file you pass as an argument, and then applies the same transformer to all the files it encounters even when importing files under a different composite project.\r\n\r\n```\r\nroot/\r\n - tsconfig.json with transform A\r\n - root.ts\r\n - app/\r\n  - tsconfig.json with transform B\r\n  - app.ts\r\n```\r\nRunning `ts-node root.ts`, `transform A` will be applied both to `root.ts` and `app.ts`\r\n\r\nIn repro branch:\r\n```\r\n> npx ts-node -C ttypescript root.ts\r\ntransform root.ts with ./visitor\r\ntransform subapp.ts with ./visitor\r\n```\r\n\r\nIn practice, that completely breaks not only the ability to use different transformers for different projects, but also the support for relative path parameters to transformers.\r\n\r\n### Steps to reproduce the problem\r\n\r\nSet up a composite TS project with different transformers for root and nested projects, notice the difference in transformer calls between `ttsc -b` and `ts-node -C ttypescript .`.\r\n\r\n### Minimal reproduction\r\n\r\nRepro repo PR: https://github.com/TypeStrong/ts-node-repros/pull/32\r\n\r\n```\r\n> npx ttsc -b\r\nanother transform subapp.ts with ../visitor\r\ntransform root.ts with ./visitor\r\n\r\n> npx ts-node -C ttypescript root.ts\r\ntransform root.ts with ./visitor\r\ntransform subapp.ts with ./visitor\r\n```\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v16.17.1\r\n* TypeScript version: v4.9.4\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \".typescript\",\r\n    \"plugins\": [\r\n      {\r\n        \"type\": \"program\",\r\n        \"transform\": \"./transform.js\",\r\n        \"visitor\": \"./visitor\"\r\n      }\r\n    ]\r\n  },\r\n  \"references\": [\r\n    { \"path\": \"./subapp\" }\r\n  ],\r\n  \"files\": [\"root.ts\"]\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"version\": \"0.0.1\",\r\n  \"devDependencies\": {\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"ttypescript\": \"^1.5.15\",\r\n    \"typescript\": \"^4.9.4\"\r\n  }\r\n}\r\n\r\n```\r\n* Operating system and version: Win 10\r\n* If Windows, are you using WSL or WSL2?: No\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1945/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1945/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1944",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1944/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1944/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1944/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1944",
        "id": 1551759531,
        "node_id": "I_kwDOAlTKGc5cffir",
        "number": 1944,
        "title": "Weird directory is created when using nodejs Worker threads API with `env` option",
        "user": {
          "login": "chulman444",
          "id": 11896831,
          "node_id": "MDQ6VXNlcjExODk2ODMx",
          "avatar_url": "https://avatars.githubusercontent.com/u/11896831?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chulman444",
          "html_url": "https://github.com/chulman444",
          "followers_url": "https://api.github.com/users/chulman444/followers",
          "following_url": "https://api.github.com/users/chulman444/following{/other_user}",
          "gists_url": "https://api.github.com/users/chulman444/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/chulman444/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/chulman444/subscriptions",
          "organizations_url": "https://api.github.com/users/chulman444/orgs",
          "repos_url": "https://api.github.com/users/chulman444/repos",
          "events_url": "https://api.github.com/users/chulman444/events{/privacy}",
          "received_events_url": "https://api.github.com/users/chulman444/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-01-21T10:23:38Z",
        "updated_at": "2023-03-14T05:04:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nv8-compile-cache\r\nworker\r\nworker thread\r\n\r\n### Expected Behavior\r\n\r\nNot to have `undefined\\temp\\v8-compile-cache\\10.2.154.15-node.12` directory\r\n\r\n### Actual Behavior\r\n\r\nI get one.\r\n\r\n### Steps to reproduce the problem\r\n\r\nUse NodeJS Worker API with typescript using `env` option.\r\n\r\nRun `node index.js`. You get no `undefined` because it uses `argv` intead of `env`.\r\n\r\nUncomment `env` one and comment `argv` you get the directory.\r\n\r\nIt seems like `env` is the problem. Running `index-jsonly.js` doesn't create `undefined` directory.\r\n\r\n### Minimal reproduction\r\n\r\nhttps://github.com/chulman444/ts-node-reacreation\r\n\r\n### Specifications\r\n\r\n```\r\nts-node v10.9.1\r\nnode v18.12.1\r\ncompiler v4.9.4\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"test0\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"worker.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^18.11.18\",\r\n    \"tsconfig-paths\": \"^4.1.2\"\r\n  },\r\n  \"dependencies\": {\r\n    \"ts-node\": \"^10.9.1\"\r\n  }\r\n}\r\n```\r\nJust plain `Windows 10 Pro 19056.2486`\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1944/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1944/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1941",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1941/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1941/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1941/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1941",
        "id": 1534340530,
        "node_id": "I_kwDOAlTKGc5bdC2y",
        "number": 1941,
        "title": "Cannot find dependent packages while using `ts-node-esm` with `yarn berry` under `pnp mode`.",
        "user": {
          "login": "LvChengbin",
          "id": 963223,
          "node_id": "MDQ6VXNlcjk2MzIyMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/963223?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/LvChengbin",
          "html_url": "https://github.com/LvChengbin",
          "followers_url": "https://api.github.com/users/LvChengbin/followers",
          "following_url": "https://api.github.com/users/LvChengbin/following{/other_user}",
          "gists_url": "https://api.github.com/users/LvChengbin/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/LvChengbin/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/LvChengbin/subscriptions",
          "organizations_url": "https://api.github.com/users/LvChengbin/orgs",
          "repos_url": "https://api.github.com/users/LvChengbin/repos",
          "events_url": "https://api.github.com/users/LvChengbin/events{/privacy}",
          "received_events_url": "https://api.github.com/users/LvChengbin/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-01-16T05:54:42Z",
        "updated_at": "2024-08-01T08:02:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\n\r\n### Actual Behavior\r\n\r\nCannot find dependent packages while using `ts-node-esm` with `yarn berry` under `pnp mode`.\r\nI'm not sure if it should be an issue of `ts-node` project, but it's working well while using `yarn node` command and `yarn ts-node` command.\r\n\r\nI know the issue of chaining loaders of nodejs, so I upgraded my nodejs to the latest version (19.4.0) which seems has already supported chaining loaders.\r\n\r\n### Steps to reproduce the problem\r\n\r\nSample code:\r\n\r\n```ts\r\nimport escapeStringRegexp from 'escape-string-regexp';\r\nconsole.log( escapeStringRegexp );\r\n```\r\n\r\n```sh\r\n% yarn node src/index.js\r\n[Function: escapeStringRegexp]\r\n```\r\n\r\n```sh\r\n% yarn ts-node --transpile-only src/index.js\r\n[Function: escapeStringRegexp]\r\n```\r\n\r\n```sh\r\n% yarn ts-node-esm --transpile-only src/index.js\r\n/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:757\r\n  throw new ERR_MODULE_NOT_FOUND(packageName, fileURLToPath(base));\r\n        ^\r\nCustomError: Cannot find package 'escape-string-regexp' imported from /Users/Workspace/test/esmodule/src/index.js\r\n    at packageResolve (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:757:9)\r\n    at moduleResolve (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:798:18)\r\n    at Object.defaultResolve (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/dist-raw/node-internal-modules-esm-resolve.js:912:11)\r\n    at /Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/src/esm.ts:218:35\r\n    at entrypointFallback (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/src/esm.ts:168:34)\r\n    at /Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/src/esm.ts:217:14\r\n    at addShortCircuitFlag (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/src/esm.ts:409:21)\r\n    at resolve (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/src/esm.ts:197:12)\r\n    at resolve (/Users/Workspace/test/esmodule/.yarn/__virtual__/ts-node-virtual-920353443a/0/cache/ts-node-npm-10.9.1-6c268be7f4-090adff130.zip/node_modules/ts-node/src/child/child-loader.ts:15:39)\r\n    at nextResolve (node:internal/modules/esm/loader:164:28)\r\n```\r\n\r\n### Minimal reproduction\r\n\r\n\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: v19.4.0\r\n* TypeScript version: 4.9.4\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n    \"compilerOptions\": {\r\n        \"outDir\" : \"./lib/\",\r\n        \"rootDir\" : \"./src/\",\r\n        /* Visit https://aka.ms/tsconfig to read more about this file */\r\n\r\n        /* Projects */\r\n        // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\r\n        \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\r\n        // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\r\n        // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\r\n        // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\r\n        // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\r\n\r\n        /* Language and Environment */\r\n        \"target\": \"ESNext\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\r\n        // \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\r\n        // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\r\n        \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\r\n        \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\r\n        // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\r\n        // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\r\n        // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\r\n        // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\r\n        // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\r\n        // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\r\n        // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\r\n\r\n        /* Modules */\r\n        \"module\": \"ESNext\",                                /* Specify what module code is generated. */\r\n        // \"rootDir\": \"./\",                                  /* Specify the root folder within your source files. */\r\n        \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\r\n        \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */\r\n        // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\r\n        // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\r\n        // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\r\n        // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */\r\n        // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\r\n        // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\r\n        \"resolveJsonModule\": false,                        /* Enable importing .json files. */\r\n        // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\r\n\r\n        /* JavaScript Support */\r\n        // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\r\n        // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\r\n        // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\r\n\r\n        /* Emit */\r\n        // \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\r\n        // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\r\n        // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\r\n        // \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\r\n        // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\r\n        // \"outDir\": \"./\",                                   /* Specify an output folder for all emitted files. */\r\n        // \"removeComments\": true,                           /* Disable emitting comments. */\r\n        // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\r\n        // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\r\n        // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\r\n        // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\r\n        // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\r\n        // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\r\n        // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\r\n        // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\r\n        // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\r\n        // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */\r\n        // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\r\n        // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\r\n        // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\r\n        // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\r\n        // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\r\n        // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\r\n\r\n        /* Interop Constraints */\r\n        // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\r\n        // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\r\n        \"esModuleInterop\": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\r\n        // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\r\n        \"forceConsistentCasingInFileNames\": true,            /* Ensure that casing is correct in imports. */\r\n\r\n        /* Type Checking */\r\n        \"strict\": true,                                      /* Enable all strict type-checking options. */\r\n        // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\r\n        // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\r\n        // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\r\n        // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\r\n        // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\r\n        // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\r\n        // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\r\n        // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\r\n        // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\r\n        // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\r\n        // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\r\n        // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\r\n        // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\r\n        // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\r\n        // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\r\n        // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\r\n        // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\r\n        // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\r\n\r\n        /* Completeness */\r\n        // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\r\n        \"skipLibCheck\": true                                 /* Skip type checking all .d.ts files. */\r\n    }\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n    \"name\": \"esmodule\",\r\n    \"version\": \"1.0.0\",\r\n    \"main\": \"index.js\",\r\n    \"license\": \"MIT\",\r\n    \"type\": \"module\",\r\n    \"devDependencies\": {\r\n        \"@types/node\": \"^18.11.18\",\r\n        \"ts-node\": \"^10.9.1\",\r\n        \"typescript\": \"^4.9.4\"\r\n    },\r\n    \"dependencies\": {\r\n        \"escape-string-regexp\": \"^5.0.0\"\r\n    }\r\n}\r\n```\r\n* Operating system and version: MacOS 13.1\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1941/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1941/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1938",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1938/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1938/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1938/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1938",
        "id": 1525426900,
        "node_id": "I_kwDOAlTKGc5a7CrU",
        "number": 1938,
        "title": "Decrease dependencies.",
        "user": {
          "login": "MicahZoltu",
          "id": 886059,
          "node_id": "MDQ6VXNlcjg4NjA1OQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/886059?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MicahZoltu",
          "html_url": "https://github.com/MicahZoltu",
          "followers_url": "https://api.github.com/users/MicahZoltu/followers",
          "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
          "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
          "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
          "repos_url": "https://api.github.com/users/MicahZoltu/repos",
          "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
          "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-01-09T11:44:12Z",
        "updated_at": "2023-01-09T11:44:12Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nts-node brings in very few or no transitive dependencies.\r\n\r\n\r\n### Is this request related to a problem?\r\nSort of.  Every dependency a project has slightly increases the attack surface area against developers and CI systems.  You can somewhat mitigate this by doing `npm ci` and `npm ci --ignore-scripts` but this is often not done and it is easy to accidentally do `npm install` out of habit or while following instructions.  As this project gains dependencies over time, the attack surface it presents to projects increases and the diligence one must follow while using it increases.\r\n\r\n\r\n### Alternatives you've considered\r\nDeno.  This requires developers have Deno installed, which is much more heavy weight than ts-node and not fully compatible with existing tooling.\r\n\r\n\r\n### Additional context\r\nWhen I first started using ts-node I believe the set of dependencies was very small, which was a big selling point since it was getting added to basically every one of my projects along side TypeScript.  Over time, I have noticed that the dependency set has been increasing.  While 16 transitive dependencies is certainly very far from the worst thing on NPM (I have seen hundreds in some libraries), I would like to see some work done that drives things in the other direction.\r\n\r\nPerhaps there are some low hanging fruit dependencies that could be replaced with a few lines of code rather than bringing in a dependency?  Are there any features that are unnecessary/no one uses that are the only reason a dependency exists?\r\n\r\n![image](https://user-images.githubusercontent.com/886059/211300050-1e9eb3c7-fa91-4f9e-862d-3115a502f9b6.png)",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1938/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1938/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1937",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1937/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1937/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1937/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1937",
        "id": 1523004554,
        "node_id": "I_kwDOAlTKGc5axzSK",
        "number": 1937,
        "title": "Expose SWC plugins configuration",
        "user": {
          "login": "dmaretskyi",
          "id": 35851437,
          "node_id": "MDQ6VXNlcjM1ODUxNDM3",
          "avatar_url": "https://avatars.githubusercontent.com/u/35851437?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dmaretskyi",
          "html_url": "https://github.com/dmaretskyi",
          "followers_url": "https://api.github.com/users/dmaretskyi/followers",
          "following_url": "https://api.github.com/users/dmaretskyi/following{/other_user}",
          "gists_url": "https://api.github.com/users/dmaretskyi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/dmaretskyi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/dmaretskyi/subscriptions",
          "organizations_url": "https://api.github.com/users/dmaretskyi/orgs",
          "repos_url": "https://api.github.com/users/dmaretskyi/repos",
          "events_url": "https://api.github.com/users/dmaretskyi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/dmaretskyi/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-01-06T18:55:53Z",
        "updated_at": "2023-03-14T20:16:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nSWC added support for WASM-based ast transformers. It would be useful to expose this in the configuration.\r\n\r\nThe config is JSON-compatible, so it could be read from the \"ts-node\" section in tsconfig.json:\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    ...\r\n  },\r\n  \"ts-node\": {\r\n    \"swc\": true,\r\n    \"swcConfig\": {\r\n      \"jsc\": {\r\n        \"experimental\": {\r\n            \"plugins\": [\r\n              [\"my-plugin\", { \"pluginOption\": true }]\r\n            ]\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Alternatives you've considered\r\n\r\n\r\nWe're currently using a PNPM patch to hack in this feature: https://github.com/dxos/dxos/pull/2220/files/09762cb5b7f322f8f7d999aae98011d14b27927e#diff-67ce40d8249e12d3c63b1a3aaa38589a39e22b32383a74e696933cf05a63fa8a ",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1937/reactions",
          "total_count": 2,
          "+1": 2,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1937/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1936",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1936/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1936/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1936/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1936",
        "id": 1516894759,
        "node_id": "I_kwDOAlTKGc5aafon",
        "number": 1936,
        "title": "ts-node won't resolve unpostfixed file names",
        "user": {
          "login": "fresheneesz",
          "id": 149531,
          "node_id": "MDQ6VXNlcjE0OTUzMQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/149531?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fresheneesz",
          "html_url": "https://github.com/fresheneesz",
          "followers_url": "https://api.github.com/users/fresheneesz/followers",
          "following_url": "https://api.github.com/users/fresheneesz/following{/other_user}",
          "gists_url": "https://api.github.com/users/fresheneesz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fresheneesz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fresheneesz/subscriptions",
          "organizations_url": "https://api.github.com/users/fresheneesz/orgs",
          "repos_url": "https://api.github.com/users/fresheneesz/repos",
          "events_url": "https://api.github.com/users/fresheneesz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fresheneesz/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-01-03T03:40:51Z",
        "updated_at": "2023-03-27T08:00:23Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nfile extension resolve\r\n\r\n### Expected Behavior\r\n\r\n`npx ts-node --esm test` should run the `test.ts` file. \r\n\r\n### Actual Behavior\r\n\r\n`Cannot find module '/<root>/test/test'`\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. Create a file `test.ts` and put anything in it. Or nothing.\r\n2. Run `npx ts-node --esm test`\r\n\r\n### Minimal reproduction\r\n\r\nSee above.\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v19.3.0\r\n* TypeScript version: tsc version 4.9.4\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n\t\"compilerOptions\": {\r\n\t\t\"target\": \"es2021\",\r\n\t\t\"lib\": [\r\n\t\t\t\"es2021\"\r\n\t\t] ,\r\n\t\t\"jsx\": \"react\" ,\r\n\t\t/* Modules */\r\n\t\t\"module\": \"es2022\" ,\r\n\t\t\"moduleResolution\": \"node\",\r\n\t\t\"types\": [\r\n\t\t\t\"@cloudflare/workers-types\",\r\n\t\t\t\"jest\"\r\n\t\t] ,\r\n\t\t\"resolveJsonModule\": true ,\r\n\r\n\t\t/* JavaScript Support */\r\n\t\t\"allowJs\": true ,\r\n\t\t\"checkJs\": false ,\r\n\r\n\t\t\"noEmit\": true ,\r\n\r\n\t\t/* Interop Constraints */\r\n\t\t\"allowSyntheticDefaultImports\": true ,\r\n\t\t\"forceConsistentCasingInFileNames\": true ,\r\n\r\n\t\t/* Type Checking */\r\n\t\t\"strict\": true,\r\n\r\n\t\t/* Completeness */\r\n\t\t\"skipLibCheck\": true\r\n\t}\r\n}\r\n\r\n```\r\n* package.json:\r\n```\r\n{\"type\": \"module\"}\r\n```\r\n* Operating system and version: Windows 10\r\n* If Windows, are you using WSL or WSL2?: WSL2\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1936/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1936/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1934",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1934/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1934/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1934/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1934",
        "id": 1513277878,
        "node_id": "I_kwDOAlTKGc5aMsm2",
        "number": 1934,
        "title": "[esm] Cannot import from external packages with an `exports` field that contains a wildcard and an extension",
        "user": {
          "login": "jmartinezmaes",
          "id": 37962558,
          "node_id": "MDQ6VXNlcjM3OTYyNTU4",
          "avatar_url": "https://avatars.githubusercontent.com/u/37962558?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jmartinezmaes",
          "html_url": "https://github.com/jmartinezmaes",
          "followers_url": "https://api.github.com/users/jmartinezmaes/followers",
          "following_url": "https://api.github.com/users/jmartinezmaes/following{/other_user}",
          "gists_url": "https://api.github.com/users/jmartinezmaes/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jmartinezmaes/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jmartinezmaes/subscriptions",
          "organizations_url": "https://api.github.com/users/jmartinezmaes/orgs",
          "repos_url": "https://api.github.com/users/jmartinezmaes/repos",
          "events_url": "https://api.github.com/users/jmartinezmaes/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jmartinezmaes/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2022-12-29T01:08:41Z",
        "updated_at": "2024-01-26T09:10:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nesm, external, exports, wildcard, extension\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nIf a package defines an `exports` field\r\n\r\n```json\r\n// foo_pkg/package.json\r\n\r\n\"exports\": {\r\n    \"./*.js\": \"./dist/*.js\"\r\n}\r\n```\r\n\r\nAnd a consuming package imports:\r\n\r\n```ts\r\n// src/import_foo.ts\r\n\r\nimport { foo } from \"foo_pkg/foo.js\";\r\n\r\nconsole.log(foo);\r\n```\r\n\r\nThe program should compile and execute with `ts-node-esm`.\r\n\r\n### Actual Behavior\r\n\r\nAn `ERR_PACKAGE_PATH_NOT_EXPORTED` exception is raised.\r\n\r\n### Steps to reproduce the problem\r\n\r\nI have made a [branch on a repo](https://github.com/jm4rtinez/ts_node_sandbox/tree/ts_node_import_err) to reproduce this issue.\r\n\r\n### Minimal reproduction\r\n\r\n```sh\r\ngit clone --single-branch --branch ts_node_import_err https://github.com/jm4rtinez/ts_node_sandbox.git\r\nnpm install\r\nnpx ts-node-esm ./src/import_foo.ts\r\n```\r\n\r\nIf the compiled form of the program is run with Node, no error occurs:\r\n\r\n```sh\r\nnode ./dist/import_foo.js\r\n```\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: 19.2.0\r\n* TypeScript version: 4.9.4\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"ES2022\",\r\n        \"module\": \"ES2022\",\r\n        \"moduleResolution\": \"NodeNext\",\r\n        \"declaration\": true,\r\n        \"declarationMap\": true,\r\n        \"sourceMap\": true,\r\n        \"strict\": true,\r\n        \"outDir\": \"dist\"\r\n    },\r\n    \"include\": [\"src\"]\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n    \"name\": \"ts-node-sandbox\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"type\": \"module\",\r\n    \"scripts\": {},\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\",\r\n    \"devDependencies\": {\r\n        \"ts-node\": \"^10.9.1\",\r\n        \"typescript\": \"~4.9\"\r\n    },\r\n    \"dependencies\": {\r\n        \"foo_pkg\": \"file:foo_pkg-1.0.0.tgz\"\r\n    }\r\n}\r\n```\r\n* Operating system and version: Windows 10 Pro Version 10.0.19045 Build 19045\r\n* If Windows, are you using WSL or WSL2?: WSL2 Ubuntu 20.04.5 LTS\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1934/reactions",
          "total_count": 5,
          "+1": 5,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1934/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1933",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1933/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1933/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1933/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1933",
        "id": 1507136891,
        "node_id": "I_kwDOAlTKGc5Z1RV7",
        "number": 1933,
        "title": "Support for yarn pnp ESM resolver",
        "user": {
          "login": "notpeelz",
          "id": 920910,
          "node_id": "MDQ6VXNlcjkyMDkxMA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/920910?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/notpeelz",
          "html_url": "https://github.com/notpeelz",
          "followers_url": "https://api.github.com/users/notpeelz/followers",
          "following_url": "https://api.github.com/users/notpeelz/following{/other_user}",
          "gists_url": "https://api.github.com/users/notpeelz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/notpeelz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/notpeelz/subscriptions",
          "organizations_url": "https://api.github.com/users/notpeelz/orgs",
          "repos_url": "https://api.github.com/users/notpeelz/repos",
          "events_url": "https://api.github.com/users/notpeelz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/notpeelz/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-12-22T01:59:51Z",
        "updated_at": "2022-12-22T01:59:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Since https://github.com/nodejs/node/pull/43772, I'm able to use the `ts-node/esm` loader on top of yarn pnp.\r\n\r\ne.g: `node -r ./.pnp.cjs --loader ./.pnp.loader.mjs --loader ts-node/esm ./test.mts`,\r\nIt loads ts-node from `./yarn/cache/...ts-node.zip` and runs `test.mts` as expected.\r\nTested on node v20.0.0-nightly2022122151246139e7.\r\n\r\nHowever, ts-node's ESM loader doesn't resolve packages through yarn pnp.\r\nAre there any other issues blocking this feature?\r\n\r\nParent: https://github.com/TypeStrong/ts-node/issues/1756\r\nRelated: https://github.com/TypeStrong/ts-node/issues/1007",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1933/reactions",
          "total_count": 8,
          "+1": 4,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 4
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1933/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1931",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1931/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1931/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1931/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1931",
        "id": 1501729158,
        "node_id": "I_kwDOAlTKGc5ZgpGG",
        "number": 1931,
        "title": "Type-checking when using external transpilers ",
        "user": {
          "login": "aminya",
          "id": 16418197,
          "node_id": "MDQ6VXNlcjE2NDE4MTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/16418197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/aminya",
          "html_url": "https://github.com/aminya",
          "followers_url": "https://api.github.com/users/aminya/followers",
          "following_url": "https://api.github.com/users/aminya/following{/other_user}",
          "gists_url": "https://api.github.com/users/aminya/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/aminya/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/aminya/subscriptions",
          "organizations_url": "https://api.github.com/users/aminya/orgs",
          "repos_url": "https://api.github.com/users/aminya/repos",
          "events_url": "https://api.github.com/users/aminya/events{/privacy}",
          "received_events_url": "https://api.github.com/users/aminya/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-12-18T03:54:37Z",
        "updated_at": "2022-12-18T03:54:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nI would like to use external transpilers like esbuild, but I still want to type-check my code.\r\n\r\n\r\n### Is this request related to a problem?\r\n\r\nWhen using external transpilers, the correctness of the code isn't checked. The IDE type checking doesn't help, because the IDE doesn't check all the files in a large code base.\r\n\r\n\r\n<!-- Describe the problem, for example: \"I'm always frustrated when ... \" -->\r\n\r\n### Alternatives you've considered\r\n\r\nRunning `tsc --noEmit` before running `ts-node`. But this is not ideal \r\n\r\n### Additional context\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1931/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1931/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1919",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1919/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1919/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1919/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1919",
        "id": 1482278699,
        "node_id": "I_kwDOAlTKGc5YWccr",
        "number": 1919,
        "title": "importing file from constants.JS showing this error",
        "user": {
          "login": "Dudeprogram",
          "id": 94228254,
          "node_id": "U_kgDOBZ3PHg",
          "avatar_url": "https://avatars.githubusercontent.com/u/94228254?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Dudeprogram",
          "html_url": "https://github.com/Dudeprogram",
          "followers_url": "https://api.github.com/users/Dudeprogram/followers",
          "following_url": "https://api.github.com/users/Dudeprogram/following{/other_user}",
          "gists_url": "https://api.github.com/users/Dudeprogram/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Dudeprogram/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Dudeprogram/subscriptions",
          "organizations_url": "https://api.github.com/users/Dudeprogram/orgs",
          "repos_url": "https://api.github.com/users/Dudeprogram/repos",
          "events_url": "https://api.github.com/users/Dudeprogram/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Dudeprogram/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-12-07T16:07:06Z",
        "updated_at": "2022-12-07T16:08:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "[Running] node \"/Users/rehmanhyder/Documents/node.Js/task96/solution.js\"\r\nnode:internal/errors:484\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".JS\" for /Users/rehmanhyder/Documents/node.Js/task96/constants.JS\r\n    at new NodeError (node:internal/errors:393:5)\r\n    at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:79:11)\r\n    at defaultGetFormat (node:internal/modules/esm/get_format:121:38)\r\n    at defaultLoad (node:internal/modules/esm/load:81:20)\r\n    at nextLoad (node:internal/modules/esm/loader:163:28)\r\n    at ESMLoader.load (node:internal/modules/esm/loader:605:26)\r\n    at ESMLoader.moduleProvider (node:internal/modules/esm/loader:457:22)\r\n    at new ModuleJob (node:internal/modules/esm/module_job:63:26)\r\n    at #createModuleJob (node:internal/modules/esm/loader:480:17)\r\n    at ESMLoader.getModuleJob (node:internal/modules/esm/loader:434:34) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n\r\nNode.js v18.12.1\r\n\r\n[Done] exited with code=1 in 0.447 seconds\r\n\r\nconstants.JS file code:(export const HELLO = \"Hello, export world!\"\r\nconsole.log(HELLO);)\r\n\r\n\r\nsolution.js file code(import { HELLO } from \"./constants.JS\";\r\nconsole.log(HELLO);)",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1919/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1919/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1917",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1917/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1917/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1917/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1917",
        "id": 1469170790,
        "node_id": "I_kwDOAlTKGc5XkcRm",
        "number": 1917,
        "title": "Cannot enable 'swc' option with 'transpileOnly: false'.  'swc' implies 'transpileOnly'",
        "user": {
          "login": "taitasu555",
          "id": 75059685,
          "node_id": "MDQ6VXNlcjc1MDU5Njg1",
          "avatar_url": "https://avatars.githubusercontent.com/u/75059685?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/taitasu555",
          "html_url": "https://github.com/taitasu555",
          "followers_url": "https://api.github.com/users/taitasu555/followers",
          "following_url": "https://api.github.com/users/taitasu555/following{/other_user}",
          "gists_url": "https://api.github.com/users/taitasu555/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/taitasu555/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/taitasu555/subscriptions",
          "organizations_url": "https://api.github.com/users/taitasu555/orgs",
          "repos_url": "https://api.github.com/users/taitasu555/repos",
          "events_url": "https://api.github.com/users/taitasu555/events{/privacy}",
          "received_events_url": "https://api.github.com/users/taitasu555/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-11-30T07:25:47Z",
        "updated_at": "2022-11-30T07:26:58Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\nCannot enable 'swc' option even if  'transpileOnly: true'\r\n\r\n### Expected Behavior\r\nsetting tsconfig.json like below\r\n```\r\n  \"ts-node\": {\r\n    \"transpileOnly\": true,\r\n    \"swc\": true\r\n  },\r\n```\r\n\r\nthen enable to use swc\r\n\r\n### Actual Behavior\r\n\r\nour tsconfig like below and typescript version is v4.7.4\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\r\n\r\n    /* Basic Options */\r\n    // \"incremental\": true,                         /* Enable incremental compilation */\r\n    \"target\": \"ES2021\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */,\r\n    \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\r\n    // \"lib\": [],                                   /* Specify library files to be included in the compilation. */\r\n    \"allowJs\": true /* Allow javascript files to be compiled. */,\r\n    \"checkJs\": false /* Report errors in .js files. */,\r\n    // \"declaration\": true,                         /* Generates corresponding '.d.ts' file. */\r\n    // \"declarationMap\": true,                      /* Generates a sourcemap for each corresponding '.d.ts' file. */\r\n    // \"sourceMap\": true,                           /* Generates corresponding '.map' file. */\r\n    // \"outFile\": \"./\",                             /* Concatenate and emit output to single file. */\r\n    \"outDir\": \"dist\" /* Redirect output structure to the directory. */,\r\n    // \"rootDir\": \"./\",                             /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\r\n    // \"composite\": true,                           /* Enable project compilation */\r\n    // \"tsBuildInfoFile\": \"./\",                     /* Specify file to store incremental compilation information */\r\n    // \"removeComments\": true,                      /* Do not emit comments to output. */\r\n    // \"noEmit\": true,                              /* Do not emit outputs. */\r\n    // \"importHelpers\": true,                       /* Import emit helpers from 'tslib'. */\r\n    // \"downlevelIteration\": true,                  /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\r\n    // \"isolatedModules\": true,                     /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\r\n\r\n    /* Strict Type-Checking Options */\r\n    \"strict\": false /* Enable all strict type-checking options. */,\r\n    \"noImplicitAny\": false /* Raise error on expressions and declarations with an implied 'any' type. */,\r\n    \"strictNullChecks\": false /* Enable strict null checks. */,\r\n    \"strictFunctionTypes\": false /* Enable strict checking of function types. */,\r\n    \"strictBindCallApply\": false /* Enable strict 'bind', 'call', and 'apply' methods on functions. */,\r\n    \"strictPropertyInitialization\": false /* Enable strict checking of property initialization in classes. */,\r\n    \"noImplicitThis\": false /* Raise error on 'this' expressions with an implied 'any' type. */,\r\n    \"alwaysStrict\": true /* Parse in strict mode and emit \"use strict\" for each source file. */,\r\n\r\n    /* Additional Checks */\r\n    \"noUnusedLocals\": true /* Report errors on unused locals. */,\r\n    \"noUnusedParameters\": true /* Report errors on unused parameters. */,\r\n    \"noImplicitReturns\": true /* Report error when not all code paths in function return a value. */,\r\n    \"noFallthroughCasesInSwitch\": true /* Report errors for fallthrough cases in switch statement. */,\r\n    \"noUncheckedIndexedAccess\": true /* Include 'undefined' in index signature results */,\r\n    \"noImplicitOverride\": true /* Ensure overriding members in derived classes are marked with an 'override' modifier. */,\r\n    \"noPropertyAccessFromIndexSignature\": true /* Require undeclared properties from index signatures to use element accesses. */,\r\n\r\n    /* Module Resolution Options */\r\n    // \"moduleResolution\": \"node\",                  /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\r\n    // \"baseUrl\": \"./\",                             /* Base directory to resolve non-absolute module names. */\r\n    // \"paths\": {},                                 /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\r\n    // \"rootDirs\": [],                              /* List of root folders whose combined content represents the structure of the project at runtime. */\r\n    // \"typeRoots\": [],                             /* List of folders to include type definitions from. */\r\n    // \"types\": [],                                 /* Type declaration files to be included in compilation. */\r\n    // \"allowSyntheticDefaultImports\": true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\r\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\r\n    // \"preserveSymlinks\": true,                    /* Do not resolve the real path of symlinks. */\r\n    // \"allowUmdGlobalAccess\": true,                /* Allow accessing UMD globals from modules. */\r\n\r\n    /* Source Map Options */\r\n    // \"sourceRoot\": \"\",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */\r\n    // \"mapRoot\": \"\",                               /* Specify the location where debugger should locate map files instead of generated locations. */\r\n    // \"inlineSourceMap\": true,                     /* Emit a single file with source maps instead of having a separate file. */\r\n    // \"inlineSources\": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\r\n\r\n    /* Experimental Options */\r\n    // \"experimentalDecorators\": true,              /* Enables experimental support for ES7 decorators. */\r\n    // \"emitDecoratorMetadata\": true,               /* Enables experimental support for emitting type metadata for decorators. */\r\n\r\n    /* Advanced Options */\r\n    \"skipLibCheck\": true /* Skip type checking of declaration files. */,\r\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\r\n  },\r\n  \"ts-node\": {\r\n    \"transpileOnly\": true,\r\n    \"swc\": true\r\n  },\r\n  \"include\": [\"src/**/*\"]\r\n}\r\n```\r\n\r\n\r\nuse transpile only true so enable to use swc but error showing\r\n```\r\n Cannot enable 'swc' option with 'transpileOnly: false'.  'swc' implies 'transpileOnly'.\r\n```\r\n\r\nour team will migrate js to typescript, so most of the code is javascript. maybe this is related to this problem.\r\n\r\n\r\n\r\n### Specifications\r\n\"ts-node-dev\": 2.0.0\",\"typescript\": \"4.7.4\"\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1917/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1917/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1916",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1916/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1916/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1916/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1916",
        "id": 1468971686,
        "node_id": "I_kwDOAlTKGc5Xjrqm",
        "number": 1916,
        "title": "SyntaxError: Cannot use import statement outside a module",
        "user": {
          "login": "Zswsown",
          "id": 68231493,
          "node_id": "MDQ6VXNlcjY4MjMxNDkz",
          "avatar_url": "https://avatars.githubusercontent.com/u/68231493?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Zswsown",
          "html_url": "https://github.com/Zswsown",
          "followers_url": "https://api.github.com/users/Zswsown/followers",
          "following_url": "https://api.github.com/users/Zswsown/following{/other_user}",
          "gists_url": "https://api.github.com/users/Zswsown/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Zswsown/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Zswsown/subscriptions",
          "organizations_url": "https://api.github.com/users/Zswsown/orgs",
          "repos_url": "https://api.github.com/users/Zswsown/repos",
          "events_url": "https://api.github.com/users/Zswsown/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Zswsown/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-11-30T02:54:38Z",
        "updated_at": "2022-12-18T09:45:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "// tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"esnext\",\r\n    \"module\": \"CommonJS\",\r\n    \"types\": [\"node\"],\r\n    \"strict\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"importHelpers\": true,\r\n    \"moduleResolution\": \"node\",\r\n    \"skipLibCheck\": true,\r\n    \"esModuleInterop\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"sourceMap\": true,\r\n    \"baseUrl\": \".\",\r\n    \"outDir\": \"./output\",\r\n    \"declaration\": true, // 是否生成声明文件\r\n    \"declarationDir\": \"./dist\", // 声明文件打包的位置\r\n    \"lib\": [\"esnext\", \"dom\", \"dom.iterable\", \"scripthost\"],\r\n    \"noImplicitThis\": false\r\n  },\r\n  \"include\": [\"src/**/*\"] /* 指定需要编译的目录范围 */,\r\n  \"exclude\": [\"node_modules\"] /* 忽略类型检查的目录 */\r\n}\r\n\r\nWhen I want to import files by ’await import‘ or 'require()' in the koa server service layer，it made a mistake\r\n\r\n SyntaxError: Cannot use import statement outside a module",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1916/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1916/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1915",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1915/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1915/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1915/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1915",
        "id": 1465457335,
        "node_id": "I_kwDOAlTKGc5XWRq3",
        "number": 1915,
        "title": "Errors with @swc/wasm 1.3.20",
        "user": {
          "login": "Janpot",
          "id": 2109932,
          "node_id": "MDQ6VXNlcjIxMDk5MzI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2109932?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Janpot",
          "html_url": "https://github.com/Janpot",
          "followers_url": "https://api.github.com/users/Janpot/followers",
          "following_url": "https://api.github.com/users/Janpot/following{/other_user}",
          "gists_url": "https://api.github.com/users/Janpot/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Janpot/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Janpot/subscriptions",
          "organizations_url": "https://api.github.com/users/Janpot/orgs",
          "repos_url": "https://api.github.com/users/Janpot/repos",
          "events_url": "https://api.github.com/users/Janpot/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Janpot/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-11-27T14:23:45Z",
        "updated_at": "2023-01-30T08:27:52Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nswc\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nNo errors when running scripts after updating `@swc/wasm` from 1.3.18 to 1.3.20\r\n\r\n### Actual Behavior\r\n\r\nErrors when running scripts after updating `@swc/wasm` from 1.3.18 to 1.3.20\r\n\r\n### Steps to reproduce the problem\r\n\r\n1. Open https://stackblitz.com/edit/node-lw1wmy?file=tsconfig.json,index.ts,package.json\r\n2. Run `ts-node index.ts`\r\n3. Observe error\r\n    ```\r\n    /home/projects/node-lw1wmy/node_modules/ts-node/src/transpilers/swc.ts:262\r\n          throw new Error(\r\n                ^\r\n    Error: @swc/wasm threw an error when attempting to validate swc compiler options.\r\n    You may be using an old version of swc which does not support the options used by ts-node.\r\n    Try upgrading to the latest version of swc.\r\n    Error message from swc:\r\n    ```\r\n4. downgrade to `@swc/wasm@1.3.18` and run again to see it work.\r\n\r\n### Minimal reproduction\r\n\r\nhttps://stackblitz.com/edit/node-lw1wmy?file=tsconfig.json,index.ts,package.json\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: v10.9.1\r\n* node version: v16.14.2\r\n* TypeScript version: v4.9.3\r\n* tsconfig.json, if you're using one:\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"CommonJS\"\r\n  },\r\n  \"ts-node\": {\r\n    \"swc\": true\r\n  }\r\n}\r\n\r\n```\r\n* package.json:\r\n```json\r\n{\r\n  \"name\": \"node-starter\",\r\n  \"version\": \"0.0.0\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@swc/wasm\": \"1.3.20\",\r\n    \"@types/node\": \"^18.11.9\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^4.9.3\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: Stackblitz\r\n* If Windows, are you using WSL or WSL2?:\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1915/reactions",
          "total_count": 4,
          "+1": 4,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1915/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1912",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1912/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1912/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1912/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1912",
        "id": 1456720227,
        "node_id": "I_kwDOAlTKGc5W08lj",
        "number": 1912,
        "title": "ts-node-esm autorestart and log",
        "user": {
          "login": "ubuntutest",
          "id": 13025037,
          "node_id": "MDQ6VXNlcjEzMDI1MDM3",
          "avatar_url": "https://avatars.githubusercontent.com/u/13025037?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ubuntutest",
          "html_url": "https://github.com/ubuntutest",
          "followers_url": "https://api.github.com/users/ubuntutest/followers",
          "following_url": "https://api.github.com/users/ubuntutest/following{/other_user}",
          "gists_url": "https://api.github.com/users/ubuntutest/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ubuntutest/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ubuntutest/subscriptions",
          "organizations_url": "https://api.github.com/users/ubuntutest/orgs",
          "repos_url": "https://api.github.com/users/ubuntutest/repos",
          "events_url": "https://api.github.com/users/ubuntutest/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ubuntutest/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-11-20T00:55:37Z",
        "updated_at": "2022-11-20T00:55:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "currently to start my app in production, in an ubuntu screen, I use the command:\r\n`nohup ts-node-esm --transpile-only index.ts> / dev / null 2> & 1 &`\r\n\r\n_if I use this command it is because I have too many configurations in tsconfig.json and package.json, with ts and other modules, I have not been able to build and make everything work. so I use this command._\r\n\r\nI would like to have the app restart automatically after a crash, and maybe even write the error to a log file.\r\n\r\nto automatically restart the app I used:\r\n```\r\nnodemon\r\nnpx nodemon\r\nts-node-dev\r\nforever\r\n```\r\nand others, but nothing seems to work, the \"`--transpile-only`\" flag is a must, I can't not use it.\r\n\r\nonce I understand how to automatically restart the app I would also like to log the error in a file",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1912/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1912/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1909",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1909/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1909/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1909/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1909",
        "id": 1437471099,
        "node_id": "I_kwDOAlTKGc5VrhF7",
        "number": 1909,
        "title": "`--import` flag for Node.js parity",
        "user": {
          "login": "Thundercraft5",
          "id": 69543685,
          "node_id": "MDQ6VXNlcjY5NTQzNjg1",
          "avatar_url": "https://avatars.githubusercontent.com/u/69543685?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Thundercraft5",
          "html_url": "https://github.com/Thundercraft5",
          "followers_url": "https://api.github.com/users/Thundercraft5/followers",
          "following_url": "https://api.github.com/users/Thundercraft5/following{/other_user}",
          "gists_url": "https://api.github.com/users/Thundercraft5/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Thundercraft5/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Thundercraft5/subscriptions",
          "organizations_url": "https://api.github.com/users/Thundercraft5/orgs",
          "repos_url": "https://api.github.com/users/Thundercraft5/repos",
          "events_url": "https://api.github.com/users/Thundercraft5/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Thundercraft5/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2022-11-06T17:00:51Z",
        "updated_at": "2024-06-04T06:18:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nShould work exactly as node's `--import` flag, optionally an `-I` alias.\r\n\r\n### Alternatives you've considered\r\nRunning `node --loader ts-node/esm` with a local file path results in an error:\r\n```\r\n> node --import \".\\src\\configs.ts\" --loader ts-node/esm\r\n(node:9468) ExperimentalWarning: Custom ESM Loaders is an experimental feature. This feature could change at any time\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resolve.js:695\r\n    throw new ERR_INVALID_MODULE_SPECIFIER(\r\n          ^\r\nCustomError: ERR_INVALID_MODULE_SPECIFIER .\\src\\configs.ts is not a valid package name <omitted>\\Development\\Libraries\\NodeJS\\eslint-plu\r\ngin\\\r\n    at parsePackageName (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-re\r\nsolve.js:695:11)\r\n    at packageResolve (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-reso\r\nlve.js:713:5)\r\n    at moduleResolve (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\dist-raw\\node-internal-modules-esm-resol\r\nve.js:798:18)\r\n    at Object.defaultResolve (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\dist-raw\\node-internal-modules-e\r\nsm-resolve.js:912:11)\r\n    at <omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\src\\esm.ts:218:35\r\n    at entrypointFallback (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\src\\esm.ts:168:34)\r\n    at <omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\src\\esm.ts:217:14\r\n    at addShortCircuitFlag (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\src\\esm.ts:409:21)\r\n    at resolve (<omitted>\\Development\\Libraries\\NodeJS\\eslint-plugin\\node_modules\\ts-node\\src\\esm.ts:197:12)\r\n    at nextResolve (node:internal/modules/esm/loader:161:28)\r\n ```\r\n\r\n### Additional context\r\nNode.js [recently added](https://nodejs.org/dist/latest-v19.x/docs/api/cli.html#--importmodule) the `--import` flag in v19.\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1909/reactions",
          "total_count": 7,
          "+1": 7,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1909/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1903",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1903/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1903/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1903/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1903",
        "id": 1419907183,
        "node_id": "I_kwDOAlTKGc5UohBv",
        "number": 1903,
        "title": "When running .js files using allowJs, ts-node does not respect source maps in stack traces",
        "user": {
          "login": "adamsmasher",
          "id": 246294,
          "node_id": "MDQ6VXNlcjI0NjI5NA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/246294?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/adamsmasher",
          "html_url": "https://github.com/adamsmasher",
          "followers_url": "https://api.github.com/users/adamsmasher/followers",
          "following_url": "https://api.github.com/users/adamsmasher/following{/other_user}",
          "gists_url": "https://api.github.com/users/adamsmasher/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/adamsmasher/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/adamsmasher/subscriptions",
          "organizations_url": "https://api.github.com/users/adamsmasher/orgs",
          "repos_url": "https://api.github.com/users/adamsmasher/repos",
          "events_url": "https://api.github.com/users/adamsmasher/events{/privacy}",
          "received_events_url": "https://api.github.com/users/adamsmasher/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-10-23T19:40:49Z",
        "updated_at": "2022-10-23T19:52:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\nI searched for `allowJs` and didn't see anything clearly related in either open or closed issues.\r\n\r\n### Expected Behavior\r\n\r\nWhen executing transpiled `.js` files with a source map using `allowJs`, `ts-node` should work like `node --enable-source-maps`: stack traces should show the original source file/line number, not the transpiled file/line number.\r\n\r\n### Actual Behavior\r\n\r\nThe opposite: `ts-node` shows the transpiled file/line number. This only happens when `allowJs` is on - turning it off causes `ts-node` to work correctly.\r\n\r\n### Steps to reproduce the problem\r\n\r\nEnable `allowJs` and `sourceMaps` in `tsconfig.json`. Transpile files using `tsc`. Run the transpiled files using `ts-node`. When an exception is thrown, note that the stack trace refers to the transpiled files and not the original `.ts` files. Compare to running with `node --enable-source-maps`, which does the right thing.\r\n\r\n### Minimal reproduction\r\n\r\nI've put up a yarn 1 repo [here](https://github.com/adamsmasher/source-map-issue) showing this in action. After running `yarn tsc`, `yarn ts-node dist/index.js` produces:\r\n\r\n```\r\n% yarn ts-node dist/index.js\r\nyarn run v1.22.17\r\n$ /Users/adam/source-maps-issue/node_modules/.bin/ts-node dist/index.js\r\n/Users/adam/source-maps-issue/dist/bad.js:5\r\n    throw new Error(\"An exception\");\r\n          ^\r\nError: An exception\r\n    at throwAnException (/Users/adam/source-maps-issue/dist/bad.js:5:11)\r\n    at Object.<anonymous> (/Users/adam/source-maps-issue/dist/index.js:4:28)\r\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\r\n    at Module.m._compile (/Users/adam/source-maps-issue/node_modules/ts-node/src/index.ts:1618:23)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\r\n    at Object.require.extensions.<computed> [as .js] (/Users/adam/source-maps-issue/node_modules/ts-node/src/index.ts:1621:12)\r\n    at Module.load (node:internal/modules/cjs/loader:981:32)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\r\n    at phase4 (/Users/adam/source-maps-issue/node_modules/ts-node/src/bin.ts:649:14)\r\n\r\n```\r\n\r\nwhere as `yarn node --enable-stack-traces dist/index.js` produces:\r\n\r\n```\r\n% yarn node --enable-source-maps dist/index.js\r\nyarn node v1.22.17\r\n/Users/adam/source-maps-issue/src/bad.ts:2\r\n  throw new Error(\"An exception\");\r\n        ^\r\n\r\nError: An exception\r\n    at null.throwAnException (/Users/adam/source-maps-issue/src/bad.ts:2:9)\r\n    at Object.<anonymous> (/Users/adam/source-maps-issue/src/index.ts:3:17)\r\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\r\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\r\n    at Module.load (node:internal/modules/cjs/loader:981:32)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\r\n    at node:internal/main/run_main_module:17:47\r\n```\r\n\r\n### Specifications\r\n\r\nts-node v10.9.1\r\nnode v16.13.0\r\ncompiler v4.8.4\r\n\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"extends\": \"@tsconfig/node16/tsconfig.json\",\r\n  \"compilerOptions\": {\r\n\r\n    /* Emit */\r\n    \"sourceMap\": true,\r\n    \"outDir\": \"./dist\",\r\n\r\n    \"allowJs\": true\r\n  },\r\n  \"include\": [ \"src\" ],\r\n}\r\n```\r\n* package.json:\r\n```\r\n{\r\n  \"name\": \"source-map-issue\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"index.js\",\r\n  \"private\": true,\r\n  \"author\": \"Adam Smith <adam@scenery.video>\",\r\n  \"license\": \"UNLICENSED\",\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"16\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"typescript\": \"^4.8.4\"\r\n  }\r\n}\r\n```\r\n* Operating system and version: macOS 11.4\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1903/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1903/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1900",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1900/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1900/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1900/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1900",
        "id": 1408971231,
        "node_id": "I_kwDOAlTKGc5T-zHf",
        "number": 1900,
        "title": "ESM mode does not properly infer config `target` from `\"module\": \"node*\"`",
        "user": {
          "login": "nickserv",
          "id": 927220,
          "node_id": "MDQ6VXNlcjkyNzIyMA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/927220?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/nickserv",
          "html_url": "https://github.com/nickserv",
          "followers_url": "https://api.github.com/users/nickserv/followers",
          "following_url": "https://api.github.com/users/nickserv/following{/other_user}",
          "gists_url": "https://api.github.com/users/nickserv/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/nickserv/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/nickserv/subscriptions",
          "organizations_url": "https://api.github.com/users/nickserv/orgs",
          "repos_url": "https://api.github.com/users/nickserv/repos",
          "events_url": "https://api.github.com/users/nickserv/events{/privacy}",
          "received_events_url": "https://api.github.com/users/nickserv/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2022-10-14T08:25:48Z",
        "updated_at": "2022-10-14T16:32:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n- ESM target\r\n- `Top-level 'for await' loops are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher.`\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nUsing `\"module\": \"node16\"` or `\"module\": \"nodenext\"` sets `target` to `es2017` or newer and compiles without an error. This is what happens if you use `tsc` instead of `ts-node --esm`.\r\n\r\n### Actual Behavior\r\n\r\n`target` is set to the default of `es5`, causing the following error:\r\n```\r\n/usr/local/lib/node_modules/ts-node/src/index.ts:859\r\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\r\n           ^\r\nTSError: ⨯ Unable to compile TypeScript:\r\nindex.ts:8:5 - error TS1432: Top-level 'for await' loops are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher.\r\n\r\n8 for await (const name of getBeatles()) console.log(name)\r\n      ~~~~~\r\n\r\n    at createTSError (/usr/local/lib/node_modules/ts-node/src/index.ts:859:12)\r\n    at reportTSError (/usr/local/lib/node_modules/ts-node/src/index.ts:863:19)\r\n    at getOutput (/usr/local/lib/node_modules/ts-node/src/index.ts:1077:36)\r\n    at Object.compile (/usr/local/lib/node_modules/ts-node/src/index.ts:1433:41)\r\n    at transformSource (/usr/local/lib/node_modules/ts-node/src/esm.ts:400:37)\r\n    at /usr/local/lib/node_modules/ts-node/src/esm.ts:278:53\r\n    at async addShortCircuitFlag (/usr/local/lib/node_modules/ts-node/src/esm.ts:409:15)\r\n    at async nextLoad (node:internal/modules/esm/loader:163:22)\r\n    at async ESMLoader.load (node:internal/modules/esm/loader:601:20)\r\n    at async ESMLoader.moduleProvider (node:internal/modules/esm/loader:457:11) {\r\n  diagnosticCodes: [ 1432 ]\r\n}\r\n```\r\n\r\n### Steps to reproduce the problem\r\n\r\nUse `\"module\": \"node16\"` or `\"module\": \"nodenext\"` without `target` and with `\"type\": \"module\"` in `package.json`.\r\n\r\n### Minimal reproduction\r\n\r\n```ts\r\n// index.ts\r\nasync function* getBeatles() {\r\n  yield \"John\"\r\n  yield \"Paul\"\r\n  yield \"George\"\r\n  yield \"Ringo\"\r\n}\r\n\r\nfor await (const name of getBeatles()) console.log(name)\r\n```\r\n\r\n`ts-node --esm index.ts`\r\n\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: 18.10.0\r\n* TypeScript version: 4.8.4\r\n* tsconfig.json, if you're using one:\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"node16\",\r\n    \"moduleDetection\": \"force\"\r\n  }\r\n}\r\n```\r\n* package.json:\r\n```json\r\n{\r\n  \"private\": true,\r\n  \"type\": \"module\"\r\n}\r\n```\r\n* Operating system and version: macOS 12.6 (Monterey)\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1900/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1900/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1899",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1899/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1899/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1899/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1899",
        "id": 1408275405,
        "node_id": "I_kwDOAlTKGc5T8JPN",
        "number": 1899,
        "title": "Update \"Ignored files\" > \"File extensions\" to include mjs, mts, cts, cjs",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 281381462,
            "node_id": "MDU6TGFiZWwyODEzODE0NjI=",
            "url": "https://api.github.com/repos/TypeStrong/ts-node/labels/documentation",
            "name": "documentation",
            "color": "bfe5bf",
            "default": true,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-10-13T18:51:50Z",
        "updated_at": "2023-07-30T19:23:47Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": null,
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1899/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1899/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1897",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1897/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1897/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1897/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1897",
        "id": 1402315165,
        "node_id": "I_kwDOAlTKGc5TlaGd",
        "number": 1897,
        "title": "Using any transform plugin messes up sourcemaps",
        "user": {
          "login": "TheMrAmazing",
          "id": 64285083,
          "node_id": "MDQ6VXNlcjY0Mjg1MDgz",
          "avatar_url": "https://avatars.githubusercontent.com/u/64285083?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/TheMrAmazing",
          "html_url": "https://github.com/TheMrAmazing",
          "followers_url": "https://api.github.com/users/TheMrAmazing/followers",
          "following_url": "https://api.github.com/users/TheMrAmazing/following{/other_user}",
          "gists_url": "https://api.github.com/users/TheMrAmazing/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/TheMrAmazing/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/TheMrAmazing/subscriptions",
          "organizations_url": "https://api.github.com/users/TheMrAmazing/orgs",
          "repos_url": "https://api.github.com/users/TheMrAmazing/repos",
          "events_url": "https://api.github.com/users/TheMrAmazing/events{/privacy}",
          "received_events_url": "https://api.github.com/users/TheMrAmazing/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 508009636,
            "node_id": "MDU6TGFiZWw1MDgwMDk2MzY=",
            "url": "https://api.github.com/repos/TypeStrong/ts-node/labels/needs%20more%20info",
            "name": "needs more info",
            "color": "5319e7",
            "default": false,
            "description": null
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-10-09T15:50:13Z",
        "updated_at": "2022-10-13T14:30:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n\r\n\r\n<!--\r\n  What search terms did you use when trying to find an existing bug report?\r\n  List them here so people in the future can find this one more easily.\r\n  Remember to include *closed* issues in your search.\r\n-->\r\n\r\n### Expected Behavior\r\nAs far as I understand it, the following code transform should not make any changes to the typescript code, and so everything should work as normal:\r\n```ts\r\nimport ts from 'typescript'\r\n\r\nexport default function (program: ts.Program) {\r\n    const checker = program.getTypeChecker()\r\n    return (context: ts.TransformationContext) => {\r\n      return (sourceFile: ts.SourceFile) => {\r\n\tconst visitor = (node) => {\r\n            return ts.visitEachChild(node, visitor, context)\r\n        }\r\n        return ts.visitNode(sourceFile, visitor)\r\n      }\r\n    }\r\n  }\r\n```\r\nHowever, when I try and debug using breakpoints in VSCode, all of the line numbers are messed up.\r\n<!--\r\n\r\nThis link explains why we ask for a minimal reproduction.  Thank you in advance!\r\nhttps://gist.github.com/Rich-Harris/88c5fc2ac6dc941b22e7996af05d70ff\r\n\r\nYou can create a reproduction here:\r\nhttps://github.com/TypeStrong/ts-node-repros\r\n-->\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1\r\n* node version: 16.15.0\r\n* TypeScript version: 4.8.4\r\n* tsconfig.json:\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n\t\t\"module\":  \"CommonJS\",\r\n\t\t\"moduleResolution\": \"Node\",\r\n\t\t\"target\": \"ESNext\",\r\n\t\t\"lib\": [\r\n\t\t\t\"ESNext\",\r\n\t\t\t\"DOM\"\r\n\t\t],\r\n\t\t\"esModuleInterop\": true,\r\n\t\t\"alwaysStrict\": true,\r\n\t\t\"allowUnreachableCode\": true,\r\n\t\t\"noImplicitAny\": false,\r\n\t\t\"strictNullChecks\": false,\r\n\t\t\"noImplicitReturns\": true,\r\n\t\t\"noUncheckedIndexedAccess\": false,\r\n\t\t\"noUnusedLocals\": false, \r\n\t\t\"noUnusedParameters\": false,\r\n\t\t\"types\": [\"node\", \"dom\"],\r\n\t\t\"outDir\": \"dist\",\r\n    },\r\n\t\"ts-node\": {\r\n\t\t\"esm\": true,\r\n\t\t\"experimentalSpecifierResolution\": \"node\",\r\n\t\t\"compiler\": \"ttypescript\",\r\n\t\t\"compilerOptions\": {\r\n\t\t\t\"plugins\": [\r\n\t\t\t\t{ \"transform\": \"./lib/praxis/dev/transformer.ts\" }\r\n\t\t\t],\r\n\t\t}\r\n\r\n\t},\r\n    \"exclude\": [\r\n      \"node_modules/**/*\"\r\n    ]\r\n}\r\n```\r\n* package.json:\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"start\": \"node ./dist/index.js\",\r\n    \"debug\": \"ts-node ./entropy-db/index\",\r\n    \"build\": \"ttsc\",\r\n    \"serve:client\": \"npx vite\"\r\n  },\r\n  \"dependencies\": {\r\n    \"typescript\": \"^4.8.4\",\r\n    \"ws\": \"^8.9.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^18.8.2\",\r\n    \"@types/ws\": \"^8.5.3\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tsconfig-paths\": \"^4.1.0\",\r\n    \"ttypescript\": \"^1.5.13\",\r\n    \"vite\": \"^3.1.0\"\r\n  }\r\n}\r\n```\r\n* Operating system and version:\r\nWindows 10\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1897/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1897/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1896",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1896/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1896/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1896/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1896",
        "id": 1402236149,
        "node_id": "I_kwDOAlTKGc5TlGz1",
        "number": 1896,
        "title": "Option to turn specific errors into warnings (e.g. don't fail if a declared variable isn't used)",
        "user": {
          "login": "d4h0",
          "id": 183805,
          "node_id": "MDQ6VXNlcjE4MzgwNQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/183805?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/d4h0",
          "html_url": "https://github.com/d4h0",
          "followers_url": "https://api.github.com/users/d4h0/followers",
          "following_url": "https://api.github.com/users/d4h0/following{/other_user}",
          "gists_url": "https://api.github.com/users/d4h0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/d4h0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/d4h0/subscriptions",
          "organizations_url": "https://api.github.com/users/d4h0/orgs",
          "repos_url": "https://api.github.com/users/d4h0/repos",
          "events_url": "https://api.github.com/users/d4h0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/d4h0/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2022-10-09T10:53:24Z",
        "updated_at": "2022-10-14T14:42:58Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\n\r\nHi,\r\n\r\nIt would be great if we could turn specific diagnostics from being fatal (i.e. failing compilation/execution) into warnings (they are printed to the terminal, but the script gets executed).\r\n\r\n### Is this request related to a problem?\r\n\r\nYes. It's pretty painful if a script can't be executed because, for example, a declared variable isn't used (TS6133). Fixing non-fatal diagnostics like that often leads to significant refactoring work.\r\n\r\nI think, it would be better, to just warn about these issues. This makes it easier to experiment with stuff.\r\n\r\n### Alternatives you've considered\r\n\r\nThere doesn't seem to be an alternative that I like.\r\n\r\nSome potential options are:\r\n\r\n- Turn off type checking completely, or for specific issues (e.g. `ts-node --transpileOnly` or `ts-node --ignoreDiagnostics <code,code>`)\r\n- Don't fail compilation, just print a warning (e.g. `ts-node --logError`).\r\n\r\n### Additional context\r\n\r\nBasically, what I'm asking for is `ts-node --logError <code,code>`\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1896/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1896/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1868",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1868/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1868/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1868/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1868",
        "id": 1346072351,
        "node_id": "I_kwDOAlTKGc5QO28f",
        "number": 1868,
        "title": "Resolution prefers .json over .ts when extension omitted from import specifier",
        "user": {
          "login": "sjoerd222888",
          "id": 10337756,
          "node_id": "MDQ6VXNlcjEwMzM3NzU2",
          "avatar_url": "https://avatars.githubusercontent.com/u/10337756?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sjoerd222888",
          "html_url": "https://github.com/sjoerd222888",
          "followers_url": "https://api.github.com/users/sjoerd222888/followers",
          "following_url": "https://api.github.com/users/sjoerd222888/following{/other_user}",
          "gists_url": "https://api.github.com/users/sjoerd222888/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sjoerd222888/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sjoerd222888/subscriptions",
          "organizations_url": "https://api.github.com/users/sjoerd222888/orgs",
          "repos_url": "https://api.github.com/users/sjoerd222888/repos",
          "events_url": "https://api.github.com/users/sjoerd222888/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sjoerd222888/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2022-08-22T09:08:14Z",
        "updated_at": "2022-09-05T07:21:35Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n\".default is not a constructor\"\r\n\r\n### Expected Behavior\r\n\r\nCan instantiate class instance even if there is a json file with the same name as the class\r\n\r\n### Actual Behavior\r\n\r\nCannot instantiate class instance if there is a json file with the same name as the class\r\n\r\n```bash\r\n    this.config = new Config();\r\n                  ^\r\nTypeError: Config_1.default is not a constructor\r\n```\r\n\r\njust because a file config.json is also present in the folder where the Config.ts class resides.\r\n\r\n### Steps to reproduce the problem\r\n\r\nCreate a typescript class and export module. Add a json file with the same name as the class.\r\nFor example create a Config.ts class and add a Config.json file in the same folder.\r\n\r\nBut code runs fine is build with tsc and then run as JavaScript in node. Problem seems only to occur in ts-node.\r\n\r\n### Minimal reproduction\r\n\r\n**Source folder content:**\r\n\r\nConfig.ts:\r\n\r\n```ts\r\nexport default class Config {\r\n  constructor() {}\r\n  test: string = \"Test\";\r\n}\r\n```\r\n\r\nConfigurationManager.ts:\r\n\r\n```ts\r\nimport Config from \"./Config\";\r\n\r\nexport default class ConfigurationManager {\r\n  private config: Config;\r\n  constructor() {\r\n    this.config = new Config();\r\n  }\r\n  public getConfiguration(): Config {\r\n    return this.config;\r\n  }\r\n}\r\n```\r\n\r\napp.ts:\r\n\r\n```ts\r\nimport ConfigurationManager from \"./ConfigurationManager\";\r\nconst configuration = new ConfigurationManager();\r\nconsole.log(configuration.getConfiguration().test);\r\n```\r\n\r\nconfig.json:\r\n```json\r\n{}\r\n```\r\n\r\n### Specifications\r\n\r\n<!-- `ts-node -vv` will print ts-node, node, and TypeScript versions -->\r\n* ts-node version: 10.9.1 (also tested 9.1.1)\r\n* node version: 16.14.0\r\n* TypeScript version: 4.7.4 (also tested 4.5.4)\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n      \"forceConsistentCasingInFileNames\": true,\r\n      \"module\": \"commonjs\",\r\n      \"esModuleInterop\": true,\r\n      \"outDir\": \"./build\",\r\n      \"rootDir\": \"./source\",\r\n      \"target\": \"es6\",\r\n      \"skipLibCheck\": true,\r\n      \"strict\": true\r\n  }\r\n}\r\n```\r\n* package.json:\r\n```json\r\n{\r\n\t\"name\": \"ts-node-issue\",\r\n\t\"version\": \"1.0.0\",\r\n\t\"description\": \"minimal-example\",\r\n\t\"scripts\": {\r\n\t\t\"start\": \"ts-node source/app.ts\",\r\n\t\t\"build\": \"tsc\"\r\n\t},\r\n\t\"keywords\": [],\r\n\t\"author\": \"sjoerd222888\",\r\n\t\"dependencies\": {\r\n\t\t\"ts-node\": \"^10.9.1\",\r\n\t\t\"typescript\": \"^4.7.4\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"@babel/preset-typescript\": \"^7.16.7\"\r\n\t}\r\n}\r\n```\r\n* Operating system and version: macOS Monterey 12.5 & Windows 10\r\n* If Windows, are you using WSL or WSL2?: No\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1868/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1868/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1864",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1864/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1864/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1864/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1864",
        "id": 1340573410,
        "node_id": "I_kwDOAlTKGc5P54bi",
        "number": 1864,
        "title": "Remove node 18.6.0 bug workaround if they shipped the fix in 18.7.0",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-08-16T16:02:27Z",
        "updated_at": "2022-08-16T16:02:27Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "Check if 18.7.0 fixes the bug in 18.6.0.  If so, remove hack here: https://github.com/TypeStrong/ts-node/blob/8b09d49b26c1c25e34133b857c073729dd691f11/src/bin.ts#L633",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1864/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1864/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1862",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1862/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1862/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1862/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1862",
        "id": 1337466743,
        "node_id": "I_kwDOAlTKGc5PuB93",
        "number": 1862,
        "title": "ERR_MODULE_NOT_FOUND error has undefined code",
        "user": {
          "login": "ldiqual",
          "id": 941453,
          "node_id": "MDQ6VXNlcjk0MTQ1Mw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/941453?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ldiqual",
          "html_url": "https://github.com/ldiqual",
          "followers_url": "https://api.github.com/users/ldiqual/followers",
          "following_url": "https://api.github.com/users/ldiqual/following{/other_user}",
          "gists_url": "https://api.github.com/users/ldiqual/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ldiqual/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ldiqual/subscriptions",
          "organizations_url": "https://api.github.com/users/ldiqual/orgs",
          "repos_url": "https://api.github.com/users/ldiqual/repos",
          "events_url": "https://api.github.com/users/ldiqual/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ldiqual/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-08-12T16:58:27Z",
        "updated_at": "2023-12-22T10:41:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Search Terms\r\n\r\n`code`. Found [this](https://github.com/TypeStrong/ts-node/issues/1586) but not sure if related.\r\n\r\n### Expected Behavior\r\n\r\nWhen wrapping an import with try/catch, and when pointing the import to a TS file that does not exist, the error caught should have `code = ERR_MODULE_NOT_FOUND`.\r\n\r\nts-node seems to properly throw this error here: https://github.com/TypeStrong/ts-node/blob/8b09d49b26c1c25e34133b857c073729dd691f11/raw/node-internal-modules-esm-resolve-v15.3.0.js#L258-L259\r\n\r\n### Actual Behavior\r\n\r\n`err.code` is undefined in ESM context, but defined in CommonJS context, when caught in the importing script.\r\n\r\n### Steps to reproduce the problem\r\n\r\n#### ESM\r\n\r\n```\r\n// error.mjs, call with `ts-node ./error.mjs`\r\ntry {\r\n  await import('./test.ts') // Does not exist\r\n} catch (err) {\r\n  console.log(err.stack) // Has the proper message & stack (Cannot find module...)\r\n\r\n  // Undefined, should be ERR_MODULE_NOT_FOUND\r\n  // Note that if you run the same code with `node` instead, code is defined.\r\n  console.log(err.code)\r\n}\r\n```\r\n\r\n#### CommonJS\r\n\r\n```\r\n// error.cjs, call with `ts-node ./error.cjs`\r\ntry {\r\n  require('./test.ts') // Does not exist\r\n} catch (err) {\r\n  console.log(err.stack) // Has the proper message & stack (Cannot find module...)\r\n  console.log(err.code) // MODULE_NOT_FOUND\r\n}\r\n```\r\n\r\n### Specifications\r\n\r\n* ts-node version: v10.9.1\r\n* node version: v16.16.0\r\n* TypeScript version: v4.7.4\r\n* tsconfig.json, if you're using one:\r\n```\r\n{\r\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\r\n  \"compilerOptions\": {\r\n    \"target\": \"es2021\",\r\n    \"lib\": [\"es2021\"],\r\n    \"module\": \"node16\",\r\n    \"moduleResolution\": \"node16\",\r\n    \"strict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"allowJs\": true,\r\n    \"useUnknownInCatchVariables\": false,\r\n    \"composite\": true,\r\n    \"declaration\": true,\r\n    \"removeComments\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noImplicitReturns\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"preserveSymlinks\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"incremental\": true\r\n  },\r\n  \"ts-node\": {\r\n    \"transpileOnly\": true,\r\n    \"swc\": true,\r\n    \"esm\": true\r\n  }\r\n}\r\n```\r\n* Operating system and version: macOS 12.5\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1862/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1862/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1861",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1861/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1861/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1861/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1861",
        "id": 1334458571,
        "node_id": "I_kwDOAlTKGc5PijjL",
        "number": 1861,
        "title": "Feature request: startup script for interactive repl",
        "user": {
          "login": "tslocke",
          "id": 360,
          "node_id": "MDQ6VXNlcjM2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/360?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tslocke",
          "html_url": "https://github.com/tslocke",
          "followers_url": "https://api.github.com/users/tslocke/followers",
          "following_url": "https://api.github.com/users/tslocke/following{/other_user}",
          "gists_url": "https://api.github.com/users/tslocke/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tslocke/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tslocke/subscriptions",
          "organizations_url": "https://api.github.com/users/tslocke/orgs",
          "repos_url": "https://api.github.com/users/tslocke/repos",
          "events_url": "https://api.github.com/users/tslocke/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tslocke/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2022-08-10T11:08:17Z",
        "updated_at": "2022-08-10T19:39:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behaviour\r\n\r\nWhen starting an interactive repl, check for the presence of something like `.ts-node-repl.ts` in the working directory. If present, run the script at startup. The behaviour should be exactly as if those same lines were typed at the repl prompt. In particular, any bindings created should be available in the repl.\r\n\r\n### Is this request related to a problem?\r\n\r\nWhen working on a project (as opposed to a single file script), Clojure and Rails have taught be the tremendous benefits of having a fully featured repl readily available.\r\n\r\nts-node gives me this for Typescript projects, but the convenience leaves something to be desired. Whenever I fire up the repl it will be because I want to play around with some modules/functions from my project, and it tends to be the same modules over and over. e.g. in a web app backend, I am constantly importing the database module.\r\n\r\nIt would be super useful to have a startup script that imports all the common things I'm likely to want to get at. It's also a good place to define useful repl helper functions. The script would differ on a per-project basis, hence checking for it in $CWD. Even better would be to recurse up the directory hierarchy up to $HOME, running any script found (in top-down order, e.g. $HOME/.ts-node-repl.ts first). That way I could have both shared helpers and project helpers.\r\n\r\n### Alternatives you've considered\r\n\r\nCreating a shell alias, something like `alias tsrepl='ts-node -r tsconfig-paths/register --transpileOnly ./.ts-node-repl.ts`\r\n\r\nIn that case, the script would be a bit different - it would fire up a ts-node repl using the API. That could be a perfectly good solution, but so far any attempt has ended up with a repl that (unlike the default one) doesn't have top-level await enabled, which is a much greater inconvenience than the problem I was trying to solve : )\r\n\r\nI would be happy with a solution to the top-level await issue, but I do think this would be a great feature to have in the core library.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1861/reactions",
          "total_count": 2,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 2,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1861/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1856",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1856/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1856/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1856/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1856",
        "id": 1330167066,
        "node_id": "I_kwDOAlTKGc5PSL0a",
        "number": 1856,
        "title": "SWC ignore .swcrc config",
        "user": {
          "login": "Kaizer69",
          "id": 13591248,
          "node_id": "MDQ6VXNlcjEzNTkxMjQ4",
          "avatar_url": "https://avatars.githubusercontent.com/u/13591248?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Kaizer69",
          "html_url": "https://github.com/Kaizer69",
          "followers_url": "https://api.github.com/users/Kaizer69/followers",
          "following_url": "https://api.github.com/users/Kaizer69/following{/other_user}",
          "gists_url": "https://api.github.com/users/Kaizer69/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Kaizer69/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Kaizer69/subscriptions",
          "organizations_url": "https://api.github.com/users/Kaizer69/orgs",
          "repos_url": "https://api.github.com/users/Kaizer69/repos",
          "events_url": "https://api.github.com/users/Kaizer69/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Kaizer69/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 17,
        "created_at": "2022-08-05T17:02:04Z",
        "updated_at": "2024-05-08T19:39:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Desired Behavior\r\nWhen use ts-node, you should use default swcrc that ts-node create, but if is present a .swcrc file, you should use that file.\r\n\r\n\r\n### Is this request related to a problem?\r\nYes, because if I have a JS file with private members (hash # char), SWC wont compile\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1856/reactions",
          "total_count": 8,
          "+1": 8,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1856/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1851",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1851/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1851/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1851/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1851",
        "id": 1320099582,
        "node_id": "I_kwDOAlTKGc5Orx7-",
        "number": 1851,
        "title": "Sucrase integration",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 280271351,
            "node_id": "MDU6TGFiZWwyODAyNzEzNTE=",
            "url": "https://api.github.com/repos/TypeStrong/ts-node/labels/research",
            "name": "research",
            "color": "eb6420",
            "default": false,
            "description": "Needs design work, investigation, or prototyping.  Implementation uncertain."
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/milestones/17",
          "html_url": "https://github.com/TypeStrong/ts-node/milestone/17",
          "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/milestones/17/labels",
          "id": 8155883,
          "node_id": "MI_kwDOAlTKGc4AfHLr",
          "number": 17,
          "title": "v11",
          "description": "",
          "creator": {
            "login": "cspotcode",
            "id": 376504,
            "node_id": "MDQ6VXNlcjM3NjUwNA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cspotcode",
            "html_url": "https://github.com/cspotcode",
            "followers_url": "https://api.github.com/users/cspotcode/followers",
            "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
            "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
            "organizations_url": "https://api.github.com/users/cspotcode/orgs",
            "repos_url": "https://api.github.com/users/cspotcode/repos",
            "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cspotcode/received_events",
            "type": "User",
            "site_admin": false
          },
          "open_issues": 4,
          "closed_issues": 1,
          "state": "open",
          "created_at": "2022-07-02T19:54:44Z",
          "updated_at": "2022-07-27T21:33:21Z",
          "due_on": null,
          "closed_at": null
        },
        "comments": 1,
        "created_at": "2022-07-27T20:40:57Z",
        "updated_at": "2022-07-29T22:25:41Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "This issue tracks the work necessary on the ts-node side to offer first-class support for a sucrase transpiler.\r\n\r\nRelated to:\r\nhttps://github.com/alangpierce/sucrase/issues/726\r\nhttps://github.com/alangpierce/sucrase/pull/729\r\n\r\nUser should be able to `ts-node --sucrase` or add `\"sucrase\": true` to tsconfig, just as they can do for swc.\r\n\r\nI will maintain a to-do list of tasks based on conversations with @alangpierce.\r\n\r\n## Interface between ts-node and sucrase (WIP)\r\n\r\nThese are the bits to lock down into a non-breaking interface of sorts, between sucrase and ts-node\r\n\r\n- What module specifier should ts-node `require()` when user enables `\"sucrase\": true`?\r\n  - basically, this is the value of the `\"transpiler\"` option, but I think we do a bit of project-local and global fallback `require()` conveniences to make things \"just work\"\r\n- What is the name of the module, if different than above?\r\n  - e.g when we fail to `require('sucrase/ts-node-plugin') then we should suggest that users add `sucrase` to their package.json\r\n  - we must(?) also declare optional peerDep for strict package managers\r\n- way for transpiler to return diagnostics\r\n  - errors and warnings\r\n  - from both `create()` and `transpile()`\r\n- way for transpiler to indicate REPL continuation / recoverable input\r\n\r\n## TODOs (WIP)\r\n\r\n- [ ] Add \"sucrase\" option to config\r\n- [ ] Add `--sucrase` flag to CLI\r\n- [ ] Add `--sucrase` flag to CLI --help\r\n- [ ] Redo docs to describe SWC and sucrase under same umbrella\r\n- [ ] make `@internal` transpiler API bits public\r\n  - https://github.com/TypeStrong/ts-node/blob/97f9afd046b66a0fe05a7d76e7a32f94b872016f/src/transpilers/types.ts#L22-L44\r\n  - `nodeModuleEmitKind`\r\n- [ ] figure out how sucrase should send us diagnostics: errors or warnings\r\n  - either from `create()` or `transpile()` calls\r\n  - let plugins declare their own \"name\" to namespace the diagnostics: e.g. `TSNODE-SUCRASE-123`\r\n  - Maybe becomes part of the interface described above, or maybe merely part of the transpiler API\r\n- [ ] accept sourcemap as object in transpiler API\r\n- [ ] expose api version?  to make future breaks easier to detect by plugins?",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1851/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1851/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1846",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1846/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1846/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1846/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1846",
        "id": 1315295703,
        "node_id": "I_kwDOAlTKGc5OZdHX",
        "number": 1846,
        "title": "Tracking issue for node runMain bug",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-07-22T18:19:42Z",
        "updated_at": "2022-07-22T18:19:53Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "Node shipped a `Module.runMain` bug in 18.6.0 introduced by loader chaining.  They've subsequently implemented a fix: nodejs/node#43763\r\n\r\nts-node shipped a workaround that version-detects 18.6.0.  The workaround doesn't preserve `require.main` and it's a hack I want to remove once the next node v18 is released.\r\n\r\nLoader chaining and this fix are being backported to node v16.  So v16 should never exhibit this behavior, but good to keep an eye on it.\r\n\r\nThis issue can be closed once we're able to remove the workaround hack for v18 and we've confirmed that node 16 ships loader chaining without the bug.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1846/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1846/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      },
      {
        "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1845",
        "repository_url": "https://api.github.com/repos/TypeStrong/ts-node",
        "labels_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1845/labels{/name}",
        "comments_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1845/comments",
        "events_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1845/events",
        "html_url": "https://github.com/TypeStrong/ts-node/issues/1845",
        "id": 1315266239,
        "node_id": "I_kwDOAlTKGc5OZV6_",
        "number": 1845,
        "title": "Idea: long-lived compiler server that keeps state in-memory, makes subsequent `ts-node` invocations faster with typechecking",
        "user": {
          "login": "cspotcode",
          "id": 376504,
          "node_id": "MDQ6VXNlcjM3NjUwNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/376504?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cspotcode",
          "html_url": "https://github.com/cspotcode",
          "followers_url": "https://api.github.com/users/cspotcode/followers",
          "following_url": "https://api.github.com/users/cspotcode/following{/other_user}",
          "gists_url": "https://api.github.com/users/cspotcode/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cspotcode/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cspotcode/subscriptions",
          "organizations_url": "https://api.github.com/users/cspotcode/orgs",
          "repos_url": "https://api.github.com/users/cspotcode/repos",
          "events_url": "https://api.github.com/users/cspotcode/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cspotcode/received_events",
          "type": "User",
          "site_admin": false
        },
        "labels": [
          {
            "id": 280271351,
            "node_id": "MDU6TGFiZWwyODAyNzEzNTE=",
            "url": "https://api.github.com/repos/TypeStrong/ts-node/labels/research",
            "name": "research",
            "color": "eb6420",
            "default": false,
            "description": "Needs design work, investigation, or prototyping.  Implementation uncertain."
          }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2022-07-22T17:42:25Z",
        "updated_at": "2022-07-22T17:42:25Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "I've had this idea kicking around for ts-node to launch its own long-lived server process, then multiple ts-node processes / threads / etc can request transpiled code and diagnostics from it.\r\n\r\nFor non-typechecking situations, swc is still simpler and faster.  But if you really want typechecking and want to launch many `ts-node` processes, then we can auto-launch this server and connect many ts-node processes to it.  So if no code has changed, then your `ts-node` process can start, log diagnostics, and start running code pretty quickly.\r\n\r\nIt's a wild idea, might never happen.  I've labelled it \"research\" accordingly.",
        "reactions": {
          "url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1845/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/TypeStrong/ts-node/issues/1845/timeline",
        "performed_via_github_app": null,
        "state_reason": null,
        "score": 1
      }
    ]
  },
  "error": null
}